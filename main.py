


import fitz
from PIL import Image, ImageTk
import tkinter as tk
import matplotlib.pyplot as plt
from tkinter.filedialog import askopenfilename
import matplotlib
import io
import numpy as np
import base64
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
matplotlib.use('TkAgg')
import cv2
import sys
from tkinter import ttk
import win32gui
import win32con
import win32api
from operator import itemgetter
import time
import re
import cProfile
import multiprocessing

#import sympy as sp
from latex2sympy2 import latex2sympy
from sympy.parsing.sympy_parser import parse_expr
from sympy.parsing.sympy_parser import transformations
from sympy import *
import matplotlib.style as mplstyle
mplstyle.use('fast')
image_dict = {"leftangle" : b'iVBORw0KGgoAAAANSUhEUgAAAAcAAAASCAYAAACXScT7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA4UlEQVR4nH2RvY5FUBSFtyGKE0Kh8BQa8QCik3g0pUan0KnOKdReQKKm14koECRrqrkzd3ZmVrlX1rf/NACgP/Txu1BVFQkhaN93bkopKUkSEkIQ4YfO84RlWSjLEgDwZrZtC03TMM8zAOANq5SiKIrI930+kFKKsiz7Lnwh+74HEWEYhlebV7LrOnJdl4Ig4HuGYUjrutI0TRz7PA88z0Oe5xyr6zqlaUpKKZ4EgKZpYBgGlmXhR9i2DaZpoq5rfgTbtimOY5JSciwAFEUBx3FwXReYeRwHxnHEfd/Q/nv2J9Ly5qq4Z/AvAAAAAElFTkSuQmCC',
"rightangle" : b'iVBORw0KGgoAAAANSUhEUgAAAAcAAAASCAYAAACXScT7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA1ElEQVR4nHWRMQ5FQBRF7+gotEShsAENvUTLiizABizAFsyUGp1Qig0o6TUS7m8+icz/t5rMyTtz80aQJP7EuA9FUSAIgjflN33fEwDneb6v+MDruug4DsuyfOCjFUIgyzIopXQtSTZNQ8MwuG3bW0uS+77TNE3Wdf3WAoBlWUjT9FG/IAAkSYKu637DcRwRRZFe6DgO2rbNqqr0Qm3bEgCXZdELSSkRhiF839ffVEohz3N9CdM0EQCHYdDXJ6WE67qI4/gZFPd/ruuK8zzheZ4Of+UD9ZvPHdwvDR8AAAAASUVORK5CYII=',
"perp" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAaElEQVR4nGP8////fwYyARO5GonWfO7cOYY3b95gSvwnApibm/9fv349hjjtnT2qeTBoZkEX+PPnD8OTJ09QxH7+/Mnw6tUrhgcPHsDFuLm5MVPY7du3/zMwMBDE4eHh/xkHd66iiWYAR5xySKgVHLYAAAAASUVORK5CYII=',
"neq" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA7ElEQVR4nOWTMYqEQBBFaxZjcwNjBWMD8QDiNcw8gDfwDCZ9CTESE/EEhvYRhArExKBt+Zu5zG6vjEywwX6ooH81j+rf1AMA6E19vAv4W8g8z9R13ZeBm1JKIY5jBEEArTUA4DYkz3PYtg0p5ekZIX3fg4heqmmaYJne7HkeCSGevHEcqaoqyrKMoig6fcdxXstk2zb4vo8wDLHv+4++cRJmpmEYznPTNCSlpLIsqa7rp7tJkpgnuZuJEaKUAjOjbVtYloWiKMDMxtJa//7F67rCdV2kaYrjOC4zuwxWCIFlWS4BAPAA/v0Wf9cn7H3m7Iid7qEAAAAASUVORK5CYII=',
"lessapprox" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAB1klEQVR4nJ2Sv+tpARjG3y8OB1HfDE6KLMpoUiwnigwWyl9AGSzKv2A6EmUwGcimKIOFOmYGkx/JchTLGSTpRPF8h1vHdbndm2d86/O+T+/zfAEAfSDNJ9BHoCzLpCjKv0EANJvNqFgsUiAQII7jSJIkIrzR6XRCr9dDJpOBw+EAEcFisSCZTKLRaEBRFKjg4XBAtVpFJBKBXq8HEcHj8SCfz2M4HOJ6vT4tV0FRFEFEICK4XC50Op13Zl7B4/GIer2OeDwOk8kEIoLT6UQ2m0W/38f5fH4P/i5FUTAYDJDL5eB2u0FEYFkWsVgMtVoN5/P5Pfin5vM5BEEAz/PQ6XRYLpf4Ap6bA4C22y1ZrVb6/v5+iWe/3xPDMI84brcbKpUKOI5Tn+Tz+VAqlbBYLCDLMrrdLrxeL5bL5cPqeDyG3W6HIAgQRRHtdhupVAoGg0FdpNfrUSgUcLlcHlZ3ux2xLEvr9ZomkwlZrVYKhUJks9loOp3S5XIhv99PkiSRw+F4WJVlGeFwGEQEs9msXuF5HuVyGa1WC+l0GgzDYLPZPBcgkUhgtVoB+NWkZrOJaDQKlmWh0WgQDAYxGo0A4GFVURQyGo1/Lfr9fietVqvOXuL4X/0AbdjYbkzIi8wAAAAASUVORK5CYII=',
"gtrapprox" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAB3ElEQVR4nJ2SvctxcRjHL+/nUKckLyllYzQZLF6GM8gimQ0WZeO/cOjOQhkUmQwWZSJmyohkoUynOKRzopzvPTxP3Ho8d933Z/zV5/pd1/e6NABAv0D7G+lFPJ/PJEnSz8X5fE52u50ikQgJgkCLxeJ7E385nU6o1WqIx+NgWRZEBK/Xi3w+j8FgAEVR8BXCG2RZRr/fRy6Xg8fjARHBbDYjkUigXq9DluX34lfu9zsajQbsdjuICESE5XL5XpQkCd1uF5lMBg6HA0QEjuOQSqXQbDahKMpTPBwOKJfLiEQi0Ov1ICL4fD4UCgWMRiPcbrf3M47HY5hMJvA8j2q1is1m8+0IGuDP5VwuF9JoNGQ2m2m32xHHcWS1Wv/ZgizLpKrqcx33+x0fHx9wuVyPEAKBAARBwGKxgCiK6PV68Pv9r+FMJhM4nU6USiWMx2N0Oh2k02mYTKZHIaPRiGKxiOv1+mx1v98TwzC0Xq9pOp0Sx3EUjUbJZrPRbDaj6/VKwWCQttstud3uZ6uiKCIWi4GIYLFYHr+Ew2FUKhW0221ks1kYDAZsNpvXVJPJJFarFQDgeDyi1WqB53kwDAOtVotQKIThcPiaqqIoxLLs/+6ZVFUlnU73eHuIP+UTPcbYX5PkpVwAAAAASUVORK5CYII=',
"triangleeq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA5klEQVR4nN2SMQ5EUBCG/10rUVIoXqHRqLiCSrSOoNG5kYjCETQShdA4ghMoRIHoiMxWu8nGvpAt90+meX/m/d9M5kZEBI6yLIMkSXAc52gSR/u+k67rZFnWV//OS8vzHKZpQpZlNE1z8G88VM/z4Ps+xnFEXddIkuQctes6YozRuq60LAupqkrTNJ2jxnEMURQRBAHCMIQgCEjT9By1KAr0ff/xpmkabNs+opZlSQAuVdu29Hh9YBgGoij6Rn4QY4y/1TO9E4dhQFVVl5pc1/19xjfqtm2Y5/lSoqIov8/IvdU/anwCGpLZodITjZ0AAAAASUVORK5CYII=',
"backepsilon" : b'iVBORw0KGgoAAAANSUhEUgAAAAoAAAASCAYAAABit09LAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA8ElEQVR4nL2RvY5FUBSF151oROhPtBqipeEFtCQegNbTUItXuJVKiCh0OrVSo6IQEdm3GnIzP9HMrOQku/iyzv7OeRAR4UY+7kB/DJZlCV3XIUkSBEGAaZrIsuwEuXPgOLiuC1mWsa4r6rpGEAToug5JkgD0S+I4JgDUNA09Pp9n2zYsy/K2177vUBQFYRhejVmWEYBvj+M4V+M4juj7/out53mwLOuSYYyBMfYGDcOAeZ6hKMrPMsdxkO/7p8zZmOc5qqqCqqqYpgnP5xNt2yKKIti2fTUWRUGappEoisTzPBmGQWmanjecMre/8P/BFz5nufVJYdg5AAAAAElFTkSuQmCC',
"subseteq" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAw0lEQVR4nM2TIQ6EMBBFh2UljhuAQIPsNbgoFwFLIEFDgCCohPBWrWvZ7oLYn1R1+pp5nXoAcjGPq4DbIM9PBVpr6ftejuMw7kdRJIIl0zSR5zm+7yMi1lXXNUbItm1kWYZSirIs2ffddheAGVIUBUEQMM/z6eF3jGK7rpMkSSQMQyexRkgcx9K2rSzL4gSxOknTFKUUVVX95gRgHEfn1/HgfOzXdZVhGE7nxDhsgDRN4+bD5kRrfdrC1+245H9+8S2QF0mCYH9zXcKwAAAAAElFTkSuQmCC',
"supseteq" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAxUlEQVR4nM2TMQqEMBREJ3FtzAnUSgsbyTU8hze1UfAUQbSwt7AQZLZyt9ioGC32wW8G/kDmTwRJ4ibyrsFjJi+bOM8z+r63LniehziOEQTBV6SFqqoIYHd832dZlpymiSRpNTliWRbWdc08z1kUhZvJhjGGQgi2bUvnYJMkQRiGMMa4X6frOozjiDRN7cGeZdI0DbXWx5lcvY4gf2t/1pMoiqCU+mjWsh2xriuGYQAASCmRZZlb2bZRSu0/5yr/84sfMXkDmlRbHovG1ucAAAAASUVORK5CYII=',
"subsetneq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA90lEQVR4nKWTMYqEQBBFa9YNDRRvYIPGGvYpBG/gfbyCnsGDaCqKmYGiImKHSv+NRmZ2e0TcD5108Zr6v6ofAEA39HUH+hf4rboUQlDXdSSlVEK2bRPhReM4IgxDaJoGIvp4yrLEAW7bBt/3wTlHnufY9x1nOsAsy6DrOqZpOgWeOsJpmoZc1yXLsi6Fc4CMMarrmuZ5vhbrq0fP88A5R1EU1z0CwDAMl1N9AH9Xbl1X6vuepJQUxzFFUUSmab7N8VgAAFRV1dsDbdtSkiTEGKMgCNQehRCn7f1ulfBBaZrCcRwIIZR1pcenlmUhwzCUtVPwTLe/1Q+uplyVJeBreQAAAABJRU5ErkJggg==',
"supsetneq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA7UlEQVR4nKWTMWqGQBCFn0GtLFYQRBD1Dp7HQ4itp9DWG9iIHsLCzlOIxbKNnfBSJL/B5FfUPFhYZvZjmDezGknigT6eQP8C9ddFKYVpmt4+Mk0Tvu/DNM2fIL9VliUBHB7LspjnOdd1JUlu4JmWZWHTNHRdl1mWXQdf6rqOhmFQKXUPlFISAMdx5C1X+76HrusIggCXe2zblp7nMU3TfY93XdXIr5U7mmNRFEiSBHEc7+a4LYAQ4g84zzOqqoLjOLBte4tHUYStIgBomnbJpGEYjs2p65phGFJK+Ta/q/hbSikIId7mTsEzPf5Wn/stbnASXm1gAAAAAElFTkSuQmCC',
"lnapprox" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAATCAYAAACgADyUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAACAklEQVR4nJ2Sv2vqUBzFv5qH2HQIFFqJg1ox4OLi0KljESfJrIibozgViqCD/4AgQrtKFwmlS6cupQFBtB0ypIqLgqLBH7gYSE3sedNLn++90r4euNO9H77fe85xAAB9Q87vQEREP/4XaLfb5PV6ifBFmaaJSqWCvb09dLtdfArO53NUq1UIggCn04lisYjtdrsL6roOVVUhSRIuLi5wenoKhmHAMAwSiQSenp7stzYoyzKIyD4+nw+5XA7X19dYLBZ/beL4Fcd4PKarqysaDoekqiq9vLwQADo5OSFRFCmZTBLP8+8uffQ3wzAgyzLOz8/h9/vhcrmQzWbt6V9y1bIsNBoNhEIheDweaJr2Ofj4+AhJkvD29gZd15FOp/8dx+vrKxRFwWQyAQDE43FEIhH7frVaYTabvYObzQblchkcx9nOBoNBMAyDfD6PwWCAer2O4+Pj3YkPDw8IBAK4vLxEp9PB7e0totHoTkT7+/solUowTRN2ycPhMCmKQoIg0P39PU2nU1qtViSKIj0/P5Msy6RpGp2dndFsNnsvucPhoHg8Tq1Wi46Ojmi5XJJlWeR2u+nu7o4ODw+pVqvRzc0N9ft92lk1lUphNBoBADKZDHiehyiKODg4AMuyiMViaDabuzkahmE7t16vwbIsCoXChzHZlftTvV6POI7brdlv+glWaGISsU5X8gAAAABJRU5ErkJggg==',
"gnapprox" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAATCAYAAACgADyUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAB+0lEQVR4nJ2Tv2siURzEZ28PI5tiQVCw8geEhIAoFiG1SrDcNljYW4ltii3yNwSsUtikENFCENIkEQRRhNi4rkUsFlxZCFEIaFxxrrjD4MWFu0z5Hp8v82a+TyBJfEM/vgPtgIPBALqu/z9oWRbOz89RKpXwT+75Rx8fH8zlcgTAWCzG29tbzudzOgl/Hzw+PjKRSFAQBLpcLiaTSaqqylqtRl3XuVgsSJKCU6qmaaLRaKDT6aBarcKyrO2druv4uQ96eXnB3d0darUanp+fcXBwgLOzM5yeniIQCMDr9WLHqmEYvLy8pCiKPD4+pqqq7HQ6tG3b+Y2aplGWZUajUTYaDcdQvoAPDw8sFApfpj89PbFcLnOz2ewHl8slyd+19Pt9TiYTkmQ6nWYkEtkCs9mM8/n8E1ytVry+vqYsywRAAAyHwxRFkfl8nuPxmKVSiaFQiJqm7VoNBoMsFovsdrusVquMx+PbIQB4eHhIVVVp2za3K3dycoJ+v4+joyPc39/DNE28vb1BURT0ej00m01Mp1OkUilYlvXZoyAISKfTaLfb8Pl8eH19xXq9htvtRr1eh9frxc3NDSqVCkajEXasZjIZGoZBksxms/T7/VQUhR6Ph5Ik8eLigq1Wa3+qJPn+/k5Jknh1deXYo+OuDodDyLIMv9+/91f9AnEpGMaOzMycAAAAAElFTkSuQmCC',
"longleftarrow" : b'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAYAAABIB77kAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAt0lEQVR4nO3UsQmDUBSF4f+FlK9xAl3EShBcwwXsXEIbG+ewdQF3cA0Rn91JHaNNeEpIcuB2Fz7uKa6RJC7M7UrsD/4AWFUVdV1fAzZNQ1mWTNPkFUQ7adtWgIqikHPOy6zrKkl6AcdxlDFGgNcJw1CSdN9eHEURaZrS9z15nhPHsZcmrbXHlTrnlCSJrLUahmFv5e0Yaf+XLstClmUEQUDXdV6uBDgEAeZ5fq7jbPCMfNan+QrwAZdSJw2cXHeLAAAAAElFTkSuQmCC',
"leftrightarrow" : b'iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA/klEQVR4nO2TsapGABzF/7glyWj3JKSUwSJPYDPY7HabQVksFuURMHsJT2BFISnnTve73Utf31eWW/fUfzmnfv3PcBgAoBvE3gH5B90AiuOYoig6+WEYUpZlr4GSJKEgCGiaplM2jiN5nkd5nn+buFCapiAi+L6PdV0vz3VdsCyLoigAACdQ13VgGAZE9NJxHIe+7/Hx+21FUcg0TaqqilzXJU3TLqvXdU1lWZLjOCTL8nW1dV1hGAZEUUTbtqe8aRrwPA/btrHv+3W1Ly3LAl3XYVnWKVNVFZZlYdu2h8c8G+08z3QcB0mS9MMfhoEEQSCe5x/eU9A7+mMTeUef3FQLc2CedvYAAAAASUVORK5CYII=',
"longleftrightarrow" : b'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAYAAABIB77kAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABCklEQVR4nO2UMWqFUBBF58U0Kti5AXEV2tjoBt4atLKydANWgrgCG5dgo2LvBlyEYKOi2HhTxUDiDx9JPiHJgWnuPN6BWwwDAHogT4+U/Qv/gDCKIkqS5NLH+76T67pUFMV9wjiOKQxDGsfxsnAYBuKcU1mWbwuckKYpiAhBEGBd18szjiMcx4EoimiaBgDwQdh1HYjoy0eWZQDA8/sqNE0j27apqipyXZcMw7hU6St5nlNd1+R53u1Kl2WBZVlQFAVt2549uYssy8AYg+/7R3YqBIB5nmGaJjjnl2TbtkHXdXieh33fj5wBt4/3NE0kCAJJknSpzr7vSVVVYowd2afC7+BnXZpfIXwBCvuPdvbeWr8AAAAASUVORK5CYII=',
"Longleftarrow" : b'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAYAAABIB77kAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAmUlEQVR4nO2UMQoDIRBFZ2MaCwtrC49h5ynEa1qKpaUn8QaW/lRbhCiB4C5LkgfTDTzmzzAbANCJ3M6U/YU/IEwpUYxxrRETcs7gnMN7P2v5iKGwlAIhBIhoWSmlxsJaK6SUMMagtbZ0OgB42SGOfjzvImWMLSmt9TjSnf1onHNLI73PJrfWUgiBeu9LE91w+NKeudan+QrhA1fatR9bUmoBAAAAAElFTkSuQmCC',
"Longrightarrow" : b'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAYAAABIB77kAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAnUlEQVR4nO2VMQoEIQxFk2V7e7Gwstbj6l3mGk5lJXiBwcbCv8XCwOwuTKMDC/MgRT6BByEQBgC6kMeVslt4C08JIdC6rscQk2itwTkHKSVSSnv+Jdy2DUQ0tLTWyDn/Fo6mlAKlFIwx6L1j+tEwMzHz3j8/B2qtJIQYIgNAvXfSWtOyLG/xrFW21mCtPT+akXjvEWM8ZAzc3+LPhS+cjPTBjIKB4AAAAABJRU5ErkJggg==',
"Longleftrightarrow" : b'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAYAAABIB77kAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAw0lEQVR4nO2VMQqDMBhGY1wcHJzFyc1BD+BV9F56ER0UHD2DTg7qGSTT62SpoLWEIpT64F9+Qh75+CAGgLgQeaXsFv6BsCxLUde19uV5nou+77dLDmiaBsuySNP06MhblFJEUYTneQzD8NzvCtu2xbZthBBfGd/3med5XzhNE47jEMcxy7Jove6VcRxxXZcgCAC4vDSnkZqmqT1SyvNIV9bSJEmiFaVSijAMPyvNSlEUVFWlJQTIsoyu6zY7A+7f4seFDyY0EbKLeQeFAAAAAElFTkSuQmCC',
"longmapsto" : b'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAYAAABIB77kAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA0ElEQVR4nO2UMQqEMBBF/4S1EaytPYe1Z/AAWglp0ngRC0kTb+CBzAnsbOx0tljYRYgsS1ZZZF/5Q+aRCTPEzIwTEWfK/sILC4kIXdd5FV7XFXmeo2ma98JvIIRAkiSQUqJt22d+27swjiOstV7SsiwxDAOqqkIQBCiKAuQafCLyErkgIkzTtP9CpRSyLPMWaa3R9z3qukYURQA7AMDGGNfRR2itmYhYKfWqfZRwWRZO05SllJvc+YfWWsRx/GiBB/M8IwzDTeYUHslvbJpLCe+3ggQuedI+YgAAAABJRU5ErkJggg==',
"ls" : b'iVBORw0KGgoAAAANSUhEUgAAABAAAAASCAYAAABSO15qAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAATklEQVR4nO2ToQ3AQAzE/F00a4cF3hABV1LQSs++MMaOpQNZts0B18nxBCbwf6C7yUwkfQRJZCbdzdb1Q1UZcET4TUQYcFV55x5PWPON3P6PUKx/NQ+TAAAAAElFTkSuQmCC',
"vdots" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAATCAYAAABGKffQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAQklEQVR4nO2QsQ3AMAzD5Dzrs734AD9gsGu3OlMQoJw5SDQADVlTcSRXlTJT3S3xgbsjiYhga4adO7gl/zXe3F7jASHhnXNbJyNPAAAAAElFTkSuQmCC',
"doteqdot" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAnklEQVR4nM2TPQrEIBBGv6yLOYAQ8AR2aXIM75FL2XsLyTHsLfQOKTLbLC4BI9mBhX1g4/D8xr+BiAgMHhzpd+I8z7DWNmvPnphzhpTyezGEcCmC3mzbRgBujRgj1URjDJxzvQYqWmsM3HusiSkleO9vSeu68vdYWz2OA/u+n1YupUAIgWmaTvPjOH4SWyilaFmWZo395Nin+me/o8cL4t6L3xwOcW0AAAAASUVORK5CYII=',
"doteq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAgUlEQVR4nM2SsQnAIBRELyEOYOkE9i7xh3QSK3EKN7Cxshb8aYJVCOZDIAe/+jzuDm5jZoZAuwT6IeicAxHd/o4nsJSCMcZ7MIQApdT9ky/FGBnA0uWceTpaa+G9fwowZYzBJh3AdKy1IqW0BBGRvOOM2ntHa23JUWst7/izrX4CnvmCWSMrNVdQAAAAAElFTkSuQmCC',
"parallel" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAAUCAYAAABbLMdoAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAATElEQVR4nGP8////fwYiARMuCRMTE4aamhqGK1euMDAyMjI8ePAAt2KSTB5VPKqY/oqNjY0ZFBUVGbi5uRns7e0ZODg4GBipklOwAQBm2BFAM2ZT4wAAAABJRU5ErkJggg==',
"asymp" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABIklEQVR4nO2SvaqCcBjGn/SPTk62tki4uUt0B47uDV1IznUJbl5Ag9cgiIMg0miTNrQ0GCFKyHO2c+D070C0NJzf9n49vF8TksSbKO8K/Iu8IFKWJYIgQFVVTwtPpxM2mw3qusZEduKyLLFcLnG73WDbNhaLBWzbhhACTdMgyzLkeQ7TNFEUBcAntG3LMAzpeR6n0ykBUFVVzudzrlYr7vd79n1PkpR2ImMYBqiqCiHEQ+zR84u6rpGmKaqqwv1+x2w2g+u6cBznJ0k2yvV65W63o+M4BEAA1DSNQohv27Isbrdbdl1HqUiSJDQMg+v1mnEc83w+kyTHceTxeGQURfR9n7qu83A4yHfSti0URYFhGH+OerlcoOu6/MSv8uFv/ypfWhvaAsunZXIAAAAASUVORK5CYII=',
"otimes" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABs0lEQVR4nL2TsariYBSEJ5eFVFH4iU0CsUhjuoBIGiP4FNrkFcQ2PkOeQiQBu2hrp2AR8wYBY6GiNpKAlTi3Wl25XBYuy045nK+YOedIJIkf6OMn0L8FSSIMQ7iuC0VRoCgKXNdFGIZ4S8U/dL/f2ev1qKoqgyBgkiRMkoRBELBWq7Hf7/N+v5Mk30Df91mv1zmfz5nn+dPf7XaczWY0DIO+77+D5/OZsixzsViw1WrRNE3u93vu93uapslms8nFYkFZlnm5XF5gFEXUdZ0kmWUZNU2jZVm0LIuapjHLMpKkruuMooi/fmc9HA6o1+sAANM0MZ1O0W63AQCr1QqmaQIADMPA8Xh8tSqEwOl0AgBcr1cMBgMIISCEwHA4RFEUAIDz+QwhxKvV7XZLSZKYpik7nQ4rlQqTJOFms2G1WmW322WappQkiXmev7fqeR5t2+Z4POZyuXz66/Wak8mEtm3T87yv6yjLko7jsNFoMI5jFkXBoigYxzEty6LjOCzL8itIkrfbjaPRiKqqEgABUFVVjkYj3m6355z03Xc8Hg8cDgcAgKZp+Ph4v85vwb/p/7/VJxgvftN0SVpkAAAAAElFTkSuQmCC',
"ntriangleleft" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABX0lEQVR4nJ3ToaoqURTG8W9GRhDBIhgGfIyx+AgjYhrsFh9ALBaxazJqVLMWo8U+Vi3jaNAgCAqCjvA/4XLO5cJ4lPvFxf6tvddmbwNA/xHz04W3202e52m9Xv8p8GGGwyGmaRKGIQAfw0KhgOu6bDYbrtfrZ3C1WiEJ27YxDIMgCPh1xvP5rG63q0qlIkmKokg/dxm3g+/71Go1UqkUkpBEo9FgsVggiSAI/h718XgwmUwoFotIIpfL0Wq1aLfbmKbJbreLh/P5HEkkk0n6/T73+x0Ax3FwXRcgHoZhSLlcxjRN0uk09Xqd8XiMJKbT6Wv4ne12S7PZJJvNIgnDMBiNRkRR9Dv8zul0wrKsnwa2beN53ns4GAxIJBLs93uWyyXVahXLst5Dx3EolUr/1A6HA51Oh+PxGA9930cSs9nsVd942Ov1yOfzPJ/Pl9CA+P94uVyUyWRePseX8F2+AB/MXXj0PlKPAAAAAElFTkSuQmCC',
"nleq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABXklEQVR4nJ2Tsa4pURiF18yYUGgUCoVKlApRqHRarag8g248hlcYmQKNRFQUgkKl0TAZlIgQrULynerMjZzjHrGS3azsL2v/K/82APSBzE+gt8H7/a7dbvds8oa63S6GYRAEQei9leh5nlKplMbjsSqVivb7/evEx+PBbDbDcRxs20YSlmVRKpU4nU48gZfLBc/zqNVqJBIJJCEJ0zRxXZfr9RreDcHFYoFlWUginU7TbDaZz+cUCgXK5fKPF4Wg7/sUi0VM00QS+XyeRqOBJNrt9mvwW+fzGdd1qVarxONxJJFMJqnX63Q6HW63GwAG/L45gDKZjLLZrHK5nIbDoXzfVyQS0Wazed3qdDpFEqPRKPS22y2tVovj8UjkO+FwOGgwGISJ/X5ftm0rCIKnrYlGo4rFYv8SJ5NJWP9fZ71e/ywHoNfrIYnVavVqkt/B5XKJ4zgvof+2+pc+/o9fM6fgUvUIlvgAAAAASUVORK5CYII=',
"div" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAeUlEQVR4nN2TMQrAIAxFf0pP4Bk8hnf3BM4ugkcQZ4ffpbaLikgLpQ8yJeEn/ERIEgtsK01/ahQRiMizivso6b3vT1N9LKUg5zylppQCeGKtJYCpiDHyUkwpwTk3pWiMuUdtEUIAAGit+zu2qFa0St6xY/Q4H7vVEQcdNkQ+deF9GQAAAABJRU5ErkJggg==',
"nparallel" : b'iVBORw0KGgoAAAANSUhEUgAAAAkAAAAUCAYAAABf2RdVAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAr0lEQVR4nM3SMQqDQBCF4X8jsoKVtSDY2q61ltbex8pD7DWs9RBW9noEW6uXKiFBQpIqed3AxwwzjJEk3uTyWJRlSdd1LMuCMYZt287oo04/Rvu+v0dVVTGO4xkdx4H3HoC+72maBvQQ55yCIFCWZQK0rqsk6Y6897LWqm1bzfP8hC63EcMwkCQJRVEQhuF5O2st0zSRpun3J/gH5Jwjz3PiOKaua6IoAsB8/ZmvcgVY31iIQYkYRAAAAABJRU5ErkJggg==',
"Lambda" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABK0lEQVR4nM3SMYrCUBSF4ZOQZ0B4tbgAwR0IdjYBkWBlJegSxB0E3IPYBMRCUrgBXYK4A8HWQhEFiU3gn27ESUQGpphTnst3qusA6Jdxi8rpdCrHcdRoNIoVBWk2m5RKJSSx3+9z9xw6HA5IIooijDFEUfQZTSYTXNfleDzSbrep1WqfUb1ep9VqATCfz5HEdrt9j3a7HZKYzWYAXK9XfN9nNBq9R+PxGM/zOJ1O312326VSqZBlWR5lWUa1WiUIgpfV5XKJJNbrdR5tNhskEcfxC7rf75TLZQaDQR4Nh0OMMVwuF36m1+thrSVN0ydK0xRrLZ1OJwcAVqsVkkiS5ImSJEESi8WiED0eD6y1hGH4RGEY4vs+t9utEAH0+32MMZzPZxz4oy//P+gLCLkEOI6Q+9oAAAAASUVORK5CYII=',
"lll" : b'iVBORw0KGgoAAAANSUhEUgAAABgAAAASCAYAAABB7B6eAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAACTklEQVR4nO2UwSvzcRzH39/tYEIOEpHGaSmZTPkHRAlNOUg5uIuDg1IrF6UcSEntIKWUHSxKOROtfrHSWi0ulpaWZIhN215O5tHmeU56nsPzPr4+3z6ven/qawD0g7H95PJ/SxCPx0vyVCqlVCpVxLPZrBKJxJ8FV1dXmpiYkNvt/sIfHh40Pz+v5uZmXV5eflm8sbEhl8ulQCAg8U1isRjj4+PY7XbKysqYmpoC4P7+Hp/PR3V1NZLo7+8nmUzy9vaG3++npaUFSbS3t2NZFkWCaDTK2NgYdrsdh8PB5OQkNzc33N3dMTc3R1VVFZIYHBzEsiwymQzr6+s4nU4k0dHRwe7uLvl8HuBTEIlEGB0dxWazUV5ezvT0NIlEgmQyyezsLJWVlRhj8Hq9nJ+fk06nWVtbo6mpCUl4PB729vaKmigIPB4Pkujt7eX29rbwYGZmBkk4nU7C4XCBB4NBJOFwOAgEAt81/Snw+/3U19cXeg2FQgAcHx/jdruRRFtbGzs7O+RyOa6vrxkYGEASdXV1LC0t8fz8/L0A4OXlhZWVFRoaGpBEX18fJycn5PN5gsEgnZ2dSKK1tZXt7W1yuRxnZ2cMDQ1hjKG2tpbFxUWenp5KCz7y+vrK6uoqjY2NSKKnp4ejoyMA9vf36erqQhIul4utrS2y2SzhcJjh4WGMMdTU1LCwsMDj42NpwUd+PWRFRcWX2cHBAd3d3UjCsqwCv7i4YGRkBGMMy8vLvxd8JJPJsLm5WXJ2eHhIPB4v4pFIhNPTUwz8/03/suAdanmiMzWf60gAAAAASUVORK5CYII=',
"oiint" : b'iVBORw0KGgoAAAANSUhEUgAAABMAAAAbCAYAAACeA7ShAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAADFElEQVR4nK2VS0hybRDHf0oX0KN2fCk0CAOjCHcRdLGIINrUstoVRNC6KKhdELQo0FoWuA3a1D4igqCCIhIXlUIZ2QW6ibdElOZbvLzSecv6Pr4Gns0M83vmmf/MOToREX7I9D8F+hYWCARoa2tDVVXGx8fJ5XIAxGIxhoeHKSsro6uri0gk8jtBClg8Hpfy8nIBRFVVAcTj8YiISF9fn8bf3t4uIiIFYevr6wJIb2+vxONxMRqN0tzcLKlUSoqKikRRFEkkEtLT0yOAPDw8SFGhJ4bDYQCampowmUxsb29jMpmIRCLkcjlcLheKorC0tMTMzAxms5mCsHg8DoCqqnkowNHREQBWqxWAmpqa7wVIJpMAmEwmjT+RSHzq/xL2J0lRlH91CfBRzZubGxkaGhJFUQQoeGw2m3i9Xnl7e8vn6t5vwOXlJa2traTTaUpLS3l8fGRwcJDKysr85X6/n83NTQwGA6+vr4yOjrKysvKxsu7ubvn165eEw2Hp7OwUQE5OTjSVLy4uCiCzs7MyNjYmgOzs7IiISL5nz8/PbG1tMTk5SXV1NalU6sueWSwW5ufnUVWV1dVVrQC3t7eICPX19ZqkQjBFUSgpKcHpdHJ9fa2F2Ww2AE5PTwHylf2t2ntYLpfj6uoKu92uhVVUVNDR0cHCwgLn5+ekUin0ej0Gg0EDez8yc3NzPD09MTAwAIBGzWAwiNvtJp1Ok8lk0Ol0TE1NaWAbGxucnZ1RV1dHMBhkZGQEn8/3O/j3nF1cXEh/f/+XMwaIy+WS5eVlTe6nX41oNCqA1NbWfoi1tLQIIKFQ6EPs03UqtErfxf4z7KvdzMPu7u7Y398nm83y8vICgNlsJplMcnx8zP39PQDRaBS9Xo/RaCwM83q9uN1u9vb2ODw8BMDhcBAIBGhsbMTj8RAKhYjFYjgcDnQ63ccn/WnewcGBAKIoihQXF4tOp5Pd3V3JZrNSVVUler1eLBaLADI9Pf2Zblo1fT6f2O12cTqdsra2lvf7/X5paGgQq9UqExMTkslkPoVphvb/2o/+hP8BdnqEKxchnDIAAAAASUVORK5CYII=',
"ngeq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABXklEQVR4nL2Tv84pURTF1xkUIhIFnkCpIEQpnkBDYhoeYnqJx5iK6ESjENPqJhGVKPxJNBPF0Iie/G7FveJz75evuCs5zdn7d7LXzjoGQD+Q9RPoW+DtdtN2u30v8A/NZjMksVqtXu6f4GKxoNlsMhgMCMPw2WDbNrlc7u3BJ7jb7ahUKhhjMMZQLpfpdrvE43F6vd5n8KHT6US/36fRaJBMJpFEOp2m0+kwHo+5Xq9fg3+qVqtRLBZxHIdsNoskYrEYh8PhMxgEAcYYSqUS+XweSUSjUarVKmEYvoLn85nhcEir1SKVSiGJTCZDu91mNBpxuVzePfq+j2VZSKJQKBCJRKjX69zv9y8neoL7/R7XdTkejyyXSyQxmUw++o8+gpBIJARoOp3K8zxZlqUgCOS67ltobNv+nZz5fI6kb53NZvO+Vc/zkITv+x/HfPH40Hq9xnGcv0IABv7zf/wFHs0hgCImIzkAAAAASUVORK5CYII=',
"Theta" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABhklEQVR4nM1Tu6rqUBScc4gR3MRWd2KhjUjyITaa3kev3yDxT5R8gY9ewcL8gQ8QEhTsJILEVphTHJJ7cmNzb3UGdrOZWbP2WrM/SBL/gc+/L47HI/r9PgzDQD6fh67r6PV6OBwOaSJ/YLlcUlVVlkoljkYjTiYTOo5DKSVVVeV8Pk+4iTAIAgohWK/XebvdftZjGIY0TZNCCAZBkBYOh0MC4Gaz4Ttst1sC4GAwIEl+xMOpVCpQFAWn0wnP5zMzDE3T0Gg08Hq9cL1ev9/4eDwIgLZt03VdAsgc13Vp2zYBMIoiKgASh2KxiGazidVqlXG0LAvr9RoAEEURlLiNuICUElLKt7uLDTRN+7MOXddZq9XeDiZGtVqlYRgkySQA7XYb5/MZnue9dfM8D5fLBa1WKx0A3/cphKBpmgzDMOV0v99pWRYLhQJ930/vkSQXiwVVVaWUko7jcDqdcjweJ8mZzWbZ5MTY7/fsdruUUjKXy7FcLrPT6XC326V4SQD+FZnf8XuFX0sSgt0vNPxSAAAAAElFTkSuQmCC',
"blacksquare" : b'iVBORw0KGgoAAAANSUhEUgAAABAAAAASCAYAAABSO15qAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAARElEQVR4nO2UOwoAIAxDU+m9e8TeKHFRnP2ADj7ImAdZYpKEDcpO+YgAakSEAEwlM3V/whd8wRsC639AEiSnyu4+BKtUuzwr6KyTWpEAAAAASUVORK5CYII=',
"neg" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAdElEQVR4nO2TMQrAIAxFv8XBzUVP4+qRvJkX0RPkAoKzU1xqu4kI7dJ+CGTII/khEczM2NCxA/3gU6AcSWsNtdYlyFoL8KkYIwNYCiJiMS6nlIKU0rRTzhkhBBDRPaoxBt77uS95lb+0Va01nHNQSkF84Ds6f3Q4WwjSTW4AAAAASUVORK5CYII=',
"sum" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAAZCAYAAADXPsWXAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABlUlEQVR4nKXUv6uxYRzH8c/BXXeJFItOJinFZKBMZvI3GPwTdpP/QBkMBpsMMiuLkkkYJXf34seAGAzvZzg9dz05j3NuvnXVNVy9ruvb9en7AaA3yydJp9NJtm2/BCQSCQmg0+kg6aW12+3wSJJhGG+1I4D7/U65XHb0Wq2Gm9Lfze12o1AoOFCj0XCPAJzPZ7LZrAM1m033CMDhcCCdTiMJj8dDt9t1jwDYtk08HkcShmEwGAzcIwDr9ZrPz08kYZomo9HIPQKwXC6JRCJIIhAIMJ1O3SMAs9mMYDCIJMLhMIvF4uGM56ccZTIZFYtFSdLhcFCv1/s+bM+qXq87X16pVNy302q1HKBUKnG/390h/X4fr9eLJPL5PNfr9b+XfYuMx2NM00QSqVSK4/H47MGPyHw+JxQKIYlYLMZ2u30KPCCbzcYJWDgcZrVa/Qj8g+z3e5LJJJLw+/1MJpNfAQ5yuVzI5XJIwufzMRwOfw04SLVafXk8ttvtr8RaluVmGD7UB4BlWbpcLi8B0Wj0C3nrGZL+AGbk9K9aF7NjAAAAAElFTkSuQmCC',
"bowtie" : b'iVBORw0KGgoAAAANSUhEUgAAABQAAAASCAYAAABb0P4QAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABeUlEQVR4nNXUsatBURwH8O99nXLKYjSIoiyUuhNZTco/YDPYTcp0S1mUMhst8k+4lmuSbgw2FoPChNS9+L7h9UQurp7lfbfT+Z5PnV+no5AkPpivT2IPwePx+DZk2/Zj0DAMFItFHA4HV9hkMkEul/tZ0CG6rhMA4/E4p9OpU+WSVqtFKSVDoRBJ8ikopaTX62W73b7rbLdb5vN5AqDP53MH6rrOZDJJACwUCtzv9yRJ0zQZjUYphGCj0aCmae7A+XxO27ZZLpepKApjsRhrtRqllAwEAjQMgyTfA3/T7XYJgAAYDoe5Wq0ue9egq3c4HA5RqVQghEAikcBsNkOpVMJut7vrvgSbzSbS6TQsy0K/38doNIKmaeh0OlBVFaZp3h54duVUKkUAzGazXK/XN51er0e/30+Px0NVVd3NUAjBer3O8/nsVONyuWQmkyGA12AwGORgMHCErnM6nVitVhmJRB6Di8WCm83mJXad8XhMklTI//h9/SXf589tuTXPeLAAAAAASUVORK5CYII=',
"blacktriangleright" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAwklEQVR4nKXTIa6FQAyF4c6EQAJbQYHBodgCahQOxa5wOAzB4bAIDAaBYBPwX8VLnrmZ4TY58kvTNlUA8qL0G/Q7NMbIsixuEiCKIpRSlGXJuq7Y1B8UEUQErTXGGLZtc4NPPM+jqir2fXeDT3zfp65rjuNwg0+CIKBpGs7zdINPwjBkGAY3WBQF8zzbd8zznGma7GfMsoxxHO23miQJfd/b3zGOY7qu+wr+wTRNaduW67qsEIACuO9btHZ7FAXvHvkDsAq7p4NsmqcAAAAASUVORK5CYII=',
"leq" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABHUlEQVR4nO2TMcuCYBSFT75CQuCgrc79gKDBH+HkZPgn2voXrU5NUXMgOOUSKLi5uIjLC0kguQsvp+0bwviCto/vgbvdey7nXO6EJPEl2rcCf0BESokoiuB5Hpqmgf7JkFIKeZ4jjmPEcYyyLCGEgOu6mM1mAN/QdR0PhwODIKBlWQRA27a5Xq95PB75eDx+ekdFsiyjEIIA6DgOt9str9crlVKjC0ftWJaF5XKJoiggpUSSJBBCQAiB1WoFTXuJ8p0dkrzf79zv9/R9n6ZpEgDn8znDMOTpdGLf9+/tjDEMAy+XCzebDReLBQFQ13XWdf25yCt1XXO327Ft2/FMbrcbzufzr6efTqcwDGM8kzRNCeCjqqqKE/L/i194AjwNayNgX7hCAAAAAElFTkSuQmCC',
"ggg" : b'iVBORw0KGgoAAAANSUhEUgAAABgAAAASCAYAAABB7B6eAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAACWUlEQVR4nO2UzytsYRjHv85hxXSGiZ2ENCkLZUsTKaWsbDQ1Kf4ECyUTkVLK2EwWFsqUKGVPfjdSs9OkJqRkhTEc8nNOn7u5Ttedmbob927uZ/c+77fnU8/z9hYB6BsxvrP53xVcXl7mDVxdXSnfFG9ubvTy8vLngt7eXvX09CiRSHwJzM3Nqbm5WWtra19E8XhcdXV1ikQien5+LmzgJ7Ozs1iWhSS6u7s5OjoCYGNjg/r6eiTR1NTE6uoqjuNwdnZGa2srkqiqqmJmZoanpyd+R78eMpkM4+PjeL1eJNHV1UU8Hufj44PFxUUaGhqQRGNjI8vLyziOw9bWFoFAAElUVlYyPT3N4+NjfsEnDw8PTE5OUlFRgSQ6OzvZ398nm82ytLSE3+9HEn6/n1gsRjabZXd3l/b2diTh8/mYmprCtu38gk9s22ZwcBBJlJaWunXHcYhGo5imiSQSiYR7t7Ozg8/nQxKRSKSwIJVKEQqFME0Tj8dDOBwG4O7ujnA4jGVZGIZBMBgknU7z/v7OwsICtbW1SKKtrY3j4+NcwcnJCcFgENM0sSyL0dFR0uk0t7e3jIyM4PF4ME2TUChEKpXi7e2N+fl5ampqkEQgEGB7ezt3B8lkkr6+PgzDwOv1MjY2RiaT4fr6muHhYcrKyiguLqa/v5/T01NeX1+JRqNUV1cjiY6ODvb29nIm4QpaWlooLy9nYmKC+/t7NzA0NERJSQkDAwOcn5+79fX1dfcBHBwcFNyjK1hZWcG27ZzA5uYmFxcXOfVkMsnh4WHBxp8Uwf/f9B8LfgBy76I8nMCHFQAAAABJRU5ErkJggg==',
"lneqq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABbUlEQVR4nKWTvYrCQBSFj8tCCElhYSEGtBFrHyBPYGNvLUIKn0HSWQckRWpLCyGBgIXYiYUYLESEkCaKgp1Em3CsnP1RZHU/mGrumZlv7kyGJPEGH++EXgoej0f0+300Gg1EUYTPZ8VBEMDzPHieh+l0CpKoVquQJAngN06nE4fDIVutFjVNIwAqisJ6vU7HcRjHsagVwdlsRkmSCICFQoHtdpu+7/NyufARwlFVVZTLZQDA4XBAEARYLBbYbDaPPX6vFEURe70ea7UaZVkmABaLRRqGQdd1mSTJz6M+IkkSuq5LwzBYKpUIgLIsMwzD58EblmUxjmMul0t2u11ut1uKduz3e4xGozuVMAzR6XQwGAzQbDahaRoURflyHI/HBPCnsVqtmLm91TRNcT6fxU673Q66riObzWIymUBVVTH3rx2FY6VSgW3bAADLsrBer2GaJnK53J13Pp+/7yNJzudz2rb99KaF46u8/R+vLhOSNgxAG2oAAAAASUVORK5CYII=',
"BbbN" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABQUlEQVR4nL3SIYsCYRDG8b/HpkVFsGwSwSpv0GRa0aLRoh/AalgWEdH4NmFZk1XRatVqsfoFBPOCRQ0Gg47l7ji5uxXD3ROH+cEMMxEREV7M26vgAU0mE6LRKNlsllQqxXQ6/dZ8PB4pFosYX4siwnK5JB6PY9s2tVqNWCwWPl6pVKLdbpNIJGi1Wmitn+9ULpe5Xq+sViuazSbr9ZrtdhuOADzPo9PpcLvd8DwP13Wfo3Q6TbVaZTQaUSgUSCaTLBaLxyZ5z3g8Ft/3RUTkfD6LUkr2+70EQSD5fF4ul4scDgexbVt+vJNpmvT7fXq9HpZl0Wg08H3/9/E+Uq/X2e12bDYbHMdhPp8TBEE4AhgOhziOg2EYaK3pdrvPkVIKpRSz2YxKpfJZN0IMAFprcrkcg8GA0+lEJpMh8v9f/ufoDr09g91EF15OAAAAAElFTkSuQmCC',
"BbbC" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABKUlEQVR4nL2SMYrCYBSEx7DERn6bNKks/kIIeAG9ggiC8EOqQAobG8EmnSdQsPISkiqNnQfwAEJKxQTSRAi/kGK2UlcXMdvsdG+YD+bxXo0k8Qd9vRp5nmO9XmO73eJ0OsE0TXQ6HSilMBgMAP7Qfr+nbdscDoc8HA7UWjPPc+52O45GI06nU9ZulbIsQ6/Xg1IKhmFgPp//qpNlGYzbsFwu4XkeHMd529+yrAew2Wzguu7HpQ0AKMsS5/MZrVarGnC5XCCE+Bi+A41GA0VRVAfq9TqEEEjTtBoAAP1+H2EYVgdmsxkWiwWSJHkbLsvy+dJRFLHZbNL3fWqt7/7xeGQQBJxMJnwCSDKOY47HY7bbbUopKaVkt9vlarXi9Xp9vEZVGZ8j/w18A6G9sFWSjVSTAAAAAElFTkSuQmCC',
"BbbZ" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABO0lEQVR4nL3SrYoCYRTG8eOyxeol+OIUNQhTxGAxWAa7wQsQvABNBovZYjV6AcL0wSZoE6bJzIuIWHzBDxz9b1l2EUfB4lPP+cE58CQA5M18vQtERL5FRIwxUiwWYxe01pJMJiWVSkkQBNLtdkV4ke12i1KKMAzRWpNOp9lsNrxE9Xqd4XAIQK1WYzQaATxHk8mEcrnM7XZjPB5TrVb/ZrFov99jWRa+77Pb7VBKsVqtXqNms0m/3weg0WgwGAzu5g/I8zxs2yaKIlzXpVQqcb1en6Pj8Ug2m2WxWGCMwbIslsvlwyV3qN1u0+l0AGi1WvR6vbjr/9F8PieXy3E6nZhOpxQKBS6Xy3MURRG2beN5HufzmXw+z2w2iwUAid/npVKpSCaTkcPhIOv1WpRSsbVyHEcS8KGWfw79AHf36GKWaqedAAAAAElFTkSuQmCC',
"BbbR" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABO0lEQVR4nMWToYoCURSGPxeDNoODMwMaLoLhXt9hXsEgGAxWi2ASploUDL6BJoM+gNEnEAy3CYoKBtNMmCacDbsuuyCLGna//H/8/wknJSLCC7y9Iv0Qp9MpnudhjCGbzWKMwRhDtVpFKUW32yWO4/uNvV4Pay2VSgVrLdZalsslvu/jOA61Wu25qel0mjAMieOY7Xb7/I1KKS6Xy3Pi9Xpls9lQLpcfF6MootlsEgQBhULhY/694Pl8plQqcTqd8DyPJEnI5XLMZrOvzN1G3/c5Ho+sVitc12W/36O1ZjAY/C7eCIKARqPBaDRiPB4zn885HA6P3djpdFgsFkRRRBiG9Pv9x8RMJkO73WY4HFKv11mv1+x2O5BPJpOJuK4rWmtRSsl3kiSRYrEoWmvJ5/PSarUk9X/f8WfiO90BiJ1+DY3EAAAAAElFTkSuQmCC',
"Rightarrow" : b'iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAhUlEQVR4nO2TsQ0DIRAEOSgAAgJqoA0oFhqBjIhCQJCvM0sv22/0xtmPtMkGI91KRwDANsB3SG7RH0UxRpZzPpa4gPceSimUUp7di2iMAcbYUrTWqLW+F63Se4e1FsYYtNbw09hE9HmjOSeEEKfhnO85zTkHKeX52CuEEJBSOnQE3N//hQdF4WYf++mCdgAAAABJRU5ErkJggg==',
"vartriangleright" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABFElEQVR4nNXTIY6DQACF4TebTRUhVCAqmvQCCG6AwHAAamtrKjhBTQ9QgyDhCJOg0CQILgABkjZBYVBNGqqavjXbNXRL2qzZ304+MW8ygiTxRh/voL+BXdehbdvXYVmWWCwWWC6XSNN0XPK7JEkIgLquEwANw2AQBOz7no8awOPxyCiKaNs2hRDUNI2e5/FwODyHTdP8HNZ1zc1mQ1VVKYSg4ziM45i32+05vHc+n7ndbimEIABWVcXPsQ2yLIPv+5BSYjKZwHVdzGaz4ThN0/ByuTAMQ5qmSQCcz+fc7Xbsuu73O65WK06nUwKgZVmUUvJ6vY6vqigK1+s1i6J4+AwDmOc59/s9T6fTU3BPkP/ud7zaFw0TeR/wj+s4AAAAAElFTkSuQmCC',
"wedge" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA30lEQVR4nNWSMYqEUBBE628iegDNTBUEMw8h+D2EmVdQPIa3MPyxBzAQ8QiCBqaKRlqbyQ7ODEw0bGXd1c0r6BYkiQ/088nwFxeWZYHneXBdF23bPpp8oqqqCIAAWBTFg/eUoJSCrutwHAdKqfeE4zhomiajKGKe5wTAcRxfE5qmwTzPiOMYUsqL+JKQZRmFEJymied50rIsSikv/7bg+z6DILjqJEloGAb3fb9HGoYBfd9fUQBASolt21DX9T1SWZYEwK7rrt66rtQ0jWma3iOFYUjbtm93+dsX5L//1l9fRQ6GEZ+r2gAAAABJRU5ErkJggg==',
"chi" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABUUlEQVR4nL3TMY8xURTG8Wc1hCsxohK1jyARxYRChfgKepVC5VtQEBLJSCh8F1EoTUSBRE1D3P9b7WRnzW6yzXvKc5/fvSc5uR8A+mPF/gpCaDabKZFIqFKp6Hg8BgFA1WpVuVxO1+s1aAKw3W4ZDAbEYjG63e5nm+FwiCSWy2XQC9Bn1et1yuUyAL7vk0qlaLfbocwb6vf7pNNpXq8XruuSzWa5XC6/I8/zkESv10MSi8Xie+QdbTYbJCGJRqPxBiLR/X5HEplMhtPpFIne9jSdTiVJrVZL+Xw+elFfb9jv9ySTSSRRKpUiXwmNZ63FdV0cx6HT6WCMwVr7OxqNRkjC8zxWqxWS8H3/Z3Q4HDDG0Gw2AdjtdkhivV5HI2sttVoNx3E4n88APJ9PjDEUi0Umkwm32y2MxuNxMNbXms/nFAoF4vE4j8cjdPYB/+k//QOW2w5hQSghPgAAAABJRU5ErkJggg==',
"prec" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABHElEQVR4nK3UseqCUBTH8dNFiEDqEdwSwbVVpGdwdBZssa2ncHVz7hVco8VRqKXBRpsqxwj02/CnP/SnP1T2W++9H845l3t7ANIxqisgIqJ1OQzI5XLpVkkYhlKWpQgf5Hq9MpvN0DSN/X7P20ie59i2zXA4JMsygNeQpmnIsgzP81BK4TgOu93ud/0p0jQN2+2WNE0JggDDMBARJpMJy+WStm0f9j9F1us1IoKI0O/3iaKIoij+rfQpcjgcWCwWuK6LruuICJZlEccxdV2/hvxtbbVa4fs+g8GA0WhEkiQPLb11O+fzmfl8jlKK6XTK6XR6H7knz3PG4zGmaXI8Hj9D4Gdupmmy2WzoweevuKoqUUpJJ+Ser3wFX0FuThdpF8xtNaMAAAAASUVORK5CYII=',
"nsubseteq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABSElEQVR4nJ2SsY4BYRSFj7UyzYhEKdHMIyCKaSR6lVLBSyg8hPdQEoWHEBIVClFNFMM0kykmM5lviw3WMnY5yW3+e7/8N+eeDIDe0Mc70EtgGIavg57nqVQqabfbXd4+Hw36vq/D4aAkSSRJo9FIpmkqiiJtNhtZliXxQ67r0m63yWazSEqt9XrNBYyiiEqlgm3bLBYL4jgGYDqdUiwWCYLg5x9XcDweY5omx+PxZqDZbDIYDPitCzgcDqlWqzfN1WpFLpfDcZx0cDKZkM/nOZ1Ol2av16PT6dxBN2Acx9RqNWzbZrlc4jgOhmEwn8+fgwCe59HtdjEM409XM3Cf1TAMVS6X1e/31Wq17u5sWdY1AIC2260kab/fy3Vd1ev19Did1/R9/+l6qQE4KwgCCoUCs9nsoSkPzYHv2zUaDZIkeQo+NOc/+gJbbOEj9wTVYAAAAABJRU5ErkJggg==',
"notin" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAAUCAYAAABSx2cSAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABnUlEQVR4nJ2TscrqQBCFx/WKC1ooWEQLC8Gks7O1Ep9AUoivYGNn4SuIjbUKsU+RxkdQsBAMsbWJaIQUgkGFPbe5xj9shPt7YJphvt2ZM7sJAKAvxb4Ffw3f7/fv4M1mQ4qi0PF4/D28WCyoVCpRsVh8JxGj1WqFTqeDcrkMxhiISIogCCDBw+EQjDG0221YlgXbtjEajcAYw3q9huM4cBwHQogoPJlMkEgkMJvNIgd2u100Gg2pwxC+Xq/IZrPo9XqRgsfjgVwuh/F4/Bmez+fgnONyuUQKlssliAiHw0GC/7yM2+12pKoqeZ5HnueFhhqGQaqq0u12o/1+H+Y1TXu73e/3Y139FEEQINxztVqlSqVC/0YhAGQYBqXTafJ9P5IHQJzz982n0wmpVAqmaYYztVot6LouzSoZBgCDwQCFQgG2bcN1XSSTSViW9X/w8/mEruvIZDJoNpvI5/M4n8/wfV8KCX5pOp1+fJY/DQtX9VOappEQgrbbLSmKQkIIqYZzTrGwaZpUr9epVqvF/rBQcW0LIeC67kejXvoL99tAS0ZZWBoAAAAASUVORK5CYII=',
"bigtriangleup" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABFElEQVR4nL3TIavCYBTG8XcX3i+jDCZosJhMY8lmkwWxmdYEg59htiXBMNZMCwOT0bQiiFgEw8LiGNv7v+1eZJuKcO/Tzjn84IRzNADxQb4+QX8DlVJitVo1Sxqy3W6RUnI+n2vntVApRafTwXVdbNt+HwZBwHQ6RSlFt9vler2+B3u9HpfLBQDf95nNZq/hbrdjMpn81GVZYhgGt9vtOez3+5xOp4feZrNhPp83wzAMGY/HlbWKokDXde73ez0cDAbEcVyBAJ7n4ThOFe73e0ajUS0CyPOcdrtNkiSPcDgccjweGyHAer1msVj8wsPhgGVZTxFAlmW0Wi3SNEUDME1TRFEkpJQvjzvLMrFcLoUG//yP30jtQiXrzooLAAAAAElFTkSuQmCC',
"upsilon" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABAUlEQVR4nNXSMYqDUBQF0JvBfEEsxMLGwiagKeIubHUntpIynQSs/hLcgltInZBU6bQVsRICMXJTDCPzsUk1MLe878B7xVuRJD7M16fwj/A4jtB1HVmWzcO+72EYBvI8V/H9fsfz+UQYhjO2bRtRFKGqKhXfbjcAwG63U1Z7noemaZZY0zQEQaDgYRgghFhi3/fnwU/O5zO2262Kr9fr4oS6rnG5XBDH8XdBko/HgwB4OBz4O2ma0rIsdl1HkgRJtm1LACyKYoan04nr9ZpSyrkDSU7TRMdxuNlsKKXkfr+naZpMkoSv10vFJFmWJV3XpRCCvu/zeDxyHEflrNU//Lo3c/u5ynt8iGcAAAAASUVORK5CYII=',
"cap" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAxElEQVR4nN2SLQ6EQBSDOysGgiCTSbAgCHAALBaBw3EWToDjUIzGcAYECDQJIXTd/mTUqt1sZdMvec2rIEl8oNsn4S8B0zShqir4vg/P81AUBYZheAb4onmeqZRimqbsuo593zPPc0opOY4jSfINaNuWWmtu2/bw9n1nkiRsmoYk+XaSMQZlWUJr/fBc10Vd1zDG2B3WdUUYhlbRKIqwLIsNHMcBKaUFOI6D67pwnufPPy6OYwRBYIWUUsiyDEIIiD9Y6x1EFG3wK0OM6gAAAABJRU5ErkJggg==',
"mu" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABF0lEQVR4nLXTscqCUBwF8JMtgrS43MXJiw6R9Qji0OYLBG1NPo3Yu7RJc0tQGa06CIGK0507TV8ht6GG74yX8+P/vxfuiCTxQ4xfyhpwXRfr9VorRVGEMAyHQCmFqqqwWCw0cLlcMJ/Ph+B6vYKkBuq6Rt/3nwEADZzPZwDQQVEUEEJACKGtYxgGZrOZPuHT/qfTCa7rwrIsfYLv+4Py4/HAfr9/rfMCTdOgbVvc7/cB2G636LoOQRC8D0kyz3MC4GQyYZIkzLKMq9WKtm0TAOM45uFwIEmCJNM05Xg85m63o5SSpmlyuVyyKApKKek4Do/H4xtsNht6nsdvYvxdeDqdai/0KQZJ3G6370FZllBKfQ1G//4fniIvusI9WYoSAAAAAElFTkSuQmCC',
"mp" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAoElEQVR4nM2SsQ3DIBBFvyM3DEXFEpbceQivAPNQumEMrqbwBrg4ikvjxLKCIseRozwJCf3PF9xxjYgITnA7E/oq2D428zzDe38o1HUdICshBAFwaMUYpbmkOcMwYBzHqtdW1ZWUEpj58xvf8ayRiOCc25nTNEEpBa31TrfWbk9dlgVEtDuQc0Yp5UVn5u07ahhjpO/7qvf7kbtmAP4reAdTloO6drjPWQAAAABJRU5ErkJggg==',
"tau" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAwklEQVR4nN2SMYqEQBBF32xvIEYmZmYmHQhGggfzBF6iI0HwSp2IiYFJZwaGwp9gd9kZdMBJNtgPFf16VNWnbpLEG/p4p/lvAPQt55yAlxXHsfZ91+cPWFUVwzAAME0TbdvSNA1lWQKQJAnGmN8Jj+r7XoDGcTx4pzd474miiDzPrx3tvcda+7XCVaAoitOQDsC2bSzLgrX2GhBCACBN01PgkNK6rjLGqK5rdV2nEMKTfxqrc05ZlgnQPM9P3u0ffOsdWMi2Wn9QS9wAAAAASUVORK5CYII=',
"in" : b'iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABGUlEQVR4nL2UPaqDQBhFr1EJCPZ2oiDoKlxGwM4t2IulvV3ADdgEXIalhRbuwIAmvT83zXvFQ41CwjtwqxnOMN9lRiBJfIHTNySHREVRwPM86LoOURQhCMIi4zhCeicJwxBxHONyueB6vcI0TZxOy7MlSQK4QZIkFEWRWZZtbfnDquj5fFJRFAZBcEiyKUrTlLIss23bw6LVGVVVBcuy0Pc9+r7fbcy27fVhT9OEuq7hOM6uBACGYViv37ZtGIaBn6vvZrO1+/1OWZaZ5/lnwybJKIqoaRqbpvlMNI4jfd+nqqqMoohlWbLrOj4ej0Xein653W50XZfn85kAVjMMAwXy2Ouf5xld12GapsWapmk4LNrj/76Ro7wAaOQSAMwsRasAAAAASUVORK5CYII=',
"eqsim" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAzElEQVR4nO2SPaqDUBCFT6JYWojFFewFO0u34ELch1sQrO46xFJs3MJt1d7Sn2rOa14MSRoJpAjkwJTfmW9gLiSJN3J9B/qBnwLB/7RtSwCnxhhD+1YQRRG01qeWBUGAy/PniAiGYYDruvB9/wValgUiclcVEVZVRaXUoZQkCcuy5DiOXNeVdV0zjmMaY3iAXdfR8zwWRcGmaai1ZpZltG37KLIsi3mec9s2HqrTNMFxHCilHtTmeUbf99j3HWmaIgxDAHi98Wy+6HP+AKaoieoD42isAAAAAElFTkSuQmCC',
"gnsim" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABkUlEQVR4nK2TT6sBURjGn6MZC1GzQVna2SGSDTtbZYEVK/kCtpO9raVmY8fKN5hR/kyaD2Ah2WiUKTZKmJ67ublXqJvub3c659d5n/e8R5AkPsDzifQ/4mq1gqZpsG37bya/mc/n9Hg8FEIwmUxSVVWapknXdfkK/F44jsN+v89KpUJFUQiAwWCQtVqNg8GAh8Phtfib6/VKwzDYarUYi8UIgJIkMZ/Pc7fbUXoXQZIkZLNZ3G43uK4Lx3Gw3+8xm81wOp3wdKNt29Q0jaVSiYFAgAAYCoVYr9c5HA55PB4fS10ul0ylUhRCUAjBRCJBVVVpGMbLBt1F0zRZLBbZ6/W43W7vB+LxODudzpMoyMeR03Udi8UCfr8fsiyj2WxiPB4jl8sBACaTCaLR6E9G27aZyWQohGA4HKbX6yUAyrLMdrvNbrfLcrlMSZK4Xq9/StV1ndVqlZvNhiRpWRYBMJ1OU1EU+nw+FgoFTqfTx4zn8/khQ6PRYCQS4eVyefnObwfAsiyORqN328/N+Ssff6sv2qzhJJ4AUxcAAAAASUVORK5CYII=',
"triangleq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA5klEQVR4nN2SMQ5EUBCG/10rUVIoXqHRqLiCSrSOoNG5kYjCETQShdA4ghMoRIHoiMxWu8nGvpAt90+meX/m/d9M5kZEBI6yLIMkSXAc52gSR/u+k67rZFnWV//OS8vzHKZpQpZlNE1z8G88VM/z4Ps+xnFEXddIkuQctes6YozRuq60LAupqkrTNJ2jxnEMURQRBAHCMIQgCEjT9By1KAr0ff/xpmkabNs+opZlSQAuVdu29Hh9YBgGoij6Rn4QY4y/1TO9E4dhQFVVl5pc1/19xjfqtm2Y5/lSoqIov8/IvdU/anwCGpLZodITjZ0AAAAASUVORK5CYII=',
"sqsubseteq" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAeElEQVR4nNVTsQ3AIAxzqn7Akgu4iYP4gQu4A76AjVPcA4ooVYvUWvIUyXHiREgSD7E9FVgrknOGiEyx1op91MF7D2PM0IWqAuwgpUQAbK31yid8fLH/FRlGHGO8jNg5N454hqUUyrIHfOXsrbUIIUy5UFWsG+cuDtcPgeEONMlSAAAAAElFTkSuQmCC',
"mapsfrom" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAzElEQVR4nO2SMQ5EQBSG/1lzE8dRaDRKUei0Go1Co3AFMg7gAC4i4QRKHRH/NpZk7SRstcV+ySTziu/9My9PkCS+5PGt+Jc3oihCGIZaoSxLCCHOchzHyLIMpmleSpavS5IkSNMUQRDAsiz0ff9RGIbhKEiybVsCuHVIUpDkuq7wPA9KKfi+D8dxtE9tmgZ5noPk1oLksix0XZdSStZ1TR1FUezJ+8AMw4BSCrZto6qqSwPDe+d5njlNkzZ5HEd2XXf8+VrMmR9azzs8AWr8tqysWYxEAAAAAElFTkSuQmCC',
"sim" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAqklEQVR4nO3SIQqEQBjF8W+WHYPYDDaz2TrN4AkEwbt4Cu/hFQzCFI9gmjoXGLD8zQvDsotFln31wS+871MAcjGPq8AfuTvyfFcuyyLbtkmWZdI0jVRV9dJba6UsSxEi8d5jjEEpRVEUaK0REeq6ZhxHpmmi73u01uz7ThRZ15VhGHDOARBCYJ5nuq4jz3PSNKVtW6y1AKjY2x/HIUmSfLxJFPk29znxjyEno4h4C/8xsX0AAAAASUVORK5CYII=',
"nequiv" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABAElEQVR4nLWTMYqDQBiFX9Y9hGIZEDE3EMw1vIjpBI9hYaF9DiGSzs7GgNWAjZXYjYX6ttloTLJLEnYf/DC84fF//P/MhiTxhj7eCb0UvAV7KljXNXa7HYqimL3Py6HvezRN8zAYBAGEECAJIQR0XQf4rTRNCeCpOp/P3Fym2rYt8jy/63Y4HNB1HaIomj3HcZaO4zhSSrmq0+lEAAzDcOVP08S3UefhmKaJOI5nnCzLkCQJfN/Hdrtd4WuatqBeaxgGWpZF27YfXZPkH6AahoEwDCGlhOd52O/3cF334V5VVb1HPR6PVBSFZVn+iLlCvVZVVb+GSC4P4FX9/7e61ReXPVs/l7K/1gAAAABJRU5ErkJggg==',
"succ" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABKklEQVR4nLWUMYrCQBRAf5axUAKililsbMUm0bvYJo03COQIniBNSO8ZxNJCCAYLKwULwSaVYJXkbbWwixOihn318Abe538DQBry1VRQKXk8Hs0lSZKI7/uvW9Cw3+8xDAPf98nzXPfkD1oJwGq1ot1uY9s2aZp+JgFI0xTHcVBKMZ/P2Ww2lGX5ngSgKAqiKGI8HiMijEYjFosFcRxzPB4py7Je8pvdbofneSilEBFEhMPhgHolfpZlEoahRFEkp9NJut2uOI4j0+lULMvST+eHPM9ZLpd0Oh1M08R1Xbbb7VOXSsntdmM2m9FqtQiCgPv9XvmZVnK9XhkOh0wmk9rxAvom5/NZ+v2+rNdr6fV6tc0MeN7iy+UipmnKYDB4pbte8i7/dwre5RvNYgAdky1DeAAAAABJRU5ErkJggg==',
"vdash" : b'iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAY0lEQVR4nGP8////fwYqACZqGILToPz8fIZFixZRbtDHjx8Zvn37RrlB5IDBZxALLoktW7YwvHjxgihDampqcBv08+dPhi9fvlDuouDgYIaMjAyiDRp8gT34DGIcGrl/QA0CAIzFH0lOuMaMAAAAAElFTkSuQmCC',
"Leftrightarrow" : b'iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAzklEQVR4nO2TPQqEMBCFx9gFNAQbD2HrGbTXW5pSG7Hyp1C08w622ti+rVyQqMuKzcJ+MM0beDPzSAwAoAdgT5j8jR4wKoqCsizTdKUUNU2zF3FCVVXgnCOOY60XhiGEEBiG4a0dGnVdB9u2QUSX5TgOxnE8NpqmCVJK+L6PdV3PFsayLPA8D67rYp5naBndfuhH09q2hWVZICKYpqkVY+zzaRtlWYJzjiiKtF4QBBBCoO/767A38jxHmqaaniQJ6rreaQZuh7Lnx77IN7wA2/9gSc9Y5pEAAAAASUVORK5CYII=',
"uparrow" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAApklEQVR4nO2SPQqDQBBGZ3Yb8Qhexit4AMEzWHkfC08g21ipzZ5iO0srsZSXypBAUAkkafLKj3nMD6MA8ibmaqFzTsZxfA65QF3XGGOIooiu6+75qdw0DdZaVBVVJY5j+r4HQI92bttWsiyTPM8lhCBJksg8z+K9l2EYjseepomqqti2jTRNKYqCdV0py5JlWc7H3tnlRy5f+xV/+Zvy4Yd9tPPv5Btq8OyT1thckQAAAABJRU5ErkJggg==',
"nsim" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA40lEQVR4nN2ToaqEUBiE/3O9ihwtJk0+g8VkN9kFX0F8BYvZ5AP4KAbhBJNgNFkM54Bdy2y7i+vuXdi4E+fng5mBnwEAfaCfT6BvA4/joHVdrwe8Udu2ME0TUsqT/xYMggBJklz838cEXdfRMAxk2zZxzmkcR6rr+u8uhCDf9+9RpZSIogiMMbiuC8MwQETQNA1lWaJpGqRpCl3XMc/zPWrf98iyDMuyAACmaQIRIQxDOI4DzjniOIYQ4txx3/dThzzP4Xnexf93nG3bYFkWqqp6OdpTUCmFoiiglHoJMuDrv+MG5xVhOUET7tYAAAAASUVORK5CYII=',
"Equiv" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAVklEQVR4nGP8////fwYyABM5mijSyAJjPH36lGH9+vVEaYqJiWFg+A8F+/fv/8/AwEAUvn79+n9GcgNnKDr12bNnDJs2bSJKU0RExKhT8QH65w6yNQIATQCOBMBooUwAAAAASUVORK5CYII=',
"approx" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABJUlEQVR4nO2SIYuDcBjGn50Khgn/LQ7r8AsMxppd/Awmv8PiVq1Gw6Ir5tWFyYomu0WDyTTUMdlzbXDMOzh2Bxfuie8DP/jxPiOSxIt5exXwD/lFiPxV2fc98jzHeDzGbDZ76i+XC+73O8CB9H1Pz/M4nU4JgABoGAa32y3TNGVRFAzDkPP5nFmWcRByOp2o6zp93+f5fGYURXQch5qmPaCqqnK9XvN6vXI0tNiqqqCqKoQQH+5d1yFJErRti8ViASEEbrfbsA5J7vd7LpdLKopCIQRt2+Zut2NZlmzblsfjkaZpfq4TxzEnkwk3mw0PhwODIKBlWZRl+aEjSRJd12XTNMM6RVFAkqSnj9R1jTiO0XUdVqsVdF0HAAxCvpu/s9gfgbwDMij2BqtHap8AAAAASUVORK5CYII=',
"nsucc" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABcElEQVR4nJ3Tv8tBYRTA8eP6tRgotygZmCwWdTObLBb5H6zyB+iu9x+wyGRzSwz+ApMyiEx0y4BBWZQfpef7Li9veL16nfF0Ps9zztN5XADyQWifoDt4PB5fFnU6HZnNZvdJvmMwGGBZFo9xPp+JRqPU6/W7/A2Ox2M0TaNWq6GUuhU0m03C4TCHw+F3CNDtdgkEAuRyORaLBUopUqkUpmk+dSKPiclkgmEYeL1e8vk8fr+f7Xb7HgIopWi1Wvh8PkSEZDJJpVLBtm3m8zlKqd8hwHA4RNM0bNumXC7j8XgQEUSE6XT6GpZKJYLBIOl0GhFB13WKxSKmabLb7Z7h5XLBsizcbjehUIhqtcpoNLp76acZ1+s1hmEgImSzWfb7/auGfuBqtSIejxOLxRARer3eSwTguW6Q4ziSSCQkk8lIv9+XQqHw97JeT1gul2w2G3Rdp9Fo/Hnb04ztdptIJMLpdPofBHAc5y0CcMFnH/kLqv91ySzdZ1QAAAAASUVORK5CYII=',
"equiv" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAjUlEQVR4nN2SsQ1DIQxEjygSK4DoEUswJyWj8GsWgBGoqBEFzgIuHP2kSE66xsXTnW1FRISbetwF/CHkyQ3XWhhjiADOOYAYlVIIgMitNVLcieecqLWKksQYwULOOdh7iyBa68/UYRcbQkDOWZTEWsvXeVfsn1zXBaWUyL13/k+890gpiVIYY75Y53chL6X2eSS/KBJFAAAAAElFTkSuQmCC',
"bigcup" : b'iVBORw0KGgoAAAANSUhEUgAAABMAAAAZCAYAAADTyxWqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABNElEQVR4nO3VIYsCQRjG8b/uFjGIFouggmm7fYNg325W/AR+GGHBbjAIVkHEjX4HUdCw2gTdeS4crrfcebiH13xgYMI8P+YNw2QkiRcl+yoogY1GI2zbptvtpgLm8zm2bdNut++YMYYoioiiKBUmKe79z5hv7I29sZdh2eznNu1Dv16vcT/GisUiAIfDIRV2O18qle5YrVYDIAgCjDFPY8vlEoB6vQ76kmq1KkC+7+uZ7Pd7FQoFAVosFkpgw+FQgPL5vGaz2a/QdrtVs9kUoFarJUlJzBijXq8nQIA8z9NkMtFut9PlctHpdNJqtdJgMIhv5DiONpvNd+wW3/dVLpdj9KdlWZb6/b6Ox2Pcyzz66s7nM+PxmOl0ynq9JgxDcrkcjUYD13XpdDpUKpVE5yH2l3wASsQlkjaMq6oAAAAASUVORK5CYII=',
"iiint" : b'iVBORw0KGgoAAAANSUhEUgAAABkAAAAbCAYAAACJISRoAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAACiUlEQVR4nN2WPUsjURSGn8mkGKO5yailIrFxQESwipUiWgg2CmLtTxBEUcQ/YGdjIYI2FtYpgpV2JiLYWCoiioWSGIz4NeTdYklY10w2QtyFPeV7OfOce17mnGtJEt8coe8G/BGSzWZJJpO4rsvc3BzlSz88PDA7O0s8Hmd4eJirq6tKzsbGBp2dnXR1dZFKpX6KCoi7uzsZYwQoHo8L0ObmpiRpampKgFzXFaDR0VFJ0t7engA5jiPHcRSNRnV7e6tAyM7OjgBNT08rl8vJcRyNjIzo6elJ4XBYzc3NKhQKmpiYkGVZur+/1+TkpADt7u5qe3tbgLa2thQOatXl5SUAg4ODuK5LOp0mFotxfX2N7/sMDAxgjGFtbY2FhQWampoqOclkktbWVvb39+nt7SUQUigUAHBdF4ChoSEAjo+PP+ie5+F53qecWCzG2NhYbeOLxSIA0Wi0Lr3WWSDk8fERgJaWlrr08pnjONi2XR+kXNXvHwvSS6USz8/PVeENgwTpdUHq9aSWVw3zpJZX/75doVCISCTyvZBqCQ3z5OXlBd/3A/+FahV/2ZNaV29Yu/4q5Cvz6cue/Gk+VTury5Pz83PS6TSlUol8Pg+AMYZcLsfBwQE3NzcA5PN5bNsmEolwdHRUGf2/5nyK8iacn58XoEwmo9XVVQFaXl7W4eGhAC0uLurs7EyAuru7JUkdHR1KJBJ6e3tTf3+/AGWz2U9btgLJZDKyLEvGGNm2Ldu2dXp6qtfXVyUSCdm2Xdn5KysrHwor7/qenh75vh8MkaT19XW1t7fL8zylUqmKfnJyor6+PrW1tWlpaUnv7++SpGKxqJmZGRljND4+rouLi6rvBUv6Tx53PwCJeyelHNxfKQAAAABJRU5ErkJggg==',
"bigwedge" : b'iVBORw0KGgoAAAANSUhEUgAAABUAAAAaCAYAAABYQRdDAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAACPklEQVR4nK3VPyj0cRzA8bdzpFh+DJiUXCYpG4NB6likDFIGlxGb2JXBIoPNn1uZGGzKIgNRJl0ZCKVOMVBOp9/7mZ57up577nf3PM9n+35/v8/r+/f3+9So8p8jXslLFxcXZLNZamtrGR0djU4wIj4/Pw2CQEDAs7OzqBRjUYMeHBzw9vZWaO/u7v77TIeHhwUcGhoSsKmpyff397I5ZdH7+3tjsZiAt7e3JhIJAXd2dv5++el0mjAMGRwcpKuri5mZmcq24E+jhWFoR0eHgOl0WtWnp6fCzDOZTPXLPz4+Luzhx8dHoX9kZETApaWl6tGpqSkBU6lUUf/+/r6AbW1t5vP5ytHX11cbGhoEPD09LXqWy+Vsbm4W8PDwsHJ0c3NTwEQiUTJpfn5ewLGxscrRvr4+AVdXV0smXV1dCRiPx31+fo5Gr6+vBYzFYj4+PpZEVXt7ewVcW1uLRhcWFgRMJpN/BFU3NjYE7O7uLo9+fX3Z0tIi4N7eXln05eXF+vr6kodZhP68LkEQmMvlyqKqExMTJa9dEZpMJgWcm5uLBFWPjo4EbGxsLPrJFNCHh4fCJ3h5eVkR+v39bXt7u4Db29u/oysrKwL29PRUBP6M5eVlAfv7+4vRMAzt7OwUcH19vSo0k8kUqsLNzc0v9OTkRMC6ujqz2WxVqOrAwICAi4uLv9Dp6WkBx8fHqwZVt7a2BGxtbTWfzxtXCYKA2dlZUqlUdP0pEZOTk5yfn6Nyd3dHjf7/uh9ZTf8mfgDxpGMAxuwmFwAAAABJRU5ErkJggg==',
"subset" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAvElEQVR4nO2TMQqDQBBFx2yUrSwsBWvP4VksbT2A9/ACtlbbeRoFG2uFFV/6sGsMdiEfppqZx8BjAgC5mcddwA9Cnp8G1nWVaZpk33dnP8syETyx1lLXNVprRMRbxhi8kKqqSNMUYwzbtvnGANyQcRxRSjEMw+nyKaTve+I4vgQAcNoJw1CstXIcxzU9LvKyLGit6bru0iVOxUmSSNM0UpalzPMsRVFIFEXfKwZo25Y8z1FKnSoO4P/Fb3kBnLdvJrJ/Yq4AAAAASUVORK5CYII=',
"leqq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABLklEQVR4nL2TMYqDYBCFX5YFEXOAoKCNWHuONOk9gGDhPXIBsbD2AIJCwMJWUkVSWATExkCEdGLSyNtiwd0NIcm6sB9MN2/ePOb/ZySJCbxNEf2P8Hw+IwxDWJaFuq7x/qi5KAokSYIkSZDnOUjCNE0IggDwG13XMYoi2rZNRVEIgJIkcbVaMQgCNk0z9o7C7XZLQRAIgLIs03VdbjYbXq9X3mPMOJ/Poes6AKBtWxRFgd1uh8PhcD/H7aS6rul5HpfLJUVRJACqqkrHcRjHMfu+/7nqPfq+ZxzHdByHmqYRAEVRZFVVj4W37Pd7rtdrHo9Hjuc4nU5I0/TpPRVFgSRJXxmzLCOAl6osS87Iz0c+DAMul8tTRwB/cxwzGoYB3/dfclwsFhhX/S2Tv9UHaHJKhleh9E4AAAAASUVORK5CYII=',
"mapsup" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAyklEQVR4nNVRMQqDQBCcC+fpi3yDoFb+ROwt/ISP0EZsREUfcK+wFmwsxGbShUSNREiKDGwzy7A7M4IkcQG3s2Vd1+i67pXkG+R5TikllVIsy/LBHwqKoqBhGBRCUAhB0zRZVRVJUmw99H0Px3Hg+z7meYZSCiTRNA3att2/NI4joyjiuq50XZdBEHBZFoZhyGma9hee4XkeLMtClmWfpXQ51j8RyC2htYbWGgAwDAOklEjTFABg2/a+hziOCeBwkiQ57+ErHn4vuAMYiLzl1kJk6gAAAABJRU5ErkJggg==',
"nless" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABQUlEQVR4nM3ToYoCURTG8eNVYTAodjHMRAWjgmASDIJJsEwQYXwEy4D4HILNZxAslpusKgYnGiwKyoQJKn/TzgZH1pUN+7V7zv3dwwk3BiAfRH2CfgVXq5WcTqfvAm+mVCrhum54fmvifD6X7XYrhUJBut2ueJ7380TP86hUKogIIoJpmuz3eyLh+XxmPB5TrVYREZRS9Pt9tNbhnRDebjdmsxmdTgfDMEgmk7RaLfL5PO12++nxEGqtERHi8TjD4ZDj8chut0MpxXK5fA0PhwO2bZNKpUgkEjSbTRqNBrVaLXL3px1932cymVAulxER0uk0vV6PxWLB/X5/Db/iui7FYpHRaIRlWYgIuVyOwWDA5XKJhr7vk81mmU6nYU1rjeM4ZDIZ1ut1NNxsNtTrda7X61MvCAKCICAG//V3/Bl8APwQ1Zi9CHltAAAAAElFTkSuQmCC',
"napprox" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABTUlEQVR4nM2SL6vCcBSGj1fFJZmzWg12QbC4T2E1mX5fwGi2ifgZnGJYsxomJi0Ws/MfNpGpY8JjuhvjXrkgCPfEF57De973JADkjfl6B/o82O/3Zb/fx0X+mOVyiYhgWVZM/wEGQcB6veZwOACglMIwDO73OwCXy4Xz+RyBj8eDTqeDYRiICCJCqVQim81Sr9dxXZfBYECxWGS1WkWg4zgUCgV6vR7z+ZzxeEy1Wg2XiAiaptFqtfB9n8R3j8fjUTRNE13Xw/tN0xTP86Tb7YrneVIul0XXdQmCIB6OZVlUKhXS6XRoudFosN1uud1uTKdTTNOMW53NZuRyOdrtNpPJhFqtRiaTIZVKhVaTySTNZpPr9RqBm82G3W4HgO/75PN5lFKcTids22Y0GuG67us6AIbDISLCYrF42e+voOM4KKVeQkCU6kd+9X+AT5idpfMm9RIAAAAAAElFTkSuQmCC',
"ast" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABHUlEQVR4nNWSvYrCQBSFT4YFGYw2gQQLIU8QiC+QIqS1lUBkWgtLX8EU+gDTxN63CKTLGwQhnZBS6xQ5W4iixC1c2GK/bs7lm5871yBJfIj4VPgbabvdQmv9mZTnOcqy7OVfz4uyLCGlhOd5bzcpigKO47yetNvtMJvNsF6vcblcHvn5fEYcxwiC4HZdPtG2Lff7PcfjMS3L4mQyoeu6HA6HtG2bWZax6zq+SHeapqHv+wRAAIyiiNfr9VHvSXVdcz6fEwCFEBRC0DAMKqXYNE1fStOUg8GA0+mUx+ORYRhyuVxSa03LsjgajXg4HPjSCCklNpsNqqrCYrG4/YkQWK1WOJ1OSJIEpmni7ZvuhGFIpVQv/9UYGf94yn/iG4iB6EfblNusAAAAAElFTkSuQmCC',
"Sigma" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA8UlEQVR4nMWSsYmFYBCEx6cFGBiIYCSiBjbwg1VYgakFmBnYgC0o9iAYGhhZgSWIiIkYGM0Ljncep8+7i25gYdn9GHZgJZLEL/V4NWVZQpKkt9W2LZQX7LouZFmGZVlI0/Tk6nkewC/K85wAmOc5r4TvgyiKKMsym6b5Gd73nUIIqqrKYRjuYZIcx5GmadK2bS7L8jl/nJIA0DQNhmFgmias63osrpyzLCMAVlV1f0bf91QUhWEY3gfcto2O41DXdc7zfA/HcUwArOv66jpK5MdvdF2HIAjg+z6SJDmFFkIcAYuiIIC3VRTF4fynr/tf+AkXKmVF6XFozgAAAABJRU5ErkJggg==',
"ntrianglelefteq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAAUCAYAAAC9BQwsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABhklEQVR4nJ2SsatBYRjGn+84kkUyyGyWkZLBIP+AM9lkZ7IYrecfMCsZDEoGpZNELCdKYSKDlMVIiOcON8d1j+Nyn/qWr37f+76/9xMkiX9E+g/0EXg+n1EsFrHdbr8v+GZqtRoBcDqdkiTFuzMmEgns93u0Wi3YbLb3Ki6XSwohGAgE6HK5OJ/P+RK8XC5sNpuMRCIEQFmWCcAa3O12VFWVfr+fAAiAqVSK7Xb7OTgej5nJZOh0OinLMhVFYTabNaQMh0Mz2O/3CYB2u52FQoHr9ZokGY/HGY1GSfIBlG/WfD4fgsEgJpMJqtUq3G43YrEYNE1DuVw2a/49X7fbpaIohgghBHu9nqmipdXVakWHw2E8EA6Hmc/nDdDyy+m6juPxCF3XUalUIEkSVFW1bvWWn1JuGY1GTKfTXCwWdzmbzQaNRgMAcDgcoGkakskkSqXSQyehUAgej+desdPpGMv+6zyVczqd6PV6mcvlrKYgSTNYr9cJgLPZ7DPwer1yMBi8hEjyCycjbVYaqeaaAAAAAElFTkSuQmCC',
"nexists" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABGUlEQVR4nK1SMYqDUBScv0Q8QRrBJjcwfQoLqyBewNYqIJ7ANmBjYaHgMfIDwcbOG2hhIVjY2ViKyNtm/btukl2y7MAr/nvDvDfDZ0REeIK2bTHPM3a7HQBgswyqqkJRFCvy+XyGqqqwbRuHwwGgD0RRRACeVpqm9LaonE4nTNMkKggCbLdbZFkmNokzGGPYbMQTl8sFpmlCkiTRE8pf0fc9iqKAZVmr/kMy5xyyLMMwjPXgFYPiSF3XEccxxnGE53lwHAf7/R51XSMMw7XygtvtRowx6rqOiIjyPL+PbsH1eoWmaVAU5c7LQ/LxeHzk+zPnsizBOUfTNBiGAUmSAADquv5bGiuDruuS7/vfPQuwn77orwb/jfwOJYPa3Go0NYIAAAAASUVORK5CYII=',
"times" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABKUlEQVR4nNXSP6uCYBTH8dN1kEAoGoSWIieHWpqa7A1Er8CX41toa2/KVyAuLk2p4CQ0CW4VQX8Gwe/d4npNKLjL/Y3nPB84nPO0AOTDfH0K/gadz2dxXbfx8WazkdvtJsKPOI6Doii4rsvvrNdrRITVakUFFUXBcrlEVVU8z3vWt9stiqJg2zZlWVYRwOPxYD6fo2kau90Oz/NQVZXFYkFRFAB1BHC5XJhOp/R6PTRNw7Is7vf7s/8SAfi+j4ggIuz3+0rvJTocDvT7fUzTZDgcMhqNyPO8GeV5jmEYDAYDsiwjTVN0XWc8HnM8HuvodDoxmUzQdZ00TZ/1MAzpdDrMZjOu1yu1O3W7XaIoqo0cBAHtdvv1nZIkadoNcRxTliUt+De//N18A6ketpazILOrAAAAAElFTkSuQmCC',
"measuredangle" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABOUlEQVR4nLWTsYrCQBRF7yxjCBhwLKwt/IJIuuQfbPMjkmAt2vsBaf2A2FjY2wbslWkCSgoLCYh6t1rdrNFkF/bCNO/dA3PfmxEkiT/qo47per1iNBohCAKcz+ffwbPZDNPpFIZhwDCMR4MV0lrTsiz2ej3meV7oVcKDwYAAuFwun3ov4ePxyPl8TgD0fb/U8xIOw5AA2Gq1mKZpqeflwC6XCwBAKYVGo1HqEeTznjebDWzbhuM4ME0TzWYTi8Ximf55ldvtRs/zKKVkkiTUWlMpxTiOqzNHUUQAHA6H99p4PKbruu/hLMvY6XTY7XZ5Op3u9f1+Tykld7tdAZbfI4RhiMPhgHa7jX6/XxyOEHBdF5ZlAQBWq9Uj83q9phCCAGqd7XZb/cK+NJlMCnMgydJV1VWtX/Uv8CeXzuhYd9mKYgAAAABJRU5ErkJggg==',
"adots" : b'iVBORw0KGgoAAAANSUhEUgAAABAAAAATCAYAAACZZ43PAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAbUlEQVR4nO2SMQrEMAwEJ0c6P9Kln+1G2KX9AWvTpjCExISD47aVdkC72iSJBX1WzAD7E5O7U0ohhAB6oFqrAMUYtXzC9vUQ3wf03jEzxhjzhavEU0oClHOezv8tnADujpnRWrtHmP33Hf1ACweJxdaTKMEQIAAAAABJRU5ErkJggg==',
"checkmark" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAxUlEQVR4nM3SvamEUBCG4e/YhApiC5ZgCWbmNmFqZi6IbZzAUGuwDRMDNRHkwLvZBdm9+wML9074wTPMMGMA9GF5n4J/iADVda0sy+Sck3ijqqpCEtZaAF6iYRgwxlCW5U/2FC3LQhAEpGmKc+49lOc5vu8zz/Mlv6B932nblvM8sdYiib7v75pdUNM0SKLrOqIooiiKhxNc0DRNSEIScRyzbdtrBJAkCZ7nMY7j40UBA9eHXddVx3EoDMNfj32HvvZGf4dugQKEDjjLJc0AAAAASUVORK5CYII=',
"lambda" : b'iVBORw0KGgoAAAANSUhEUgAAAAoAAAASCAYAAABit09LAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABG0lEQVR4nL3RParCQBSG4W8uIZZ2KUKSWhBcQBqxCjauRcQmVXbgAixE0MIlBCyt7CWCuAGLNEZIsHkt5Ppzje39ujnzwMw5R7ykLEssy6LZbJIkyesVej0URcF8PqfT6WCM4XQ61cPfLJdLJLFerx+1H9Wk3W5Lkvb7/aNWC6uqkiRlWfYs1j0dhiGS6Ha73/+4WCyQhOM4OI7zvWvXden3+4zHYySR5/knjOMY27Y5HA7MZjMksdls3uHxeKTRaBDHMQDb7RZJTKfTdzgYDPA8j8vlAsD5fEYSw+HwCdM0RRKr1eqtMd/3iaLoDq/XK61Wi16v9zGmKIoIguAOJ5MJlmWx2+0+4Gg0whhDURQYgLrt/E3tCv8H3gACgoLBGAR3hQAAAABJRU5ErkJggg==',
"xi" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAAWCAYAAAAW5GZjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABa0lEQVR4nJWToavCUBjFzx1PEEUQVERhybJgmk2LBosGB2NJi2DyrzDvXzAZjXbBIDYx2SbIjGJS5wzCecm9zc33fD/4uHDvgXu+890rSBIfIn0qDIl3ux2EEJE1n8/x5RcnEgmMRiOYpgkhBFqtFlRVRS6XQ7VaBehjv98zm82y3W7zdDrxlYB4MBhQlmW6rhsSkmTA83K5RKfTQTwe/7vB2+0Gx3Hex+G/pt/vU5IkDodDLhYL2rZNx3GiPV+vV2qaRgBeTSYT71w8J2hZFrrdLmzbhmEYUFUV+XwetVoN6XT6x8b9fmepVGKj0eD5fI5MwrMxm80IgOv1+q3Qi+5wOAAALpfLr29DkOR2u0WlUkEymUSv14OiKJBlGfV6HalUKhzdarWipmksFouMxWIEwHK5zMfjER2dn/F4TADcbDZBz1FkMpnAGprgk+l0ykKhwGazGY7uFV3XaRgGj8djYN+b4Cf86w9+A4rrqoyQTUsMAAAAAElFTkSuQmCC',
"varphi" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABd0lEQVR4nLWTvYrCcBDEJ3/iR9RCEW20ES0iAUmZXtJb5iFsrCwtLHwBQdDCVhC0kTQKvoCVCmInBCtBkERQEOaKw+SOszjhbtrdH+zOzkokiTck3ml+Cex2O9RqNcxmM3S7XWSzWeTzeUwmk88GftFyuaSiKNR1nYvFgkII1ut1lkolRiIROo5DH7her8zlclRVlZ7nsd1uMxqN8n6/czQaEQAHgwHl5yjj8RjH4xG2bSMej2O1WkHTNITDYei6DgA4n8/BDrZtI5lMwjRNAMB6vUalUgEAuK4LAEin0wGw3W5RLpchyzJc18XhcPCB/X4PADAMIwAulwsURQEAbDYbkPSB6XSKYrEITdMClwzDYCqV4u12Y6/XIwCeTifO53MKITgcDkkycKnf7xMATdNktVplLBZjo9FgKBSiZVm+9d/u0Gq1mMlkCICSJLFQKLDT6fDxeLwGnkokEmw2m69K/BENx3HgeR5UVf19lgD8HSD9+z98AO7VF+hr4MxDAAAAAElFTkSuQmCC',
"Delta" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABLklEQVR4nM3SMYrCUBSF4ZNJXsAitbgAwR0IdjYWAW0s7HQJ4g5EG1cgNoJNQFs7XYK4A8FaSBAh8KrAP8XADM5TRJhiDtzmXr5bHQ9Ab+bj0XI+n8vzPNXr9ceKB2k0GoRhiCROp5Nzd9D5fEYSk8kEYwzj8fg1mk6n+L7P5XIhjmOq1eprVKvVaDabAKxWKyRxOByeo+PxiCQWiwUAt9uNMAwZDofP0Wg0IggC0jT93nU6HcrlMkVRuKgoCiqVCq1W6+5rkiRIYrfbuWi/3yOJ5XJ5h/I8p1Qq0e/3XTQYDDDGcL1e+Z1ut0sURVhrf5C1liiKiOPYAQCbzQZJrNdrAAJJ2m63yvNckjSbzZzWWGslSUmSqNfrfdWo3W4j6eUYY8iyDA/+qOX/B30CQe/Q4uk1yxMAAAAASUVORK5CYII=',
"iota" : b'iVBORw0KGgoAAAANSUhEUgAAAAYAAAASCAYAAAB4i6/FAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAiElEQVR4nL3QsQ3DIAAEwIeOAVzQIiwkW0zDdgzBBiwBsjtcewKXfJooEbLLKF/+Na8XJImHyKfyBzDPM0III1zXheM44L0fYds29N7vUGsFgGdQSsFaO0IpBcuyQEo5wr7vWNd1nEsS53lCa/3dznemaaJzjjFGttb4gZQSjTEUQjDnTPGHd1+fSEkq89NjCwAAAABJRU5ErkJggg==',
"nleftarrow" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA9klEQVR4nO2Tr4qEUBTGv7ssCIJYJxh8FQ0iEyzCNLNREKwmsVrEYPMhfIDxPcQnMIl/kt+WHRlXw86kDfuDUz7OD+49515BkniTj3fFf/mbLMuQpumhMUkSFEWxD/lEnucEwCiKnmN2XUdJkhjH8S7f5LIsKYSg7/uc53lXt9uNl8uFfd9v2Sa3bUshBAH8ukjyEwA0TcP1ekVd1/A8D6ZpPq6EMAyh6zqCIDhO7HHsZVloWRZlWeb9fidJVlVFAGyahmfsBjZNEw3DoG3bJEnHcei67qlIkuLnxxjHEeu6QlEUrOuKYRigqurpng/yK/yh5/kKX8XLByepnazdAAAAAElFTkSuQmCC',
"supset" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAuElEQVR4nN2TOw6DMBBEh8hLgRCioOUGcEr7FLSmgp4zcBIOgDAFBUOVT+FEwqSI8iQ3o91XeOyIJHGR21XBH0qUL5znGdM0eRdEBGVZIo7jZ0gP1loCeHvSNKUxhvu+kyS9kk8459h1HfM8p9Y6THKnbVsmSULnHKPQx7YsC7IswziO4e1s2waSEJFwibUWRVGgqqrzFa/rimEYoLVG0zQQkfMVK6VY1zX7vn/MB1/sK7/zd74iOQA4+P/YQhPuvgAAAABJRU5ErkJggg==',
"triangleleft" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABLElEQVR4nKXTv6uCUBwF8OO7719xDQSXghACEZwaHNpcGlsdw8G5LUH6B5r8A4TApUUhEWxrampxcZBo8bzJ9wiTfrwzXvjce+7leyWSxAf5+gT9C36/C6Iowm63ex3GcQzXdSGEAEmAT7Lf7zmZTDidTlkUBYuioKZp7IVpmtIwDJqmycPh8Lvewk7VPM/hui7quobneRgOh4+7tzsdj0dalsXxeMw4jnur31VdrVYUQnC9Xj+7cveOYRhSURTO53Oez+fXIUk2TcPtdsvBYMDFYsHL5dIL7yZHkiTMZjNkWQZVVaHrOhzHQVmWnbd5OHJCCNi2jSzLIMsyNE3DcrlEVVV/h5DPf8ftdsNms0EQBBiNRjidTq/BNtfrFb7vI0mS92Cbpmk+gwDwA6WwavwCNxa4AAAAAElFTkSuQmCC',
"ntrianglerighteq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAAUCAYAAAC9BQwsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABkElEQVR4nJ2Tr4sCcRDF3/cUFUREcLNBsG22ictmwSIY7f4IbtokmAz+FWISNJhFi9i0yaoriEUQTBqWRdh3yT28vfW8e/AtA5+ZeTPzFSSJf+jjP9Db4P1+R7vdxvl8/gryDQ0GAwLger12Y+Lh8Xa7IRQKIRwOeyqqqgrbtjGfz70VZ7MZJUmirus8Ho9u5t1uRyEEe73eUxdPIAAGg0EGAgEWi0VOJhNqmsZEIkHLsl6Dq9WK3W6X6XSaAAiAiqLwer2+Bg+HA0nScRzquk4AFEIwFouxXq9zs9m8BklSVVXmcjmapslarUYhBIUQNE2Tvnvc7/eYTqcoFAro9/sYDocgiWw2i3g8Dt+KjUbDbTMSibBSqXC5XPp7bLValGWZAJhKpdjpdHi5XPhdHhAAJUkiAG63Ww/wkOsxGo2iWq3CMAzIsox8Po9MJuN7v+7JnU4njMdjWJYFTdNQKpWgKMqPULlc9g7nnWcYBp9+h23bTCaTbDabvt48wyHJ0WjkZvwT6DgOF4vFrxBJfgKjG2kENaJjQgAAAABJRU5ErkJggg==',
"Xi" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAhElEQVR4nNVRsQ0DIRAzUagRszAJEzEKbELHGAdTXOtUfD4iL5Hii1iydCdZls9nSBKbeMyhlAJjzCXHGDDTWUTQWrt0jTG+xT/F2MHzvKgqVHUROedgrQV4QkqJABbWWkmSH5lFBCKyOIcQ4L2/8cD7xEd1Ox88qss5f61tsvfOf2zjBamWZGYIWeyMAAAAAElFTkSuQmCC',
"preccurlyeq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABdUlEQVR4nJ3Tses5YRzA8Q/9Tl9iVLrFjk2MdpPBZvAnkM2V7q/QxWCnrqw2FmYp3WSRSxm4U045vH8Tpb7py7ue8fU8T8/TJwAgXxT8BomI/PsU+L4vvu9/duJut5NisSjr9fpv8HK5SKfTkUwmI5vNRuLxuAhvWi6XtFotVFUlHA6jaRrn8xmAJ/Q8j8lkQrvdplqtkkwmERFUVUXTNLbb7cumTzgejxGR50qn05imyfV6/fU2T7jf7+n1etTrdfL5PIqiICLkcjkMw+B0Ov0OV6sV3W6X+XzO9XrFdV1M06RcLhMKhUgkEhiGwf1+f4Wz2YxgMIiIEIlEKJVKDAYDPM/Dtm1qtRqKolAoFHAch5dXdV2X0WiErutks1lEhFgshq7rHI9HFosFqVQKy7J4+x2LxYJGo0E0GiUej9Pv93Ech8Ph8B4+sm2bSqVCIBCg2Wxyu93+Bh8Nh0N+fn6wLIsAfDZW0+lUksmkfAwffT2P/wEQaNjPl0VK3gAAAABJRU5ErkJggg==',
"nleftrightarrow" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABTUlEQVR4nN2SsYoiURBFTyt2oyIYmWnuV5gYCCYmgmEbiIiZkf9gYCCaPkHMxMTM2F8w8AtMDOwH+miUvhvsMsMMM8vORMMeqKg4VFG3PEnim6S+K/7PcpIkn/a899eeTqfEccx4PAag2+3i+z6lUolKpUKv1/t48mw2YzQaYa0F4H6/s9lsKJfLRFFEv99nuVy+CvrDYrEQoOFwKOecnHNarVYCdDwe5ZxTGIZKpVJar9eSJCTpdDrJ8zwB/1TpdFrn8/m3HMexGo2GAIVhKGOMJpOJAA0GAxljZIxRp9MRoHa7refzqZe1nXOq1+vK5/M6HA6az+fKZDK6XC6SpP1+ryAI1Gq19Hg8JElvru2co9lsksvliKKIYrHIbrcDoFarUSgU2G63+L7/cVS3240kSbDWYq2lWq0CcL1eyWazBEHwec5f4Qf/9t/4BXpC3lG1kWBWAAAAAElFTkSuQmCC',
"Phi" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABbUlEQVR4nM2TsYrqYBBGP5MIEhS0ssimUXwIQcVCEHwGOx9MG0GwsZCIlWhIoaYSC7HX0oCIpFDOLRbcddfd4nKL+zVT/HNgfs5MAkB/EeOnh16vp0QioTAMXzfwJefzmeFwSKvVQhKdTofxeEwcx099T6DneTiOgyRs236qpVKJ+Xz+HfR9H8uyKBQKLBYLut0uklgul3ieh+u6pFIpwjB8Bmu1GpZlsdvtAB7ger0GYLPZYJomjUbjA7xer5imSb1ef4zyFQSoVqtYlkUcxxiSFEWR7ve7HMf5VcHb25tut5tOp9O7jmw2K8MwdDwefwUPh4MMw1Aul3sHbdtWuVyW7/va7/cvoe12qyAIVKlUlEqlPjzOZjNM06RYLBIEweOPq9WK6XSK67okk0mCIPjucTQakc/nkUQ6nUYSmUwGSbiuy2Qyeb0AAFEU0e/3aTabSKLdbjMYDLhcLj9vzue80vE5CfjH1/H/gX8Ac0uYPoJS1i8AAAAASUVORK5CYII=',
"angle" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA6klEQVR4nM3TLY6EQBAF4AKGgAIJV0CA4QxwFQQKg8GSIHAcog/BATB9A4LGNsF1SOeNnN0MP8Mkm2wlrV5/SYlXGgDQl6N/8klKSWVZUlVVpJS6h5umobZtyXVdMgzjFeBixnGEZVkIwxDbtv3KLnGSJNA0DcMwvGWnmDEGIkKWZbv5IV6WBb7vw/M8CCHu4TzPQURgjB1utos559B1HWmaHsJdrJRCHMewbRvTNN3DXdeBiFDX9Sl8w/M8w3EcBEEAKeUlfvxsUlEUtK4rmaZJURSdto5z/mpY3/cgoo+fEAIa8MdX9f/wE3suG07f7LYJAAAAAElFTkSuQmCC',
"updownarrow" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA+UlEQVR4nM2TPYqDUBRGr6aRLMA+NikCQjaghZWbUJfymuwgVoLdq9yCtYW1qxAxhYgEDCdVwkwxKhkY5isP98Dl/hgA8mHMrYXX61W01t8hG6KUQkQwDIM8z998Vb5cLogIlmVhWRamaaK1Xpe11ogISil83yeKIpIkYbfbUVXVsjwMA1mWAeD7PnEc83g8SNOUeZ7X237lJX/N5mn/alUfybfb7Ue2KBdFIcfjUZqmebOyLOVwOEhd18tH0vc95/MZ27ZxHAfXddnv94RhyP1+X59213W4rouIICIEQcA0TcCGCwNo25bT6YTneYzj+OYG/MFX/S/5CUmYqQ52ZiT/AAAAAElFTkSuQmCC',
"beta" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAWCAYAAAD0OH0aAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABsklEQVR4nLWToevqcBTFjzpFQQyCQcbWZCo4DILRP0IMGhTBahCDyQWLyeyyYDCZ7AoGxeLcMFrMhoGiE+S88HAwffDeL7wTL/dc7ud879dHkviB/D9p/qOBJEajEVKpFEKhEERRhKZpcBfhh7rdLn0+H5vNJnVdZ7lcJgDOZjOSpMdwOp0YCATY7/fd2vP5ZDQaZafTIUl6VprP5yCJdrvt1gRBAABEIpFvhu12i3Q6jUQi4dYMw8D1eoWqqt8MmUyG1WrVw1Sr1RgOh3m5XLwMjuNQEAQOh0PebjduNhvW63UCoKZp7gDXsN/vCYCLxYKDwYAACICKorjTSVJ472qaJgBAVVXIsgxFUbDb7aDrOorFIg6Hw2/wt7PX6zEej38+CyeTCQFwuVx6YzVNE7lc7usUXq8XACCZTHpTkiSJiqLw8Xi40x3HYaFQYD6f9zLYto3z+QwAKJVKaDQauN/vmE6nOB6PWK1WnmPjer0mALZaLUqSxGAwSFmWWalUaBiGhwkkOR6PCYC2bX9Bf8oPAJZlQRRFxGKxL+hP+d8JZbPZvza7Bsuy/tngI//zn/4FHjGYWfjzhAEAAAAASUVORK5CYII=',
"rho" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABV0lEQVR4nLWTsYrCQBiEZxNhAwuKD2BlIWgRiY02eQdBSWFjJz6BTR4iBNJon9bOTkSwlmAKexuxFLEyOFccF1m9487ipv3n+2Hm3xUkiTdkvGP+EVitVmi1WlBKQSkFz/NwPp8/h3zSbDajYRgcDAaMooj9fp8AOBwOSZIasN/vWSgUGIahtsR1XVqWxdvtpgOe59FxHN7vdw3wfZ8AeDqdmGfIsgyLxQK9Xg9CCC3T9XqFEALFYvERervd4nK5oNlsvpSQJAls24ZlWQ8gSRIAgFJKMx+PR2w2G3S7Xb3W3W4HAFiv17k5yzKMx2OUSiWMRiO9Vtd1Wa/XKaXkZDJhEARst9s0TZPz+TwvIAfK5TJ93+d0OmWlUqGUkp1Oh8vlUmsMJHk4HAiAcRw/3/FFBgCkaQoAaDQa370UTcZXYNM0UavV/gakaYpqtQop5a+A+Pf/8AHmOBcp+F/y5AAAAABJRU5ErkJggg==',
"alpha" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABJ0lEQVR4nN2SIavCcBTFj0N0BpWBxWgwiKYlv4dgWJI18QMsDMQifgE/gEkQjMal5YEgZrNgGawYpr+X3l/HSybh3XjO/R0uh1sC0AdjfbL8JWC328l1XdVqNfV6PUVRJED9fl/L5VLibcIwRBKTyYT1ek2326XdbnM4HGg0GqRpigHiOEYSQRCYgP1+jyQGg4HRDTAajXAchyzLDJAkCZKwbZvr9foC8jynXq/jed77hQaYTqdGsyTpcrkoyzK5rlso4Ha7SZJms1mxpV+j1WoVgNVq9Ue3JKnZbEqSzuezMbbbreI4liTd7/dXCsDj8aDT6VCpVJjP5ywWC2zbZjwem5pPp1OxpePxyHA4pFqt4jgOYRjyfD7xfZ9yucxmswGg9A++9QfjJfMv/g9VggAAAABJRU5ErkJggg==',
"acwopencirclearrow" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABTklEQVR4nNWTr4pCQRTGv129KBoMBkGxGiwmi8UgCAaTQbD4Fl7wGQSDYNXbrBZBsPgOBn0EkwwI4vjnt2HxrsMuLLhpDwwMH+fH+c45M28AeiHeX4H+BEZ/SzidTppOp7rdbqFWKBQkfokgCJDknHa7jWP1cDgoCAKn4v1+D+/D4VCAZrOZW7Hb7ZLJZDgej6E2mUyQhO/7RCIRdrsdACFojMHzPMbjsWP1AVpryeVy9Ho9gC+r2+1Wl8tF1WrVsZrNZlWr1eR5niqVijabjaSndUSjnwO21jpgvV7XarWSJJ3P5zAvBIvFohKJhObz+Y9rMcZovV6rXC5/Cs/9+L5PPB5nsVg4fRpjaDabpFIp9vu9OxwAay2NRgNJtFotBoMB/X6ffD5PMplkuVyGud8ewPV6ZTQaUSqViMVipNNpOp1OuIZHvMF/+R0vgx8H3zipFN8zPQAAAABJRU5ErkJggg==',
"mid" : b'iVBORw0KGgoAAAANSUhEUgAAAAoAAAAUCAYAAAC07qxWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAN0lEQVR4nGP8////fwYiABM+yYaGBgYTExPCCok2cVThqELyFSooKDAYGxszMDAwMDBSJYUjAwC7pws0AarpmAAAAABJRU5ErkJggg==',
"nmid" : b'iVBORw0KGgoAAAANSUhEUgAAAAkAAAAUCAYAAABf2RdVAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAn0lEQVR4nMWSIQ6EMBREBwSY1ldWNUEXzT04TbkFkhugwKB6iMoeAls160hKCGw22d2RLy+TzM8vSBIPKc9gGAa0bXsvvdX0R2nf93tpWRYYY+C9B3iKc45VVVFKyWmaSJKZFEJg0zRUSjHGePBDGseRQggaY2itzdpLAEgpYZ5nrOuKvu+v19V1jW3b0HXdl+70A0lrDWttxoqPPvMqLwDHcfrnkg/XAAAAAElFTkSuQmCC',
"nsupset" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABTUlEQVR4nJ1TvarCMBg9KTWDIkUQX8BN6SQ4ufgCzoKP4OrmJojv4CaCS50akBZnhz6BfQJBRzGKP3DucLmFXm9auQcCyUlOvu87XyJIEv+AlXfg9XohjmNcr9f0BnOglKJlWTwejyk+N6Lv+2i326jVaine/pmcz2ccDoc3oVIK/X4fj8cDUsr3VJfLJQEYR7lc5mw2S1LNrHE8HrNer1NrzfV6zUqlwul0mi9stVocDofJerVasVgsUmttFp5OJwohqJRKuMvlQiEEoygyuxqGIaSU6Ha7CXe/30ESUkrzAwiCAJ1OB6VSKeEWiwWq1Sqazaa5HdvtFoPBAHEc43a7YbPZYDKZYD6fo1AofNYO27bpui49z8tux2g0YqPRyDL8b3N830ev1zOV/43fN+33ewLgbrfLjCjI9H98Pp/QWsNxHAghjAHfhJ/iC2xSszq4EW9wAAAAAElFTkSuQmCC',
"sigma" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABEklEQVR4nN2SscqBcRSHn1ehKMUlyCIWLkK9ZWBkMlhsJqvcgEFZlM3mEiwyKvfgApTBO0k9Nvy/bzJ99f3qLKffczq/04lU+UKpb8x/BKxWK5rNJrlcjiiKgiqXy+CHxuOxgK1Wy8Vi4WQyMZ1OC9hut51Op76Aw+Eg4Gg0+pzhbDYT8Hg8qr6BbrdrqVQySZIA2O/3Am42G1VTAI/Hg91uRxzH5PP5INP9fgegUCi8Q5/PZ5IkoV6v/7rK6XQCoFqtvoHb7QZAJpMJzCrb7ZZarUalUnk1vVwuAsZxHOw/n8+D/YPQnU5HwH6/73K5tNfrCTgcDoMhL+B6vToYDCwWi2azWRuNhuv12p+K/sG3PgE96PhRtSrEsQAAAABJRU5ErkJggg==',
"approxeq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABO0lEQVR4nM2Sva4BURRG95mfRkeDRDONRKellUyl4h3EG6hVajKJglqnpiQSHsFPM5VIRDszTsG6xcW4yS1QWcmp9l45387eCkA+wPhE+iLxeDxKGIb/Clrr3xo3rtcrg8EAx3EQEZRSlMtlut0uu92OKIqYTqcUi0XW6zUPcT6fk0wmabfbTCYThsMh1WoVy7IQEUQE0zRpNpucz2fUfR2+74tt25LL5f5EO51OslwuRWstpVIprvNEEAR0Oh0qlQr1ep3RaITW+rmFXq/HdruNox4OBwqFAkop0uk0tm0jImSzWVqtFp7n4bouhmHg+34szmYzGo0G+/0egCiKGI/H1Go1UqkUiUQC13VZrVYA8YyXy0VM03x/j4vFQpRSL73NZiPWXczn89Lv91/6LZPJyCPqu3zJkb/CD7H/7/WaVABEAAAAAElFTkSuQmCC',
"curlyeqsucc" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABfElEQVR4nJ2TvariUBRGdzRNiltIGjsFQYuAqWx8BVsL8wQigvoEPkAqfQDxAYRUdgoWwUbQzmDjD0KwUtTGHyRriplxroxy73V1p1h7n/PtfRQAeYPQO9KDeDwe5SfN7+JkMpFCoSCXy+V7Jn+Yz+fouk42m2U6nfIV8vmwWCxIp9Ooqkq1WmWz2XwtDodD2u02p9MJ27aJRCKEw2FyuRydTofD4fBcHI1GKIqCZVn4vs9ut8O2bUzTREQIhUKYpkmpVGK73T5etd/vE4/H0TSNYrHIeDwGwPM8Go0GlmWRSCSYzWaPIsD5fKbZbBKLxRARkskktVoNx3Hwff95OJ8JgoBer0elUrkXERF0XWe5XKK+GtNqtRLXdcV1XVmv16IoiqRSKTEMQzRNk/86ep5HPp9HURSi0Sjlcplut8t+v3+e6vV6pV6vo6oqmUwGx3G43W6vXvJPHAwGfHx80Gq1CILgpfAXBX5vtud5AohhGN9a1bv4U97+j78AIDfnHtR1BoAAAAAASUVORK5CYII=',
"Psi" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABGUlEQVR4nM3TMYrCQBTG8f8LYjektA1YiZ3kAHqEdOYWprG2tbbRShsPYZc+1mlyAbGM6SR8NmvCou5CttkHA8O878cw8MYkiQ7lPTdmxnQ6bRrn8xkz43A4NGer1QozI03TFna+sTM0M3577rPveV4LnXPcbrcfYVmWAPi+38LhcEhRFNR1/RHmeY6ZEQRBC2ezGVVVcTqd3qLr9UqapoRhiO/7oK8qikL9fl/j8VhVVSnLMgHa7/eSpPl8LkDH41GS1EBJ2mw2AhSGodbrtQAlSaIoigQojuMm+w1K0na7lXNOQLN6vZ4Wi4Xu9/tnKEllWWq32wnQcrnU5XJ5ybwdAOcck8kEgNFoxGAweMl0nhz78+/4//AB/XnVt7wfylgAAAAASUVORK5CYII=',
"yen" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABNElEQVR4nLWSO4oCQRRFb6sYtI9uOtFQaUzdjJEgNLgIQQzswMDAHYgYmbkOV2AiJhWYKX4yQYUzydiOyIDBzIFK6h2Ky63nAehDcpK02+1kZkrT9E243++q1+tqNpsS3/R6PYIg4Hg88pPZbIbneaxWKzL5cDgQBAH9fj8Tb7cbcRzTarUAnjLAYDDAzNjv9wBMp1Py+Tzr9fpdPp/PRFFEt9vler1Sq9VIkiSbZ3Kj0SAMQwqFAr7vMxwOkYTv+4RhyGg0esrb7RbnHJvNhnK5jCSSJME5h3OO0+lE7lFRqVSSmSmKIrXbbUlSp9ORmcnMVCwWn9VVq1Uk/XrSNMV7/OByudTlcpEkLRYLTSYTzedzVSoVSVIcx3pp48F4PEYSzrmX+yzzx7vxKVnmP3/5/+QvhiYfQMZSrfIAAAAASUVORK5CYII=',
"triangleright" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA+0lEQVR4nKXTMauCUBiAYW1q93+I2HAWXXR2EYSWbDqT+KdcwklB0Mm25oIgGnIo6F/oee+kcOFS1n335zvnGz4dQPuixTfo/3C73WrH4/EzCWAYBr7vE4Yh5/OZOU0QoG1bHMdhvV5zvV7nw7G6rhFCEMcxXdfNh2NFUWDbNlJK7vf7fAiglGK322GaJkmS8Hw+58Gxvu9JkoTlcklVVfPg6XQiCAI8z+NwOLx/8XK5EEURruuy3+/f73i73dhsNgghaJrmz6G/4OPxQErJarWiLMuX359gmqZYlkWe5yilXqIJCiHIsoxhGN6CMR1AKaUtFp8dig7fHfIPHCBStW2QKasAAAAASUVORK5CYII=',
"precsim" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABgElEQVR4nJ2Tv4rqQByFz8omkICFjSbYWAUkloKFj2Br7yMYq2Bjb+8UNlZWgo8gIr6BEUEErbRQISD+iTJ6bnXjzd1lcf1gyu83Z2bOfJAk3iD2jgQAn78VpJS4Xq+/23G326FUKmG1WgF8gdvtxna7zWQyScuyuN1u+aM4m83YaDSYTqepaRpd1+X5fCbJp3i5XDgajSiEYKVSYSaTIQCapknXdbleryNDQ3E8HhNAuLLZLHu9HqWU36YJRd/32el06DgOC4UCFUUhAObzeQoheDqdvhf/53A4sN/vs1wuU1VVplIptlot3u/3n8V/2Ww2dByHiqKwWCzS9/3XxL9Mp1Pmcjl6nscPMtrV4/GIyWSCeDwO27YRi0U7slwuQfJZgCAIWK/XqWlaeLOGYbBWq3EwGNDzPAohaJomPc+LPodlWex2u1wsFhwOh6xWqzQMIxyUSCTYbDYppXxG3e/30HUduq5Hoj0eD8zncwRBANu2oaoqAODLGV/l7f/4Byv76Z8SsD+jAAAAAElFTkSuQmCC',
"infty" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABA0lEQVR4nOVTraqFYBDc74JgFINJEMGmHCyaLRaLxRfR7KsYfQcfQXwCgwhaBP9ADQbBuc2r97RTz6TdgWF3hl0GAPQBfj4RfbVwXdc37jiOJ4Eb8jyHoiggIjiOg2EYUJYlDMMAYwyWZaGuawDAJTzPE4ZhIMsyjOOIIAjgeR5erxfiOEbf90iSBK7rPoVt28LzvGv6vu9QVRW+79+XgmmaOI4DD4+MsavmeZ4kSaJpmuj/cQH4C0eWZWqahrIso3meKYoiEgSBtm2jMAxpXVdK05REUSSO457hFEUBTdNARLBtG13Xoaoq6LoOIoKu6yjL8unxjn3f37hlWR49+4Lv+AUGgARfu0q3AQAAAABJRU5ErkJggg==',
"geq" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABF0lEQVR4nO2TMYrCYBBGvz9uqkBsRG+RLuJBVCxsvIKlVW6RMlrZWKZII1am0AOIgpVVUgi2YnxbLSy7P6tgJeyD6YY38GAMgF7EeVXwBpLNZqNer6fpdKqiKB5bsLDf72m32xhjMMYQhiFRFLHdbrnf77/2rZIviqIgSRK63S6+7yOJVqvFaDRisVhwuVweS75zvV5ZLpeMx2OazSaScF2X4/HIU2Fvt5vyPFeWZcqyTGVZqlarqdPpyPM8exOAsiyZzWb0+33q9TqSaDQaDIdD5vM55/P57yZ5nuM4DpIIgoDJZMJ6vaaqKutBq+RwOBDHMafT6aleH7YGnudJktI0fdhrMBjYm6xWKyQ9NbvdDgP/X/yDT8G+l4qGJMG2AAAAAElFTkSuQmCC',
"precnsim" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABmElEQVR4nJ3Tv4vqQBAH8MnTKFsKxhBsrAKCpWDhn2Brb2WfRoKNtfZuYWMhYiFY2NlKsBUhmkbFSoukCCj+iKx8Xxefd8fdOwe2Gj4zyzAjAQC9EX/eQURE0d8CIQQFQfC7jp7nUalUot1uR4T/iPv9jk6ng1QqBV3X4bouvoWO46DRaCCdToMxBtM0cblcAOAJr9crptMpOOeoVCrIZDIgImiaBtM0sd/vX4qG0LIsEFH4stkshsMhhBBf/iaEvu+j2+3CMAwUCgXIsgwiQj6fB+cc5/P5a/gxjscjRqMRyuUyYrEYVFVFu93G4/H4Hv4bh8MBhmFAlmUUi0X4vv8zrFarGAwGAIDlcolcLgfbtj/D0+mE2WyGxWIBx3EgSRJ6vV6Y32632Gw2T3i73VCv18EYCycbjUYRiUQwmUxg2zY459A07bWjZVnQdR39fh/r9Rrj8RhEhHg8HhZKJBJotVoQQjyh53kvI282m2CMwXVdrFYrzOdzBEEQ5sPrSCaTLwutqirVajVSFIUURfm08BLw3iH/Bd1IKThPKTHgAAAAAElFTkSuQmCC',
"ncong" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABLUlEQVR4nM2ToaoCURCG/7NcsFoEjRrELJZ9hM227T6CTUHEd9BysIgvsM2yIAhG2zYRDJaty7Hod5Mri3u5F7nBHybMDB/8Z+aMAdAb8t6B/gxeLhelaVosUqI0TXHO5XkYhvR6PQCu1ytZllEArbW0Wi0kYYzB930mkwnGGKy1bDYbut0uSZI8we12S7VaZTweE0URi8WCIAgwxiAJSXiex2AwwDn3BI/HI+fzuWD5cDggidFoxHq95nQ65b0cvN1uOOcKEYYhzWaTLMsK9fv9/gTjOM4t/RZJkvD1mG6n09FyucynPZvNVKlUNBwOX9bTaDTK17Hf75FEFEVl7eIb37babrc1n8+12+20Wq00nU5Vq9VKf1K9Xn+1aq2l3+//aPEhA594Hf8KfgNCBY4TQ6zLNAAAAABJRU5ErkJggg==',
"downarrow" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAtElEQVR4nO2SoQqEQBiExwWDZR9CMWyxWGz7KL6jsGC22HwBbcsGm7CwYBqbnHDnLXfhyk38+D/+CZOQJD6MiD00xmAYhitkZLTWbNv2wqI/f1X7L0fKIYSX7Fbuug5KKSzLcrJxHFEUBaZpQnI3z3VdobVGCAFZlkFKiXmeUVUV+r5/vzDnHMuyJAACYNM09N6TJKPmaa1lnues65rbtp38tvZj9n2HEAJpmp4sWn6W343kAFWO0cTgvslPAAAAAElFTkSuQmCC',
"circeq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA10lEQVR4nM2SoQqEQBRFr7JBbEajgzBgEwQ/wWLy9yw2o3+gGPyGCYOI2STaBN+mFcTZXRk27IXX7nn33WEMIiJoyNSBPoJFUYBzjiAIUJbl1UAKCSGIMUZ935OUkjzPIynlyaNMHIYBURSBMQbf9xGGIcZxPHkM1eOs64o4jpGmKfZ9R13X6LoOlmV9BgFgWRZUVQXTNJFlGWzbVndsmoYA3BohBD1eCzjnyPNcFX6R67rvT/2mI3GaJrRtewtKkkS/43Hqtm2Y5/lWouM4+h1//8n/D3wC+fmmrMkzLRoAAAAASUVORK5CYII=',
"lceil" : b'iVBORw0KGgoAAAANSUhEUgAAAAYAAAASCAYAAAB4i6/FAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAU0lEQVR4nO2RwQnAMAwDL6XBO3iCQMbKnJ4mX++gfhpoId2g9xMSekhFktihmzGGAAHqvet8htydiMDMeBm1VlprABzb/t/YsmbPTM05l1T5OuoCmnUwNay3iPcAAAAASUVORK5CYII=',
"rceil" : b'iVBORw0KGgoAAAANSUhEUgAAAAcAAAASCAYAAACXScT7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAWUlEQVR4nO2RsQnAMAwEXyELCLynV9F2Lr2B8QaXJnIT4iJ1DgRCz+uLNwC9cOQSETKzNZIkbsYYtNaotZLnM53uLndXKeX5dpv5i1/E1Uoy56T3DoDtyr4ATYM8VzmixFUAAAAASUVORK5CYII=',
"oiiint" : b'iVBORw0KGgoAAAANSUhEUgAAABkAAAAbCAYAAACJISRoAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAD7UlEQVR4nL2WTUgbXRSGn4QYQaM2kRYrCIGIVlpcSMFqhNIupKDiRhcidSHiRhAkQt24EhREsdKtaxFEQeymdCHUaqUqivjfVgX/Fv4ER0OUCG8XJYNTE0s/6HdhNs+Zc9575z33MDZJ4h8v+78W+KPI0tISJSUluN1uWlpauL6+BuDs7Iz6+nru3bvHy5cv2dnZMXPevXtHZmYmOTk5TExM/IKKswzD0P379wXI7XYLUG9vrySpqqrKwgsLCyVJg4ODApSUlKSEhASlpKQoGAwqrsjIyIgAlZeXyzAMJScn69mzZwqFQnI4HHK5XDIMQ5WVlQK0t7eniooKARobG1NPT48ADQ8PxxeJvtTR0SFJmpmZ0crKitbX1y27//79u75+/apwOKwnT54I0OHhoY6Pj/X582ednJzIEc8PwzAAcLvdABQWFgIwOztr4T6fD5/PZ8nxeDw4nU78fv/dxl9cXACQkpJi4efn5zF5NOZ0OnE6nRYeVyRazOVyxRT/nUdjscRvebK3t6e6ujq5XC4Bf/04HA41Njbq9PTUrGm7eeO3trYoLi4mHA6TmJjI0dERr1+/JjMz09zU4uIiHz58wO/3U1JSYvLLy0v6+/tJTEwkEonw+PFjZmZmSEpKsp6ktLRU6enp2t7e1osXLwRoYWHBctK+vj4B6urqsvDd3V0Bevr0qd6/fy+bzab29nZJkunJyckJHz9+pLW1Fa/XSygUutOT5OTkuF6VlZVRVlbG4OAgcMP4/f19JJGXl3enwX/iUfFHjx6xu7trFcnIyABgdXUVwDzJ793yp5NE+bdv38yapsiDBw94/vw53d3drK+vEwqFsNvtv4y7seK19k0+OTnJ+Pg4VVVVAFi6a2NjA7/fTzgc5urqCpvNxps3byzFRkdHWVtbo7a2Fq/Xa/K1tTVGR0fJysri6OgIn8/H1NQUaWlpt+/Jjx8/VF1d/Z/uCKD09HQ1NzfLMAyzZswBGQwGBSgnJ+dWrKioSIA2Nzct/O3btwLU2dl5KyfmWIn33e+KRYdjrJy/FonXwncNTlPk4OCA6elpIpEIp6enAKSmpnJxccH8/DyHh4cABINBs+uWl5dZWVkBMHPuHJCBQECAJiYm1NvbK0BNTU2ampoSoEAgoI2NDQHyer2SJI/Ho+zsbEUiEeXn5wvQ3NzcLU9MkS9fvgiQy+VSQkKCbDabPn36pEgkoqysLNntdqWlpQlQW1ubJKmhoUGAPB6PAOXm5ur6+jq+iCQNDAzo4cOH8vl8GhoaMvni4qIKCgrk8XgUCAR0dXUlSTo7O1NNTY1SU1P16tUrbW1txWpW66j/V+t/+bn7CdEAhkDOhz8MAAAAAElFTkSuQmCC',
"lfloor" : b'iVBORw0KGgoAAAANSUhEUgAAAAYAAAASCAYAAAB4i6/FAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAUElEQVR4nO2RsQ3AQAgDTRSJUSiYjLG/o/wWUZAKfZRPNshVtk5yY6qqwgtHBzODiOwiMxERu/ic+kVz3ssYA0QEVQX1H+6OOScAgJmXeHIBXVEcaEApvBgAAAAASUVORK5CYII=',
"rfloor" : b'iVBORw0KGgoAAAANSUhEUgAAAAcAAAASCAYAAACXScT7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAUElEQVR4nO2RoQrAQAxD06l+Sj+17r6zqrpQyMx2YtwO5heIySMxEZLEi45n4O5Q1TXsblTVGm5nf/gFgpfGGAQwTZJy/5mZiIhZMjPI7uwT+AArQNHhYVQAAAAASUVORK5CYII=',
"ddots" : b'iVBORw0KGgoAAAANSUhEUgAAABAAAAATCAYAAACZZ43PAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAbklEQVR4nO2TsQrAIBBDY+nmRzr62S6HjvoDXrp0aMEiVgql9M2XwCXEkCQmWGbEJwNVhYgg5zzmwJ2UEgHQOccRpl8w7wnxMYNSCkQEtdb2QS9l7z0BMITwt3DBekekqogxwlrbb6HFcTcfaGEDle3Wk5ZgbaYAAAAASUVORK5CYII=',
"exists" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAnklEQVR4nL2SOwrDMBBEZ21dy8Wex+gsKixQ4asYVAh8A6nQVVxsisRqNv4khDwY2EWjZfQhERHcxOxFKQXruh4ah2EA5MU0TQLgUPM8S7fvHMcR27YpLcuiYxARjGlto+/7Vndq9YTvzN57EJESM+vMzIwQgppWa4Vz7tnIBTFGfXU/P2DLnHNGSultZmWOMcJaezqZPvl1f3jBOzwA+UZvffbT088AAAAASUVORK5CYII=',
"underbar" : b'iVBORw0KGgoAAAANSUhEUgAAAAgAAAASCAYAAABmQp92AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAU0lEQVR4nO1SqRHAMAxTeiVGwZnBQ3oUT5ZMIa6CXoFJSguqOwE9J6QmSdjg2IV/4VuFkyRIFrP3DjO7RUQIQGFm6kGbc2qtVRbcHWMMAEB7O8wFxQAmYlzq95sAAAAASUVORK5CYII=',
"Pi" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAWUlEQVR4nO2SsQnAMBADzyGLfO3WS/xaBm9h8ILeQWlc5SHgLoEIVJ6QQEmS2JGWxhgCHp1z1nkPqLViZiG4tQZAANydUkoAeu/MOTm2+sMPfBVIu2994YYLSMkl8MeR7c4AAAAASUVORK5CYII=',
"coprod" : b'iVBORw0KGgoAAAANSUhEUgAAABIAAAAZCAYAAAA8CX6UAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAdElEQVR4nO2VsQnEMAxF3x03ivewNrO3cGe8ixcxXuSnyaUKORJUHX4gUCE9UPP1kiQceHtIAD7fZs5JrRUAM8PMLhdba4wxAMg5g3Z67wIEKKWkX8QYj3lJcjttiZZoiZbo70SnUXu3XKP2+CIhBEopj0UbM6Bm3b6jTq0AAAAASUVORK5CYII=',
"gtrsim" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABcklEQVR4nMXTrYvCABgG8MebH0FQk+DHksFiHgbBJBgEi902m8E/wCosiUb/A4PBIKyYHJiFsSLKFIsgKjqdlsdwxw495cBw98QXfuH9cpEk3sjHO+if4Xg8RiaTQaPRwGQy+V3yK6Zpslgs0u/3EwDj8TgrlQr7/T4ty+Jj8FiwbZuqqrJarTKRSBAAfT4f8/k82+02Z7PZc/gYwzCoKAojkQgBEAB1XX8Nd7sdu90uy+Uyw+EwATAQCLBUKnG9Xt9DXdepKAqz2SzdbjcBMJlMslarcTgc8nq9/uxxNBoRAL1eL3O5HJvNJqfT6csWHLhYLNjr9Xg4HLharbjf75+Cy+XC4/FIZ4+iKGKz2SCVSiEWiyEYDEKSJLRaLZimCdu2oaoqJEnCfD7/3qOmaQyFQqzX6xwMBux0OiwUCvR4PM40BUGgLMs8nU50kZ/fsVwuIQgCotHo3YFst1tomobz+Yx0Og1RFAEADnz7Vv8M3gADOIbngX+QKAAAAABJRU5ErkJggg==',
"gneqq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABdElEQVR4nJ1Tu4rCUBScLBsUomCRIrWgAb9BEDsrwU9QxE7wD8ReEGKRJp+ghZ2QQiwtlFRetTCVioVNQNRCxmJ3dd1kXxk4zbln7jBzz5VIEiHwEob0RJxOpyiXy+j1evA873cm3zGfz5nJZAiAsiwzn8+z3W5TCMEg4GvDdV12u10WCgVGo1ECYDKZZL1e53A45Pl8DiZ+xvF45GAwYK1Wo6qqBEBFUei6Lr8NhySEEHAcB47j4HA4QJIk6LqOSCSCJ0XP89jv91mpVKhpGgEwHo+zVCrRsixut1u/x8lkQlmWCYCpVIqNRoO2bfNyufwczmKxYKfT4Wq18g0ZhsHNZvPUk8i3zdnv97Bt2+d1vV6j2Wwil8uhWq0CAIrF4sPjaDQigD+VEOKheL1ecTqd7kq73Q7ZbBaJRALj8RixWOx+pihKeMXXj1vS6TRM0wQAGIaB5XKJVqsFVVV9vjVNQ+DmzGYzmqYZ+Ay+VP+L0P/xBlcptn3x9eeDAAAAAElFTkSuQmCC',
"between" : b'iVBORw0KGgoAAAANSUhEUgAAAAgAAAASCAYAAABmQp92AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABJUlEQVR4nIXSMYoCQRCF4d9uQRFUFJPWUEREA0EMPMAk3sJTiDfwHF5FxGgUTAwmEkSYyGDQrH0bLPQowm5l9fiCquouSBJ/lHlvDocDxhgGgwHe+2/Q7XapVCoMh0Ostb+h3mq9XstaK2OMkiSRJH2AXq+nxWKhRqOh1Wr1CZIkEaDNZqP5fK7xeCxJCjPsdjsAJpMJ0+mU0+lElmX5kJfLBQDnHM45Xq8X1+s1B/f7HYBqtUq9Xg9ZALVaDYDH40GWZSELoNPpAJCmKWmaAtBut3Mwm80AOB6PxHFMv9+n2WzmYDQa4Zxju92y3++Jouj7ksvlUuVyWYDiOP6+5O12U6lUUhRFIft4rOfzifc+bAFQfAetVovz+QyA9x5rLYX/PswPH+TGBp5oQV8AAAAASUVORK5CYII=',
"theta" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABcElEQVR4nL2RIavCYBiFzx0u6IcWB0uCyWDQf2ARo2H7AUbBYBPDwtKCQf0JgmEYBKMgRv/CikEMS4KI21xxwrnB63ReLveme+Arh4fvPed9wTdFUUTLslgsFplOp1mr1bjdbkmSeAVvtxubzSbz+Twty+J4PKaiKCyVSoyiKAkPBgNmMhk6jhN7tm0TANfr9RM+n8/M5XI0DCMRa7/fEwCHwyElfMm2bQRBgHa7jVfJsgwACIIAqYe5WCxQLpchhMDxeIxh13UBAEII4FFMCEEAP775fM4UAOx2O4RhiH6/j0ajkYgxmUwwm81QqVTuP69WKwLgcrl8Xzvr9TpVVSXJe8EwDJ+5XuR5HjabDTRNAwBIAJDNZgEAl8slAU+nU1yvV3Q6nbtBkofDgZIksdfrxeNd16WiKGy1WrEXH0XXdcqyTNM0ORqNWCgUWK1W6Xned/h0OlHXdQohqKoqu90ufd9PlP0gSfxR0u/If8CfocpRTmpv+G8AAAAASUVORK5CYII=',
"complement" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABEElEQVR4nK2RMYqDYBSExy0Emxgt7SxF7HKFiHgGTyNpg+QQ4gFS6Cms0kaC6aMhKokWs9X+UVYwCzvlmw8efCORJD7M19yxrmtcLhcMwzAtOMr1eqXrupQkiQCoqip3u53oBTwMAx3HoWmazPOcbdsyiiICYBRFUzhJEgLg8XgcP6PnedR1na/X6w0HQUBFUdj3/QQ+n89M05SPx4PSj43NZoPn84nT6bRs43a7Yb1e/13dIqxpGuq6/gy2LAtFUfwaoigKZFmGpmneo8RxPKvO931qmjZV1/c9bdsWo3Rdx8PhQADc7/fTUUiyLEtut1sx92q1YhiGoheex6mqCvf7HYZhQJZlcZ+FF238O/wNyIggfFpgVb8AAAAASUVORK5CYII=',
"nabla" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABOUlEQVR4nM3SoYoCURTG8e8OgxO0aDLIZJtpgggWu0abyoDFRxCsglHBarTbfIEbfQPFaNIyQVDG/4Zlhdm7i2vbA6ece3/nlM8A6M3yJclaq7/aKIokgEajgaSXHYYhaZriS1Icx7LWajqdql6vO9v3+72Gw6EGg4E8z/u8lCQJhUKBfr/PTzUejzHGcDweAdDXQxzH5PN5kiTJgDRNqVQqtFqt5+yJrLVIYrVaZdB2u0US6/XaRQDVapVms5lB3W6XYrHI9Xr9Gc1mM4wxHA4HAC6XC0EQMBqNMosy6HQ64fs+k8kEgOVyiSR2u93vCKDdbhOGIY/HgyiKqNVq37+4aLPZIIn5fI4kFovFa3S/3ymXy+RyOYIg4Hw+O8hzwuj76vV6ut1u6nQ6KpVKTkIMvJ9y59L/Qh/KtK42yXW9SAAAAABJRU5ErkJggg==',
"dotplus" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAmUlEQVR4nL2RMQoEIQxFM8uCTO9BvICVx/BAeoi5x4CVrb2FnZdQRJtst4uMCOPC/DIvnyQ/GyIiLOg1g+d5grV2DHEiIQRKKYdsm63qnANCCDDGLuw9W/U4DqCU3jfGGKGUMmTTcGZaNn7DCSGA1rqDxhjY9x04511dKfW7MecM3vuuIaUEtdZLvbW2/sfnw/k/1ccmPm/8ABoZoCtlFCThAAAAAElFTkSuQmCC',
"eta" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABGElEQVR4nLXSMYrCUBDG8f97bKFYpYuSKlgYwkvhHWwEk1PYeoacwRukTJ8+Rwi8gJIDWIhFikAKEd8Wi5ps2F2bnXL48TEzjDDGGN4s+S4c4CRJEEJQFAW73Q7bthmPx2w2G+q67mOtNVJKttstTdMQxzFRFJFlGfv9HkynVquVAUyapt22mU6nZr1eG9Fd0LZtPM8jz/PerEopFovFa4zL5cL5fCYMw8Fip9OJ2Wz2wlprAJbL5QDWdY1SaoiDIOjhsiyffdltOo6DZVk9rLVGCIHv+/3k76mPENd1mUwmX/h+v3M4HH7ESikAPgCklLRtO4C3243j8UgURcAfv1FVFdfr9Zn8K35c4m08Go2Yz+cAiH/750/I+IoiNxZjHwAAAABJRU5ErkJggg==',
"forall" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABN0lEQVR4nM3SP4rCUBDH8Z9bKOYAkuABPICGHCQg4i2CCsFbBAWbFClELAVRD2FhYQQbjxCUtIl8t1g2i+sf1m4HpnlvPryZx5QA9GZ8SNJisdB0On1ZuN1uFYahLpeLBNDv95HE4XDgWTiOQ71e53q9IoA4jpHEcDh8CE6nE5LwfR+A0vdMtm0rSRLNZrO71ubzuYIg0PF4VKPR+GoPYDweI+lpOo5TvFygJEkol8u4rstutysyiiIkMZlM7hGA67rUajWyLCvOPM+jUqlwPp8fo+VyiSRWqxUAeZ5jmibtdvvmY25QlmWYpkmn0wFgs9kgifV6/RwB9Ho9qtUqaZrS7XaxLIs8z1+j/X6PJIIgwDAMBoPB75J7BNBsNjEMA0nEcfw3NBqNkESr1Xp0/bMRb2/5/0WfpiHlkSRHp7IAAAAASUVORK5CYII=',
"sqcup" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAaElEQVR4nOWSsQ2AMAwEP4gNsp5HyTqZw2O49ALODE9DBUHIokCIK60/WS99IUkkWbLCc8nMICKIiGkwIiAiMDOAO6pKAHR3znB3AqCq8oVOf5fW46H3jlrrKTjGuJZaa7efykdWnmEDOA9GzKWQbLUAAAAASUVORK5CYII=',
"sqsupset" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAWklEQVR4nGP8////fwYKAROlBgwuQ1iwCT5+/Jhh69atRBkQHR3NwPAfC9i+fft/BgYGovD9+/f/YzWEGLB//364IYMnYIeZIWSnk1u3biE41EgnjKO5GAMAAOJrnis+kBPXAAAAAElFTkSuQmCC',
"mapsto" : b'iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAy0lEQVR4nO2TPQqDQBCF3+geRY9iZ2dp4QVstBUs9ByiYiueZ0FPYGkliLw0aYQ1kE2aQF45w3zzmB8hSXxBzjcgf9AHIBFB13W3RWmaoiiKS0zZdPc8D1mWwXVdVFX1GrSuK5ZlMebCMITWGnVdQymFsiwhpoMUkbccaq3vHeV5jiAIbovHcUTTNEiSBL7vAzQIANu2NaVIktM0USnFOI55nidJ0mr9wzAgiiL0fQ/HeSJMHed55rZtt472fedxHJeYcdg2+pEXsdEDIMuzdv0CXh0AAAAASUVORK5CYII=',
"bigtriangledown" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABEElEQVR4nL3TPYqDUBDA8UlYPIGnEBIMWGhpm850sUqqdFaCtxESrUxlZ+UtbGxsUgjeIBr/WyzIimY/srDTvTfzezMMvAWAvBDLV9Cf4JuIyG63kzzPf4yCIBAByPMcx3H4Lu73O5qm0TQNSxER27alaRopiuLLTpfLRbbbraiq+tERIMsy9vv9025d17FarajrGgD5nDRNk7IsZ2EURXieN5xHME1TDofDBD0eD3Rd53a7zcO+7zEMg6qqRjBJEk6n0+huBAGu1+uo6NljE9j3PZvNZhgrTVOOx+Nk/AkEiON4WIRlWbMLm4Vd17Ferzmfz7iuO1cyDwHCMERRFIqi+B1s2xbf95+lWcA//8d3YjtDRVmpIkEAAAAASUVORK5CYII=',
"sqsupseteq" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAfklEQVR4nNVTuQ3EMAyjDhnCE3hYL+A9vIDdeQS5U+c1mCII0hhBHvhwR4AFC1GQKAlJ4iU+bw3mmpRSICKX2FrDMjLx3iPGeNrdzBBC2AQfotZKAFRV/vhi/9dkGHHvHSml00IzO8QovpwzAVyiqlKmPeDXzn6Hcw7zxrmLFYPYinttcRsfAAAAAElFTkSuQmCC',
"propto" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA40lEQVR4nO2TMYqEQBBFvxuZGpiOiKFi6AFMFUy8SOeezBOIJzAQOjAw0FZosI30byazjLPBpLsvq6IeRRVVFkniQ74+Ff/lN2itX3LbtoEkwDc0TcPH40EATNOUSil2XccoigiAwzDwVj7Pk1EUsa5rzvPMsiyZ5znjOGZVVVzXlSTvZSklsyy74n3f6fs+i6L4UXc7M0lYlnXFtm3DdV0opfB8kLey53mQUqKuayzLAiEEHMeB1hpCCBhjri63tG3LIAgIgEmScBxH9n3PMAx/X9gzxpiX3DRNPI6DFvnnvuobqlEj5UoMR0kAAAAASUVORK5CYII=',
"pi" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA30lEQVR4nN2SPQqDQBCFXySFWNloraVo4TW29giC4B0ED+DRxEYttlgQtLHcUhSZNMkmm4iQJkUGptj39psfmAsREb4I45vPvwFA98jznACc5jAMdH2ASZKgaRqM44iqqlTBsixhmiaKooDnec8ORERxHBNj7FUi27YpyzL1Vjvs+w7OOaIoUtWnaYKUUtMUIITAsiwIw1CZXdcBwDHQ9/2H2bbtOWAYBoIg0Dq4rgvHcY4B3/dhWZYyOefaiB/AuznPM7Ztg5RSB9Z1hRBCmxUAGGOo6xppmirt8gfXegMFTIxqL7wMaQAAAABJRU5ErkJggg==',
"pm" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAmklEQVR4nGP8////fwYyABM5mmin0cHBgSEhIYG6NrLAGL9//2b4+PEjiuTv378Zfv78yfDmzRsUcSEhIQaG/1Cwf//+/wwMDETh+/fv/2eERcf79+8Zzp49i2JycXExg4SEBENpaSmKuI2NDcJGbMDe3v5/fHw8Vjn6xyPcj6QCeHS8fPmSYffu3URpCgwMpEJ0kAoGWe7ABwBMO5SEoy1uLAAAAABJRU5ErkJggg==',
"dots" : b'iVBORw0KGgoAAAANSUhEUgAAABAAAAASCAYAAABSO15qAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAATklEQVR4nO2ToQ3AQAzE/F00a4cF3hABV1LQSs++MMaOpQNZts0B18nxBCbwf6C7yUwkfQRJZCbdzdb1Q1UZcET4TUQYcFV55x5PWPON3P6PUKx/NQ+TAAAAAElFTkSuQmCC',
"nrightarrow" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA5klEQVR4nO2TMY5GUBSFDybxWwCVtdiAgrxSZQMa6ldbgUqhktgCjb1oFIpXKBCRMxUTMZNM/nbmS25zcr/i3ORqJIk30d8V/+VvyPMcRVEAAKSUKMvyvsAfGIaBlmVRSkmSTJKEmqaxqqpr55KXZblNFEV0HIfTNF1ZHMfUdZ11XX/J8zwTwK/HMAyO48gPAHi9Xqiq6qyBLMvgui7SNL1VbNsWTdNACAHbtp+d67omAPZ9f8u7rqNpmgzDkPu+3zufCCEYBMHjgJ7n0fd9btv2PNjJcRxUSj1kpRTXdb1lGvnnvuoTR8U03Q2wnDgAAAAASUVORK5CYII=',
"Doteq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAnklEQVR4nM2TPQrEIBBGv6yLOYAQ8AR2aXIM75FL2XsLyTHsLfQOKTLbLC4BI9mBhX1g4/D8xr+BiAgMHhzpd+I8z7DWNmvPnphzhpTyezGEcCmC3mzbRgBujRgj1URjDJxzvQYqWmsM3HusiSkleO9vSeu68vdYWz2OA/u+n1YupUAIgWmaTvPjOH4SWyilaFmWZo395Nin+me/o8cL4t6L3xwOcW0AAAAASUVORK5CYII=',
"sqcap" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAZUlEQVR4nO2TMQqAQAwEc+L77rH3gRR5SLqrU6YbG7VRkFMQCwcW0gwkkC0AMsg0KtyW5m3ovUtr7VKotYqwoqqIyGVUlcN67i7AIe7+7KZfel3aPyIiMDMykzMyEzMjIijfrsYCuYxrPYZF3Y8AAAAASUVORK5CYII=',
"kappa" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABEElEQVR4nNWSIa7CYBCEhwYwVSQIREV1mwqogQMgegMwPUQNrnU9CRdoUgyOCg4ApjeoIiSgCIQPxQ91qJe8dZv9Znay2Q6AfizrV/AP4eVyKcdxTH+/3xXHsYbDofb7vcRX+b5PFEUAXC4X5vM5rutS1zUABr7dbnS7XVarFU3TMB6PmUwmNE1jzEyMuq71eDzU7/c1m81k27Z2u51Go9En51u1Xq+RhGVZ9Ho9giDg+Xx+p/w4Hw4HSVKWZcrzXMfjUUVRtM/xVkVRhOd5AFyvVwaDAWEYtpwN7DgOi8XCDNI0RRKbzaYNn89nJJHnuRmcTids22Y6nbbhqqqQRFmWrbVJkiCJ7XYLQOcfft0Li9YNc3+l5UYAAAAASUVORK5CYII=',
"nprec" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABWklEQVR4nK2TPYoCQRCFa8elmcAfdAIxFpHJjTQxVSY1mROI4AEED+ANxDuIRiOIoZEGBpoIgpHBGAxoZGLzbTasqy7Nsi98XV/3q6L6A0D+IMu0EJBmsymbzSY2jBQEAbZtcz6fud1ufJhGrdfr4rquZLNZ8X3f7MX1eo2I4HkeiUSC4/GIEdhqtRARkskks9kM4HdwtVrh+z6WZVGr1djv9/FZDGqtORwOjMdjut0uxWIREUFEqFaraK0fLo3B5XIZFyqlaLfbzOdzbNtmOp0+pYnBMAzp9/t4nofjOIgIjuOQTqe5XC7vwe+63+8sFgssy0IpRT6fZzQaPcR9O5zhcEihUCAMQ3q9HkopGo0G1+v1Pai1plQqMRgMYm+73VIul3FdlyiKXoOTyYRUKvXUWxRFVCoVdrsdn6/W63Q6SafTkUwm8+DncjkJgkAAMd7VnzL+Vv8GfgH+YRHcsj6zFQAAAABJRU5ErkJggg==',
"cong" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA7UlEQVR4nNWSMYqEUBBES1FMDRUEwUCMDcULeBCP4SkMNBEPYWig6CG+mZhrqmJgbTaw8Jd1GTaYgk664VHV3QpJ4k2p7wI+DLJtG87zlM6u68K+7wB/UFVV9DyPAKiqKuM4Zp7nXJaFx3GwbVuGYUghBKWQYRhomiazLGPTNCzLkkmSUNM0AniB0zTlcRxUZCee5xm6rsNxnG/9dV0xjiPO80QURXBdFwAghdz3jeu6nuwUhmHId9J13cv2byWEoCajB0GAuq4fObFtWx7nr5L+Sd/3UBTlUU3TBGkc3/dRFMUjF5Zl/WOcz4V8AVJ+vz0mdmO4AAAAAElFTkSuQmCC',
"oint" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAbCAYAAABIpm7EAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAB6klEQVR4nLWUv8t5URzH30e3rgfhYiAZSGFRilIWFgb5T4xGm+RPMJqsMhgkowFlMViUHyUp0uWyWN7f6SFd9/t8n+H7qTOd8+qc9+vz6QiSxC/K9JvDPwKLxQLZbBaKoqBcLuPxeAA0qNvtRq/XSwBUFIUAWKvVaAh0u10CYD6f5/1+p9PpZDwep2T0nNVqBQBIp9OwWCzo9XqQZRmGwOVyAQAoigIAyGQyfw99u90AADab7d8sGQG60KqqslqtPg3l83nOZrPn/huw2+0YCoUoyzIdDgcBUJIkyrLMXq+nB4rFIp1OJxeLBXO5HAGw3+8zmUzS4/Hwer2+gOPxSCEEG40GSTKVShEAl8slx+MxAbDdbr/6sN/vQRKxWAwAcL/fn6F9Ph8AYLvdviz5/X4IITCbzXSW5vM5ACAQCLxbKpVK/Pr64nA4pMvlohCCh8OBiUSCbrebqqq+h97v94xEIhRCPJfVaqXD4eBwONRbIklN01iv1wmAZrOZlUqFm83mcx++63Q6EQCj0ahu7+NoGI6F0SxpmvYzsF6vMRgM8Hg8cD6fAQB2u90YaDabKBQKGI1GmEwmAIBgMKi//jvMdDqlEII2m42SJNFkMnE8HutCv1lqtVr0+XwMh8PsdDqfBFKQ//kj+wP6/e4h5Ot5RgAAAABJRU5ErkJggg==',
"eqdef" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABCElEQVR4nM2SsWqEQBRF72o6K5UVFFsR1E9wa2u/yD8Qeyth/QLZymL1K8TWQl22UUSmEJwUGyTGBIykyIVp3sx5977HnCilFAfEHIF+BNu2RRAEq1rXdXAcB1mWAQDevl5GUQSGefW73W5omgaSJIEQAk3TYJrmFozjGK7rghCCJEngeR4sy0JZlgjDEIQQnM/nLSgIAuq6xjiOYFkWl8sFvu9jGAZUVbWKfvq81Xmecb1eIYoiFEUBx3FI0xSqqsK2bTweDxiG8XpMP3S/3ymAXacoCrpE1XUdYRh+t+SNZFleR/2NFsfn84k8z3dBjuMcn3GJOk0T+r7f5cjz/PEZ//aT/0/wHe/PltG3295kAAAAAElFTkSuQmCC',
"phi" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAWCAYAAAD0OH0aAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABpElEQVR4nLXTvctBYRgG8Os5PjqnM6BkMDgbUodipCgZ1CnJRLL6B9iN8neYLRaLwWrxkXQG+ZgsiuWcSa53UN681Osd3nt8nvu3XPd9C5LEH0r6S/OvIJVKoVwufwZIwjRNxGKxz8B+v4dt25+D9XoNAC8A/FGDwYDJZJIul4sAqKoqa7UaL5cLSfIJ9Ho9AmC1WqWu69Q0jc1m8/H2BKbTKYUQbLVaJMlwOPxoKhQKdDqdtCzrG1QqFQYCAdq2Tdu2KUkSu90uSbLT6RAAd7sdJQC4Xq8YjUYoFotQFAWr1Qq32w3xeBwAYFkWAMDn891T2mw2sCwLuq4DAJbLJQAgkUgAAObzOTRNg8fjuYPz+QwAUFUVALBYLOD3+xEMBnE6nTCZTFAqlb5jPRwOBMBGo0GSzGazzOfzJMl6vU5Zlrndbp9TyuVyFEKw3W7T6/Uyk8nQMAw6HA72+/1H9A9wPB5pGAZlWSYAut1uptNpjsfjp8G+THo4HBIAZ7PZzy+S5MsumaYJIQQikcjbHXsLQqEQFEX5HESj0bfNACDIf77pL08fVhj+F9C1AAAAAElFTkSuQmCC',
"Gamma" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAASUlEQVR4nGP8////fwYiAROMsWDBAgZGRkac+MmTJwws6LqbmpoYFBUVMUwVEhLCVOzp6clgYmKC3xkkuXlU8eBRzEhWqhtYxQB3hhBW7kbSjQAAAABJRU5ErkJggg==',
"curlyeqprec" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABbElEQVR4nJ2TPYrCcBBH579ZESvFzkItLPwCaxtBsNIzCBJI4wE8hYiFoJ1NGivvYFCLXEBE0ZBCkGAlFpLI20q3WJddffW8mWGGnwKQN/h4RxIR+XxV8H1ffN9/beL5fJZGoyGu64rwT2zbplQqkUwm8TyPP0XHcdB1HaUUlUqF4/EI8Fw8nU6YpkmtVkMpRSKRYDQa4fs+3W6X9Xr9Lbqui2EY5PN5lFKICOVymcFgwOVyYbPZUK/X0TSN/X7/Lc5mM3K5HK1Wi+FwyG63A2A+n9NsNgmFQhSLRWzbfr6q4zhMJhPa7TbpdBoRIZvNMh6PCYLgUfcQbdsmGo0iIo/iTqfDYrF4erTHH2OxmFSrVclkMiIist1uxbIssSxLDofDz6c+6+Z5HtPpFMMwiMfjaJqGrus4jvNz1d+4Xq+YpkmhUCASidDv97ndbn+Ld4IgoNfrEQ6HWa1WKHgtVsvlUlKplLws3nk7j1/4q+Q2PHi+zAAAAABJRU5ErkJggg==',
"questeq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAwElEQVR4nN2RLQ6EMBCF3242SBJwtRh8PamjrhLVY+FI4B4YguEKhBuQoGohYVZRsfykIPclo9588ws6UV3XpJQirTWN47jz3ziR53moqgqcc+R5vvNPQSEEwjDEMAxIksQdBICyLBFFEdI0vQd2XYcsyw69S1ApBd/374PzPGNd12NzO2/TNATAKfq+p89WII5jFEVxNYAVYwwvIiKn7B/ZjtM0oW1bJ0hK+XxHO+qyLDDGOHUMguD5jpd//BPwC+7TlGGuYJkcAAAAAElFTkSuQmCC',
"cup" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAwklEQVR4nN2SIQqEUBRFrx/5GAzGvwJxASbRZHBrNnEfBrvFDRiMBoNiM2hUQe6EARn5yTTD3HjfOTwePIMk8SDiCfwFIY5j5HmuQUVRwPM8nOd5F/q+xzzPmrCuK7quA8mfP1pKieM4NGjfdwghYJrmXVBKYRxHTRiGAUopfUMYhqiqCsuyXN22bSjLElEUvQt+ZJomOo5D13WZpimzLKPv+5RSsmkakuRNIMm2bZkkCW3bpmVZDIKAdV1fc+MPvvUFfqZ60V2cuowAAAAASUVORK5CYII=',
"cdots" : b'iVBORw0KGgoAAAANSUhEUgAAABAAAAASCAYAAABSO15qAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAVklEQVR4nO2TMQ7AIAwDTT/KyLOzWGIkHwju0oFKbFmqipsvJ3lIkSQkuDLHJ/C/wJwTJDHGeAnuDpKICGxdPfTeBUC1Vq201gRAZqadm55Qzi98IHADJGpRw5fCfDkAAAAASUVORK5CYII=',
"psi" : b'iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABTUlEQVR4nL2Tsa5xQRSFvzMiMkKi1J8oMDrRqCQ6r+ENPIl4AIlWr/IAGlEcJAiJRCmRU0gUWH9l7j1obvOvZIo1s76dyZ49gSTxR5m/AglIErlcjl6vB8B2uyUIAsbjMQCj0YggCNjtdj/Q4XDger1Sq9UAiKIIIOGttYRh+AMtl8uPUCaToVQq+fNqtYoxJgkZY6hUKt6Xy2VSqZT3r4IeiqKIMAyx1nr/CsVxzOl0+oRWqxXOOQButxv7/d7796snGlEsFgFYr9c8Hg8fmk6nGGOo1+tJ6H6/cz6fE5Wdc8RxzHA4pN1uUygU/PtIklqtltLptPr9vrrdrrLZrCaTiRqNhqy1WiwWr6g8tNls5JwTkFjNZlPz+Vy/xW/zfD41m82Uz+fV6XR0PB71TbxvXC4XARoMBl8BSfoY2Pf2ftMH9D5z3xT8t//0D0HRDRadVkiTAAAAAElFTkSuQmCC',
"ntriangleright" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABXklEQVR4nJ2Tsc4pURSF14iJhiE6L6AdvWcQCQWFaLwHhcQb4BFIVJpJplJohk4USiojEhFTKnx/8WcmV8Y1N3clp9lnf9kr6+xjAOg/lEpqANTpdLTdbmMXX+W6LpLwPO+tHoHX6xXf92Ngo9HAtu1YPQJXqxWmadJut1mv1wD4vk86nWYymXwHJVEsFpGEbdvU63Wy2SxBEMTAWDibzUaLxUKFQkHL5VKAhsOhTqfT53DCicfj8S2UVqtFLpcjlUpRq9VwXZfX6xW3GoLNZpNKpQJAEAT0+30Mw0ASh8PhM3i5XDBNk+l0iud5dLtdMplMFN79fv8MjkYjJFEul5FEqVRiMBhwPp//nmqv1yOfzyOJarXKbDbj+XwmP0d4HMeJNf8pA36XfL/fy3VdOY6j2+2m3W6XuMSRwk0Zj8dfp71ZBZjP51iWxePxSAQjq6GCIJBlWUm/TTHwX/UDKt5AySB9K7EAAAAASUVORK5CYII=',
"cupdot" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA2ElEQVR4nN2SsamEUBRER/0PNhATQTE2eBWY2ICJoVZgD/ZgZBO2YCJoAwb2cMHIwFQU3vxs2UX4sNHCn/DOnIGBa5EkPpD9SfgLQFVV6LruFhqGAXmewxiDn1djHEdEUXQDRAR938MY883R27ZhXde/AaUUrusCAJRliTiOAQDnecK2bTiO8w6EYQgRubWKCIIggGVZAF9U1zV93+e+78/bcRzUWrMoCpLkGyAi9DyPWms2TcO2bZkkCZVSnOf5DpDksizMsoyu6/LxeDBNU07T9PStf/Ctv4MwmpOGzs6jAAAAAElFTkSuQmCC',
"sqsubset" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAYklEQVR4nGP8////fwYKAROlBgwuQ1iwCT579oxh06ZNRBkQERHBwPAfC9i/f/9/BgYGovD169f/Y3UJDNy/f59BQUGBoGsGT8AOM0Pwxs7SpUsZhIWF8RpAtXTCOJqLMQAAQ69dXlhNjR4AAAAASUVORK5CYII=',
"cdot" : b'iVBORw0KGgoAAAANSUhEUgAAAAUAAAASCAYAAACTvBTGAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAOUlEQVR4nGP8////fwY0wIQuMIgET5w4wcDIyMjQ0NCAXSUjzEe/fv1iePXqFQMfHx9CkG7uJCgIAEv0FcctaQFrAAAAAElFTkSuQmCC',
"Omega" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABeUlEQVR4nM3ToaoCQRQG4H9GQRBkLQpuEBdEbJvMPoHFF7AJJsGsaBUUg1UwzBvYbMIGo77AuorNYhHD6s5/g6Cu7L3hcsM9MOXM+QbmnBlBkvhFyM/Eer1GvV5HNptFIpFAoVBAq9XC8XgMF/ItptMphRC0bZvD4ZCz2YydToeGYdAwDDqO86x9wtVqRSklG40GgyB4P4/7/Z75fJ6ZTIan0ykMq9UqTdPk9XplVCwWCwJgt9t9wfP5TCkl2+12JCJJrTXT6TRt2yZJSgDY7XbQWqNcLn/bRSEESqUSXNd9ddX3fQDA7Xb7cQT3+x1BELxgLpcDAHie9yM8HA4wTTM8DsuyaFkWtdaRd3QchwDYbDbDXR2NRgRApVQkrNVqjMVi3G63Yej7PiuVClOpFDebTQhNJhMCYK/Xe+ZAkq7rUinF8XjMeDzOZDLJ5XJJkhwMBgTAYrFIpRSVUrxcLg84n88JILT6/T7Jx8P43PM8j4L8o9/xf+EX3QieIFuXC10AAAAASUVORK5CYII=',
"nsubset" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAATCAYAAACgADyUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABVklEQVR4nL1TsYrCQBQcLyemEAMphYCdH2ATBAsrO5v8QMDCwpRa2eQ/bCxtRSRiYaEg/kCIH6BgYyWJQmTnKvcuxECwuIFt3nvzZvfN2wJJ4gN8fULKTYyiCIfDAWEY/gaZA9PplKVSibfbTcZyKS4WC7TbbZTLZRn7fld4v99xPp/xfD4hhMB6vYbjODgejwAAwzCSV43jmMPhkKqqEkDm8TyPCeJgMGC1WqXneXw8HiTJfr/PRqORercknk4nKorCzWaTKKjVahyPx9nE+XzOSqWSSAZBQADc7XYpopxqsVhEHMcQQsghrVYraJoG0zTTE3x1uF6vVFWVs9lMdu10OrQsK6VGktIOXdfhui56vR4ulwtarRa22y1Go5G04YWUHSQ5mUxYr9epKEp+O/7Ctm02m82s9PuVE0JguVyi2+1mbeH7Jd/v9wRA3/czFQvkP3/kH9zo1LmPB76GAAAAAElFTkSuQmCC',
"zeta" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAAWCAYAAAAW5GZjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABQUlEQVR4nJWTMarCQBRF77MIKNoIInaCKxBECNirpavIBixcgpWgFnaCYG3rEqy0iIWlhaVgIwEt4vldMD/xx39gmnmHeY87MwagL8l9Kybk9XotM0tdvV5P9j6G7/vyfV+SFIah5vO59vu9zEyTyUQihcvlguu6SKLT6XA4HABIyMfjkVqthuM4TKdTXq9XVIvJ5/OZarVKuVxmt9slOkZyGIa4rkuxWIzafpRXqxWSWC6XqSJAlEa73dbj8YjSSAXger1iZozH44+nAuQk6XQ6CVCz2cy+wSAIJElmli3X63VJ0maz+VOO0uh2u0hiMBiwWCzYbrc8n8/06O73O8PhkEajgeM4SKLf76fLvxmNRkjidrvF00ijUqkon8+rUCgkZ35nNptRKpXwPC97jFarhed5BEEQ2489/iz+9Qd/ANwvydsEKdVWAAAAAElFTkSuQmCC',
"bigcirc" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABcklEQVR4nLWTr6rCYBiHX40T0aTgNsEoDINGi2CyiLBkW1la8RZMtl2C4LwBi2CZGByIiOAtWIQPZILK5r/9ThCng3EUD+fJv+cL78MXAQD6kui34v/IlmVRs9mkXC5HyWSSSqUSdTod2m63wSFecBwHqqoin8+j2+1ivV7jcDhgsVhA0zTwPI/RaOTvfdnzPDQaDSiKAtd1EcZ8PocgCBiPx0HZMAxUKhVcr9dQ8YFlWRBFEZfL5SmXy2X/xXfUajUMBgNEHp0TiQTZtk3R6PsAuq7Tbre7X3u/3xPHcR+JRETpdJoYY3c5Ho+T4zjked5HMmOMUqnUs7MkSTSdTj+STdOkYrH47Nzr9VCtVnG73X491mw2gyiKOJ/Pwc71eh2qquJ0OoWKy+US2WwWpmkCeOkMAMfjEYqiQJIk9Pt9bDYbuK6L1WqFVquFTCaD4XDo7wkhTCYTyLIMnucRi8VQKBTQbrfBGAvs/M7f8Kcv+QPXRce1KmHc1wAAAABJRU5ErkJggg==',
"circ" : b'iVBORw0KGgoAAAANSUhEUgAAAAkAAAASCAYAAACJgPRIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAoElEQVR4nN3RsQmEMBgF4OcJLhBXSJfKDewCWSAzOIZr2NgHAnaOYJEVgiNYpUgRnt1xFmJxXHOv++GDB++vSBIPeT2B/0LLskBKCSEEhmFAzhngR/Z9pxCC67oyxsi+7zmOIy/IOUdjzPv23lNrzUudUgrbtiGEgOM4MM8zuq671pHkNE1s25ZN09Bay5QSq7vflVJQ1zUA4BZ9v9Nv0Qn0cnTg5D0o2AAAAABJRU5ErkJggg==',
"ocirc" : b'iVBORw0KGgoAAAANSUhEUgAAAAgAAAASCAYAAABmQp92AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAdUlEQVR4nO2NqxFDIRRENyEaAxZDTRRAHRRzC6AOJAqHQGDpgdmoMEnEk1E5an8zi947tdYUEaaU6JzjO8g5M4RwAmst11rHP7z3KKWg1ooxBvbeMMbgQJIxRgKgUooi8nnxEq01zjn5zY0kccH9qvwPfjp4AorCdghzBgGJAAAAAElFTkSuQmCC',
"prod" : b'iVBORw0KGgoAAAANSUhEUgAAABIAAAAaCAYAAAC6nQw6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAjElEQVR4nO2VsQkEIRBF/x4LZsYGhlZgG5pagRVoiyLYjSX8S3YXFg4P9gwu8MPA/IF58JOZjSQxQfvZ9N5Ra30E8d4DPFRKIYBHRZKvH9LctH8appSQcx4uhhDQWhuDpJTQWg9BQoibnxZtgRZogRboX0DXhVRKIcYIALDWfl10zsEYc/lt1l+bFu0Nafo1RuBgDkAAAAAASUVORK5CYII=',
"trianglerighteq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABGklEQVR4nKWTParCUBBGZ54prMwKgpBS7N2AjWUKIWUWcN2ARWrBOhuwtpBgG0wt3FpBIYWQyi6VRTiveP+IRn0HpjwM882MAsgLvL0i/RGrqpLL5fK8aK0Vz/NkOp3K6XRqNvlks9kgIjiOQ6vVIggCsizjFleitZb5fI7v+4gIvV6PJEmoquq+WBQFAHVds16vGY1GqCqdTofJZMJ+v78v/uZ4PGKMQVVRVQ6HA43rKMtSFouFLJdLAWQwGIjrutfhfHXM85zxeIzjOLTbbaIowlp7e8Y4jun3+4gI3W6X2WzG+XxuTlVVGQ6HrFYr6rpuXsd2u8UY851aEwofR16WpaRp+tC5hWF4Hc4jtdvtfjo+y//f6lneASO7ncWwXdz3AAAAAElFTkSuQmCC',
"nwarrow" : b'iVBORw0KGgoAAAANSUhEUgAAABAAAAASCAYAAABSO15qAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA4ElEQVR4nOXTMWqEQBgF4GeI4ugZbDyGhTdQ0MIDieAVPIfoCILYWXkESxtLC0FG4aVbWBJhzTaBPJjiH958MMWvkSTeyMc7j/84kGUZNE17OkVRfOt9XgHTNAEALMtCmqawbRu+778OAIDjOFjXFVVVQUoJIcTrXwAA13XRNA3GcUQYhtj3/R4AAJ7noa5rDMOAOI6hlHou8CLLsnCe58fcdR2FEAyCgEqpx/0l8FPatqVpmoyiiMdx3AdIUkpJwzCYJAnP87wPkGRZltR1nXme/w4gyb7vuW0bNfLfb+MXv1FQj/Wg0KIAAAAASUVORK5CYII=',
"succeq" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABjUlEQVR4nK2ULasqURSG17kqfhS/8hgmmDSYFDT7E0y2KYJBrBpF8AeIYBCm+A/MjsFksAgK4tgEkSkzoOKAPjd5uHDHe46c+8Buez97rXez9geA/JBfPxW8lDiOI+8U6ClZLpdSqVTEcZzvWfBgv9+jKAqKojAej7nf717bPvGUANi2Tb1eJxAIoKoq3W4X0zTfk/xZVaPRIJlMIiKk02k0TWM4HDKfz3Fd92vJE9d10XUdVVURkc+12Wzwf5WZbdsyGo1E13VZrVYSCoWkVCpJoVCQbDYrqVTKO9jnzb1ej3g8TiQSoVqtMplMuFwu3G43FosF/X6f0+nk3c7hcCCXyxEOh2m321iWhW3b6LpOuVwmGAwiIvj9fna7nbfEMAzy+TymaWJZFs1mk1AohIhQLBbpdDpMp1PO5zPw4nWOxyPX65XBYEA0GiWRSNBqtdhut56te0putxuapuHz+ajValiW9Sq61xLDMIjFYsxms38efvIBf0/aer2Wx+MhmUzmW6PjKXmX//Kf/Aa+918Y17CPGgAAAABJRU5ErkJggg==',
"gamma" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABKElEQVR4nLXTP4rCQBzF8ZcERLBRiJ0WIhaCkhsEvIF38A94AMHGG0jwDla2hqAn8ALKQOr0FlZq4XebXTGb6GKxr5x5n4FhfmMB6IPYn5RTYDgcynVdrdfrTGm73cqyLEVRJPGd3W5Hq9Wi3W7znPv9jud5+L4PgJ43F4sFjuNwu90ea6vVCkns9/ss2Gw2SCKOYwCu1yuNRoN+v//opIAxBkmEYQjAcrnEcRyMMfngcrlg2zZBEHA+n6lWqwwGg9SdUgCgXq8zmUyYz+cUi0WSJHkPer0enudRKpWYTqe/t7NgNBohiXK5zOl0yoDMSzebTUnSbDZTpVL5ezQKhYIkaTwevx+NnxyPR9VqtdzTc8HhcFC3280tZwAgY4w6nc5LYME//4cvrs9UiovkNvoAAAAASUVORK5CYII=',
"nsupseteq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABOUlEQVR4nJ2SP6uCUBjGX+2awxkc2k6bQ1tDi1u4ufkJHAz6Dg1+IGlrbGwSBAfxC2QogoM4JAUF9dyhq/dPN8seeOGcB34c3uc8AgDQGxLfgTqBp9OpO1iWJXHOabvdNt5HfTgej5Qkyb/gcrmk4XBIqqp+m/jSZrMBET2cfr+P+XyOqqoAAA34SKvVCoPBAJ7nYTKZwDCM10Bd1+E4DgBgt9tBEAT4vt8OhmEISZKQZVnjcc7hum47aNs2LMtq7nEcP38xz3PIsowgCHA+n+F5Hsbj8f2Oz1KVJAmz2Qz7/R4AIAC3rv79x+l0SovFgkzTpF6vR5xzYozdF+Cn4jimoihI0zQiIrpcLpSm6a1qokij0ej1AtTDGPu9Y63D4QBFUbBer9sCvwejKIKu67her61gE05XfQLFltxb6PCFkQAAAABJRU5ErkJggg==',
"bigcap" : b'iVBORw0KGgoAAAANSUhEUgAAABMAAAAZCAYAAADTyxWqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABPklEQVR4nO3VsarCMBiG4bcRCjooLYWokxchBSdX70BHr0F6EQ4uehm9CHFydBMXJyen1sWx+c5yrKggepAz+UGWkP9JIPmJJ0l8KOZT0FMsz3MWiwWDwYBWq4Xv+wRBQLfbJUkSttvtY5Hu4pzTbDZTvV4XUI5arSZjzM3caDTS8Xgsa2+woig0HA4FyBij8Xis1Wql8/lcbrTb7TSdTmWtFaBOp6P9fv+IzedzAQqCQOv1+v7QN8myTP1+X4B6vZ6Korhizjm1220BStP0KXRJnueKokiAlsvlFdtsNgLUbDblnHsJk6TJZCJASZKovM3D4QBAHMd4nvfyc4jjuKwvsdPpBEAYhi9DAFEUAZBl2RXTbyNUKpW3sMt6Sf/UAV/si32xP2PVahVrLY1G4y3A932stYRhiCd97t/8AXfDQ/djjeU2AAAAAElFTkSuQmCC',
"delta" : b'iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABXElEQVR4nMWSvYrCABCExyMag/gHgqBgadIKEgR9AZtUsbSxCdhbWqfyBfIAtr6AdiIxNiaQMnVAEDGdIM4V4dRcrji44qbc/XYZZjdDkvilPr4XXNfFaDRCs9mEKIqo1+vQNA1hGEJ4B8MwxGAwgKIomM1mqFaruFwu2Gw2IAnwTZZlEQC32y1/UgJ2XZeiKLJYLHI8HnO5XDKKomc/4fnxeKDX68GyLHS7XZimiXa7Ddu2Y+Bryvd91mo1ep733BRFEVutFmVZTtpQVZWTySTlczqdEgCv12tsw3EcOI4DTdNS2d7vdwBANpuNc97v9wAARVFS8PF4hCzLkCQphs/nMwAgl8slwCAIcDgcoOv664KNRgMAsF6vn+DtdoNhGKhUKjAM45XG6XRiuVxmoVDgfD7nYrFgp9OhIAhcrVbpo9i2zX6/z3w+z1KpxOFwyN1ul0gm86ev+x/4E47PEw4Cha95AAAAAElFTkSuQmCC',
"geqq" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABM0lEQVR4nK2TvYrCQBSFT5YNCsHOIrWggm9hZxXwEbSwE3yQQAoLGx9BCzshhbVFIJUjNukEC5uAqIV8W+yu7o/rZsN+cJuBc8+ce2csAOXgKY/of4RRFKnT6WgymShN09+VvLFarWg0GkjCtm2azSa+72OM4R76epAkCcPhkFarRbFYRBKVSoV+v898Pud0Ot0XfuRwODCbzej1epTLZSThOA5JkvDjcAAZYxTHseI41n6/l2VZqtfrKhQK+uSYpinT6ZRut4vrukiiVCrRbrcZj8dst9vvGZfLJbZtI4lqtcpgMCAMQ87n8+PhrNdrgiBgs9k8in3Fgtcnt9vtFIZhpuV7nnfLuFgskJSpjDE3x8vlouPxmMnRcZz8js/vXWq1mkajUSZH13V1vepfyf2tXgBJkXAXAOG68AAAAABJRU5ErkJggg==',
"int" : b'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAbCAYAAABIpm7EAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABF0lEQVR4nM3UMYrCQBTG8X+StZE4GJgL2OUIaVNa2HoUD2JlG8gRUugRElLkAoH0KUS0sBC/LRYLdWc3wgr7ymF+M+/N440nSbwQ/iubfwVVVZEkCVEUsVqtvhbliL7vZYwRoOl0KkB5nssJsiwToOVyqb7vNRqNtFgs9OFKp+s6AJIkwVrLbrfDWosTHA4HAKIoAiBN05+LPp1OAEwmk2GvdDweAQjDcBi43fB+8M9q8H2f8Xg8HDye7gTn85nL5TIcuPL/e/DYAydw9eAOtG3Ldrvler2y3+8BMMa4wWazYT6fU9c1ZVkCMJvNnq+/jWRZlvI8T8YYBUGgIAjUNM3T6N7N9Hq9lrVWcRyrKIpvZ917+0f2Car16KIuBatuAAAAAElFTkSuQmCC',
"oplus" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABlUlEQVR4nL2TMYrqUBiFT2QgFkYhXBuLxA24hKige1AwVUC3oMkOgtmETWzsBKvrFrIFTRNRK4NEi5Az1XMMj+HB8JjTXfi/e+/5//MrJIkfqPIT6P+CJBGGISzLgqZp0DQNlmUhDEOUXPFNeZ5zNBpRCMEgCLjdbrnb7RgEAZvNJsfjMfM8J0mWQNd1aZom4zgmSQ4GA04mE5JkHMc0DIOu65bBy+VCVVUppXxd9A6SpJSSqqryer3y48+X9/s9hBDodrt4Pp8AgKIoUBTF69zr9SCEgJQSLzBJEpimiel0itVqVWrYer0GAMzncxiGgdPp9AXquo7z+Qzf99Hv9wEAy+USjUYDs9kMANDpdLDZbKDr+ldXD4cDFUVhFEXfeoyiiIqi8Hg88jXHdrsN27bhOA7SNP1r4GmawnEc2LYN0zShvGf1fr9jOBzidrvB930oioJqtYrH44HFYoF6vQ4pJWq1WjkAJJllGT3PoxCCAAiAQgh6nscsy151pRffVRQFkiQBALRaLVQq5XR+C/5Lv79Wn2swOkL/J9MXAAAAAElFTkSuQmCC',
"ni" : b'iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABLUlEQVR4nLWUP4qDQBjF3yxrYZFoK2iRLlgGLLyGF4hXCdoGBJt4g3QpcgBbLxCvEAiCUWGCNm+LLZasioubPPiamfl+358HI0gSL9DHKyCjIN/3IYToha7rcF0Xh8MBbds+5Yih0W63G+q67hW43+/IsgxxHGOxWOB0OsGyrO9LzpCUkp7n0XEcdl1HkpwFIsmmaWiaJpMk+R+IJIMgoOu646DtdksAf4rlckmSHFz29XpFVVWTlh+PR+z3ezRNg8+hB4ZhwDCMSVCe51iv1/NdI8nL5UJFURhF0fiOplQUBTebDW3bppSSJDk4mpQSXdf1zsuyRJqmCMMQiqLgfD5DVdXx0cZcE0JwtVpxt9uxruunnEHXqqrC4/HodaRp2k8HvzQImqP3fiNz9AW3xvMtx0eBBAAAAABJRU5ErkJggg==',
"ne" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA6UlEQVR4nN2TMYqEQBBFaxZjcwNjBWMD8QDiNcw8gDfwDCZ9CTESE/EEhvYRhArExKBt+RNtL+7sDmKwwX6o5Bevu34X/QAAuqGPO9DfgPM8U9d1XwYuSCmFOI4RBAG01gCAS2Ce57BtG1JK4xmw73sQ0aWapgnW58ie55EQ4pRrHEeqqoqyLKMoiozvOM7vGbdtg+/7CMMQ+76/9M2NzEzDMJhTm6YhKSWVZUl1XZ8mSZKEbmc0oFIKzIy2bWFZFoqiADP/WFrr8zrWdYXrukjTFMdxvF3Ry+MIIbAsy1sIAB7Av/sd3/UEYYqHTKHOPIQAAAAASUVORK5CYII=',
"lesseqgtr" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAAWCAYAAADwza0nAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAB+ElEQVR4nJ2TP0gycRjHv14egQQ6nEQO4hAYOnhOuTTdFCI46VLQ4O4gueTm0nRLi9DkVEPY3tK1pJOCy50uBgmC/w46EE30+w4vWb7la/WF3/j5/Z7n+Tw/G0niFxF+A/0YtCwLpVIJg8EA4Jo0Gg2qqkpFUSiKIgHQMAx+AsfjMe/u7phOp7m7u0sAFEWRiqJQVVU2m02SfAdbrRbj8Ti3trYIgNvb2zw5OeHNzQ1fXl4+VbIANU0jAAKg1+vlxcUFn56eVrawVGq9Xuf5+TkPDg64sbFBAAwGg8xms3x4eOB0Ov0a/JjhcMirqyseHR1RkiQCoMvlYjKZZL/fXw1+zGw24+PjI8/OzijLMg3DoI38uznz+Ryvr6/f8rm5ufnu8f7+fjGcdUfXddrfbvH7/bi8vPzWizs7O1iAlmVhMpkgGo3C5/Otp99KrVQqtNvtBMBAIMDT01NqmrakYKVH0zR5fX3N4+Njut1uAqDT6WQikWCxWGS3213vcTabsVwuM5fLMRwO02azURAE7u/vs9PpvA/n3wiCAFmWYZomTNNEu91Gr9dDrVbDaDT6/K2en59ZKBQYi8XocDgIgB6Ph6lUire3t7Qsa7lUXdcZCoUIgIIgMBKJMJ/Ps1qtftnKko69vT1kMhkcHh5CkqT/2lis3E/zB3/IV+VRiiw5AAAAAElFTkSuQmCC',
"obar" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAATCAYAAABPwleqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABhklEQVR4nMXUIavCUBQH8LOHKI6raHNFLhi1abPZ1KyYTFoEwWTyEyj4BayyYjALF1fEsnXBMlCYwXYNA0H/L7k5HENeef947/1xOOfAVQCA/pifv8KvcLfbpev1GnoXCzsEQIZhkBCCdF2nZDJJjUaDms0mxWI++ahs2zZVq1XqdDp0uVyIiEhKSaPRiIrFIlmWFaji5XQ6QdM0DIdDuK4LAEgkErBtG4/HA9PpFOl0GqZpAgACuFarYTAYvB95+JX5fI5CoYD7/e5j0zSRzWZxu90i8fP5RKlUwnK5hNezEILq9ToxxiKnrygKtVotEkL4A3MchzjnkfAVzjk5juNjxhhJKb/CUkpKpVI+rlQqZBjGV3i73VK5XPZX5bouNE3DarWKHJhlWVBVFefzObiq9XqNTCaD3W4Xio/HI/L5PGaz2eeeAWCxWEBVVfT7fWw2G8Tjcei6jvF4DMYYJpOJ9/YDA8DhcECv1wPnHESEXC6HdruN/X4feBeKo3p+jwL802fwCzEbwP3FT43xAAAAAElFTkSuQmCC',
"nu" : b'iVBORw0KGgoAAAANSUhEUgAAAAoAAAASCAYAAABit09LAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAzElEQVR4nNXSIQ6DQBAF0L8VEALhAKtIwMEVgGNACJozcAVuQIJDIzkBDo9bzVo85tdR1rQ1Ff1u8p+ZzAiSxBd5fIN+DLuugxACSqmr3LYNQghM0/SCUkoAgNb6gkmSII5jzPP8HgJAEARQSn2Gx3HAtu33cN93rOuKPM8B3uK6LouiuOa6rul5HrXWNGAURUzTlCQ5jiMBcBgGkjRhlmUMw5DLstBxHLZte3UGLMuSlmXR9302TXOvaFxGSonzPFFVFfq+N7YXf/A9T5s0qXc+9KgsAAAAAElFTkSuQmCC',
"ominus" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABZElEQVR4nL2TMYqrABCGx7AgKWzENBG0TYqAnZWQWySNZQ6h5AIBz6FNGntvIHiFxMaQpFLBQCL5ttrdl5csC8vjfTDdfMX8M6MAyC8Y/Eb6tyIgcRyL53miaZpomiae50kcx/IwFX/Q9z2LxQLDMIiiiDzPyfOcKIoYjUYsl0v6vgfgQQyCANu2KcuSvynLEsuyCILgUTydTqiqSpZlT9IHWZahqirn8/lLTJIE0zS5Xq9cLpeXdbvdME2TJEn4DKeqKrFtW1arlQyHw5e1Xq/Fsiw5HA7y9iHqui7H41E2m43M5/OXK5jNZrLdbkXX9a9Ud7sdiqJQFMW3MxZFgaIo7Pf7x1R938dxHOq6fpLqusZxHHzff15H27a4rstkMiFNU5qmoWka0jRlOp3iui5t2z6LAF3XEYYhhmEgIogIhmEQhiFd1332KfD6O+73u1RVJSIi4/FYBoPH6/xW/In//1bvUDSbLC404xQAAAAASUVORK5CYII=',
"omega" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABWUlEQVR4nOWTr4oCYRTF7ywMapEvqGiwyQgWYXCCQYswwWo3CIrYBIsv4AOYLPom9mmCZotgmCCMGBz8w2/Dst/swFpMC3vaPdxzz+HANQDkTXy8K/xDYt/3RSklw+Hw1+XT6SSGYchkMvki+IF+v08qlcL3fV6hUCjQbDYB0OLD4YBpmoxGo5dCgFqtRrFYBEDHXq1Wcr/fpdfr6Zi3202u12ssummaEfd90XEcstlszKXT6eC6boyzLItyuRw5A7Lb7aRSqcRcPM+TUqmk5/P5LPv9XqrVatT25XKRMAwln8/rxc1mI8fjUZRSmluv1/J8PsV13Sh2GIaICI1GQ8frdrvkcjkGgwEAj8eDer1OOp0mCIJ4247jICJMp1PG4zGZTIbZbIZSivl8TrvdRkRYLBbaQIu32y22bZNIJLBtG8/zCIKAVqtFMpnEsiyWy2WsPAP+3Vd9AjllSU47ngzWAAAAAElFTkSuQmCC',
"Subset" : b'iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABPklEQVR4nL2TsaqCYBiG3+QgghAEQS66NQXR1OwYNOUuuHkFgXfgJnQHbV1AIAgNbdYNtEWDIDoFgYo2vGerU2YcOnBe+Jfv4/nf7/35/hZJ4gMJn0B/Ar9eFa/XK8IwxPF4RFmWtb5pmgCf5Ps+NU0jgMYTRREfwPV6TUEQOJlMuN/vWZbl87033cAsy6goCmezGYuioG3bbLfbjY63jEEQIEkSeJ6HxWKB5XIJx3HQ7XZrGTudzj2j67rs9Xokyel0SsMwGsckeXeUJAl5noMk+v0+VqsVNpvNS8fBYHB33O12BMAgCJimKYfD4dtXbf1cOV3XcTqdsN1uoaoqDocDLpdLzXE8HuMBjOMYuq4jSRJYloXRaARRFGugYRj1BTifz5zP51RV9fejPquqKlRVVavLsoy34Dv9/7f6BqXEMAr8EArMAAAAAElFTkSuQmCC',
"to" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAAqUlEQVR4nO2TMQqEMBREx2QheoBcxwukEU9g5yk8iYVpBK9gLmSrWIhYjM1iGiEh3cI+mGbgwRT/ZySJRESq+JcDdF2Hvu/T5G3b0LYtrLW+5JfjOIJpmoZCCI7jSJIESe77TgDRkVJyWRZ+ACDPcwzDEJw+zzOmaUJd19Ba+9khnHNUSrGqKl7X5WfHUJYljTE8z/PpstjHWNcVRVFAKfV00fIbP3Ceb9wHetljpw/c2gAAAABJRU5ErkJggg==',
"emptyset" : b'iVBORw0KGgoAAAANSUhEUgAAAA8AAAASCAYAAACEnoQPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABw0lEQVR4nLWTP8hxcRTHD95SlnupO7E8WRgMFqOymcSgzCj5k4x3MxtMBtem1M1kYDEaJAslyR10J9RVyv/kxvcZ3rq6uW9PPfV+t/PrfOr8zvd8TQBAv5T5p4bH4/HvGgYSRRHBYBA2mw0mkwlOpxPFYhGtVgupVErr08G32w2RSARfX1+o1+uQZRn7/R7D4RCxWAxEhE6nYwwnk0mEQiEcj0fdJPf7HdFoFKIogmVZSJKkh+fzOViWhaIoH9/I5XIYjUYAgHK5jEQioYd5nkehUPgABUGAIAhavdvtYLPZcD6foW1bkiQKBAK6zY7HY5rNZpTJZLQ3juPI5XKRLMv0R+eb+e2coihUqVSo3W5/2Pd6vQjA22ePx0PT6ZSIiFRVpXw+T7VajaxWqw5UFIU2mw253e63z4vFAhzH4XA4oFQqYTAYGJ0AeJ5HPB43tsrn86FarRqCvV4PDMNguVx+wv1+Hw6HA16vF81mE9vtFtfrFZPJBNlsFgzDoNvtav0avF6vEQ6HcTqd0Gg04Pf7YTabQURgWRbpdBqr1Uo3iQn4m6rn80lERBaLRVuOqqp0uVzIbrcbhkaDf6MfI/nf4G8uZO9Igg5hCgAAAABJRU5ErkJggg==',
"bigoplus" : b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAbCAYAAABm409WAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAADB0lEQVR4nLWWv0t6bxTHX/caEmlQkv2ArITaQqjByC2tnARJaioiaArXaIgWa2+tob8gGiqMyPzR4lRE0BKUZQaZIAYSBWXnM/j9+E26WXykNzzLc899v+65D+ecRxER4Rel/qb5jwB3d3esrq7idDqxWq3U1tZiNpux2WzMzc0RCoV4f3//2kC+UDabFb/fLzU1NQJUXH19fRKJRDR9FK0zODk5wePxcH9/D0B/fz/j4+NYLBYuLy8xGo00NTWxu7tLMBjk5eUFRVFYXl5mcXGxcgZHR0dSV1cngHR1dcn29nbpWTQaFUB8Pl9p7+bmRsbGxkrZ+P3+Mr8ywO3trTQ3NwsgdrtdHh4eyoK1AH8VCARKkPX1dW3A8PCwANLd3S25XO6TSSWAiMj8/LwAotfrJZFIlAMikYgAoqqqnJ6eahp8B3h7e5OBgQEBZHp6uhzg9XoFkMnJSc2XfwIQETk8PBRAdDqdZLNZUQFeX18Jh8MAzM7OflcaFeVyuejs7KRQKBAKhYqFdn5+Tj6fx2Aw4HA4qgIAuN1uAOLxeBGQTqcBsFgsjIyMoCiK5hoaGgJga2vryxhFUXh6euKvrwqQy+UAMJlMVX/9R59cLlcENDQ0APD4+EgsFuO/w/+0otEoAD6f78sYEaG9vR2AxsbGIqC1tRWAVCpFoVCoOoPr62sAWlpaioDe3l6MRiP5fJ54PF414ODgAACHw1EE6PV6XC4XABsbG1WZx2IxEokEOp2O0dHR/5vdxwI5Ozv7p0IrFAoyODgogExNTZVXsoiI0+kUQHp6ev6pFy0sLJR60dXV1WdAMpkUs9lc6qaZTObHgJWVlVI3XVtbK+1XnAdWq1X29vYqAlKplExMTHw5DzQn2vHxMR6Pp1Thdrsdn89HR0cHiUQCg8GAyWQiGAyys7PD8/MzAIFAgKWlpXIzzZ8pIul0WmZmZkRV1W9nss1mk3A4rOmjmcFHXVxcsLm5yf7+PslkkkwmQ319PW1tbTgcDrxeL263G1XVvqB8C6hWv37x+gNlMN6FrigydAAAAABJRU5ErkJggg==',
"bigodot" : b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAbCAYAAABm409WAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAACx0lEQVR4nLWWz0sqURzFz8y8xCyhBEsXUUZCq6AWSuKqApdZQW2KaNGubbSXgeg/yF24KciNBCKRlgVtCkpwE/RrcqNCTNCqSM5biPPy5Yw+fR64MAz3fs4dmO/5fgWSRBslthMOAL/qbbi/v0c0GkU8HoeiKCgUCrBarXA6nfD7/Zibm8P09DREUeeu1FE+n+f6+jolSSIAwzU+Ps5UKlWTU9Pg+vqaTqdTA0xMTHB7e5uJRIK3t7dMp9Pc29vjwsICzWYzAVAQBMqyXN8gnU7TYrEQAIeGhhiLxfQ+kiT5/PzM+fl57TIbGxv6Bi8vL+zr6yMAejweFgoFQ/h3hUIhzSQcDtc2mJmZIQCOjIxQVdWG4RVtbm4SAE0mEx8fH6sNUqkUAVAURd7c3PwznCS/vr7o9XoJgKurq9UGwWCQALi8vNwUvKKTkxMCoCRJfH19LRt8fn7SarUSAM/OzloyIMnBwUEC4MHBAUUAyGazeH9/R1dXF3w+n27RCYKgLVmWdfcFAgEAwOXlZTkq8vk8AGBgYAAdHR2Gld2IXC4XKlwRAFRVBQDYbLaW4d85qqqWDXp6egAAb29v/8Wgwunt7S2HncPhAADkcjmUSiVIklTz4NHRkfY8Ojqqa/D09AQA6O/vL4fdx8cHu7u7CYDn5+ct/0XDw8MEwP39/T91MDs7W1Ugzer09PRnHZDVBZLJZJqCl0olTk5OEgBXVlZI/pVFU1NTBEC3291UFm1tbWlZ9PDw8NNAURTa7XYtTYvFYsNwWZa1NN3d3dXeG/YDl8vFeDxuCM7lclxcXGysH1R0dXVFh8OhHfJ4PNzZ2eHx8TEzmQwvLi4YiUS4tLTEzs5ObV8oFPrBMuzJa2trFEWxbk8eGxtjMpmsyRFI47no7u4Oh4eHSCQSUBQFxWJRmyp8Ph+CwSACgYDuVFHXoFW1ffD6DQJIFa/lWtyvAAAAAElFTkSuQmCC',
"preceq" : b'iVBORw0KGgoAAAANSUhEUgAAABEAAAASCAYAAAC9+TVUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABfElEQVR4nK3UsctpcRjA8YfuEWI8pbPYsYnRbjLYDP4Esjklf4VODHbqlNXGwiylM1nkpAw4ylHO4ftObt2bt/u+r/ut3/Z7Pj3TEwCQNwu+C4iI/Hpn2PM88Tzv55vs93spFouy2Wy+j9xuN+l2u5LJZGS73YqqqiJ8sdVqRavVQtM0IpEIuq5zvV4BeIm4rst0OqXT6VCtVkkmk4gImqah6zq73e6P/y+RyWSCiPx+6XQa0zTxff/lli+Rw+FAv9+nXq+Tz+dRFAURIZfLYRgGl8vl38h6vabX67FYLPB9H8dxME2TcrlMKBQikUhgGAaPx+NzZD6fEwwGERGi0SilUonhcIjruti2Ta1WQ1EUCoUCp9PpNQLgOA7j8Zh2u002m0VEiMfjtNttzuczy+WSVCqFZVmfI3+3XC5pNBrEYjFUVWUwGHA6nTgej19Hntm2TaVSIRAI0Gw2ud/v30eejUYjwuEwlmURgJ+fgtlsJslkUt5Cnv2Xe/IBMZxQZmksPKUAAAAASUVORK5CYII=',
"epsilon" : b'iVBORw0KGgoAAAANSUhEUgAAAAoAAAASCAYAAABit09LAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAABBklEQVR4nNWSsYqDUBBFr5IgCTwQmxSWD5RUac0P+BP2Qv5BW7/A0l9IY2NhlyaNTQrtXpVSwcLC4gXuNrtmF7KQamFvO2eYM8MYJIk3Yr4D/QE4TROSJIHnedhsNnAcB8fjEdfrFasviCTCMETbtjidTvB9H+M4omkaCCEAfqZpGgLg+XzmqyyjbduGaZqoqgpKKQzDAK310+t7V1EUtCyLAAiAXdcttQXM85xCCKZpyrIsWdc1H4/HT/B+v3O9XrMoipd+i+PtdoPWGlLKX+9okKRSCvv9HrvdDnEcw3Vd9H2Py+WCLMtwOByey5RlySAIuN1uaVkWpZSMoojzPJMkjX/wPR91/dyv5OKXTAAAAABJRU5ErkJggg==',
"bigotimes" : b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAbCAYAAABm409WAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAD7klEQVR4nLWWXyh7fxzGnx2zNqz8CVMWk+WCViyWuRul3FgUNyQpNa2VC1wqKXHjFheS0pQLKWlhZpQUhksXzGxltLUphZU9vwvt/H77buZbvzx1bs55v1/POafP8/58JCSJX5Twm/C/MggEApifn4fJZIJGo4FcLkdxcTF0Oh1GRkawt7eHeDz+PYDfKBwO02q1UiqVEkDGq76+ngcHB2k5aQ3Oz89ZVlYmAhoaGjgzM0OHw8Grqyu63W6urKywu7ubcrmcACiRSDg9Pf2zgdvtZk5ODgGwsrKSW1tb330kSfL+/p5dXV3iy1it1u8NHh4eWFJSQgBsamriyclJRnhCwWCQo6Ojosni4mJ6g7a2NgJgdXU1JyYmKJfLub+/nxEeCoVYV1dHg8FAi8VCAJTJZLy7u0s2ODg4IAAKgsDLy0tOTk4SAHNycnh0dJQW/vLyQr1eTwDU6XR8fn6mwWAgAA4MDCQbmM1mAmBfX58IGBsbIwAqlUqenp4mwV9fX9nS0kIArKmp4dPTE0lyf3+fAJiVlcVwOPxlEIvFqFQqCYCHh4dJIKvVSgDMz8+nx+MhSb69vdFkMhEAq6qqGAgEknoqKioIgOvr618GHo+HAJibm8tYLJZUHI/HOTQ0RAAsKirixcUFOzo6CIBqtZperzfl1w0PDxMAbTYbpQAQDAYBAGq1GtnZ2UlBlEgkWFpawvv7O9bW1tDY2Ih4PA6VSgWn04nKysqU8Go0GiS4AgBEIhEAQGFhYdq0C4KA5eVllJeXi2NhaWkJWq02bX2CE4lEvgzy8/MBANFoNG0DSVgsFgQCAfGezWaD3+9PW5/gFBQUfBmoVCoAgN/vx+fnZ0qDzWbD8vIy8vLy4HQ6YTKZcH9/j9bWVvH3/lderxcAUFpa+jXsPj4+mJeXRwApa358fJwAqFAo6HK5xCVqNBoJgHV1dQyFQkk9VVVVBEC73f5vDjo7O5MCQlIMm0wmo8PhSIJEo1E2NDQQAPV6PaPRKEnS5XKl5uDPgFxfX3Nubo4AKJVKubm5mbIUya8xUVtbSwA0Go18eXlhc3MzAbC/v5/kH7MoER6tVsuRkREKgkC73Z4WntDj4yO1Wi1ra2vFvMhkMt7e3qYa+Hw+FhcXi9N0e3s7Izyhh4cHMfEAuLCwID7LuB9oNBru7OxkhPv9fvb09PzdfpDQ2dkZVSqV2NTU1MTZ2Vnu7u7y+vqax8fHXF1dZW9vLxUKhVg3NTWVwvp2Tw4GgxwcHKQgCD/uyTqdjk6nMy1HQmY+F93c3GBjYwMOhwM+nw/Pz89QKpUoKyuD0WiE2WxGe3s7BCH9AeVHg/+rXz94/QPuq/rAH+f81wAAAABJRU5ErkJggg=='
}


geen = [ 'backepsilon']
griekse_letters = ['Delta', 'Gamma', 'Lambda', 'Omega', 'Phi', 'Pi', 'Psi', 'Sigma', 'Theta', 'Xi', 'alpha','beta', 'chi', 'delta', 'epsilon', 'eta', 'gamma', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'omega', 'phi', 'pi', 'psi', 'rho', 'sigma', 'tau', 'theta', 'upsilon', 'varphi', 'xi', 'zeta']
letterachtige_symbolen = ['infty','nabla',]
getalsoorten = ['BbbC', 'BbbN', 'BbbR', 'BbbZ',]
vergelijkingen = ['Doteq', 'Equiv', 'approx', 'approxeq',  'circeq', 'cong', 'curlyeqprec', 'curlyeqsucc', 'doteq', 'doteqdot', 'eqdef', 'eqsim', 'equiv', 'geq', 'geqq', 'ggg', 'gnapprox', 'gneqq', 'gnsim', 'gtrapprox', 'gtrsim', 'leq', 'leqq', 'lessapprox', 'lesseqgtr', 'lll', 'lnapprox', 'lneqq', 'napprox', 'ncong', 'ne', 'neg', 'neq', 'nequiv', 'ngeq', 'nleq', 'nless', 'nmid', 'nprec', 'nsim', 'nsucc',  'prec', 'preccurlyeq', 'preceq', 'precnsim', 'precsim', 'propto', 'questeq', 'sim', 'succ', 'succeq']
pijlen = ['Leftrightarrow', 'Longleftarrow', 'Longleftrightarrow', 'Longrightarrow', 'Rightarrow', 'acwopencirclearrow', 'downarrow', 'leftrightarrow', 'longleftarrow', 'longleftrightarrow', 'nleftarrow', 'nleftrightarrow', 'nrightarrow', 'nwarrow', 'uparrow', 'updownarrow']
verzamelingen = ['Subset', 'bigcap', 'bigcup', 'cap', 'complement', 'cup', 'cupdot', 'emptyset', 'exists', 'forall', 'in', 'nexists', 'ni', 'notin', 'nsubset', 'nsubseteq', 'nsupset', 'nsupseteq', 'sqcap', 'sqcup', 'sqsubset', 'sqsubseteq', 'sqsupset', 'sqsupseteq', 'subset', 'subseteq', 'subsetneq', 'supset', 'supseteq', 'supsetneq']
functies = ['coprod', 'iiint', 'int', 'lceil', 'lfloor', 'oiiint', 'oiint', 'oint', 'rceil', 'rfloor', 'sum']
operatoren = ['bigcirc', 'bigodot', 'bigoplus', 'bigotimes', 'bigtriangledown', 'bigtriangleup', 'div', 'dotplus', 'longmapsto', 'mapsfrom', 'mapsto', 'mapsup', 'mid', 'mp', 'ominus', 'oplus', 'otimes', 'pm', 'prod', 'times', 'to']
haakjes = ['leftangle', 'rightangle']
matrix = ['adots', 'cdot', 'cdots', 'ddots', 'dots', 'ldots', 'vdots']
meetkunde = ['angle', 'asymp', 'between', 'measuredangle', 'nparallel', 'parallel', 'perp']
andere = ['ast', 'blacksquare', 'bowtie', 'checkmark', 'circ', 'obar', 'ocirc', 'underbar', 'yen']
logica = ['bigwedge', 'vdash', 'wedge']
triangle = ['blacktriangleright','ntriangleleft', 'ntrianglelefteq', 'ntriangleright', 'ntrianglerighteq','triangleeq', 'triangleleft', 'triangleq', 'triangleright', 'trianglerighteq', 'vartriangleright']

temp = [sorted(griekse_letters),sorted(letterachtige_symbolen),sorted(getalsoorten),sorted(vergelijkingen),sorted(pijlen),sorted(verzamelingen),sorted(functies),
sorted(operatoren),sorted(haakjes),sorted(matrix),sorted(meetkunde),sorted(andere),sorted(logica)]


gui_symbols = {"move" : "✥", "print" : "⎙", "save" : "🖫", "close" : "🗙", "copy" : "☍", "paste" : "📋", "cut" : "✂",
"undo" : "⎌"}


class Pdf_viewer:
    def __init__(self, path):
        self.min_zoom = 50
        self.max_zoom = 225
        self.step = 25
        self.zooms ={1.2*(i)/100 : i for i in range(self.min_zoom,self.max_zoom+1,self.step)}
        self.base_values = {"page_number": 0, "zoom": 1.2, "has_empty": "y", "text": False, "fontsize": 20, "path" : "C:/Users/karel/Desktop/pdfmath/algebraI.pdf"}
        #self.path = self.base_values["path"]
        self.path = path
        self.root = tk.Tk()
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        #self.path = self.decode_save("path")C:/Users/karel/Desktop/pdfmath/main.py
        self.doc = fitz.open(self.path)
        self.textmanager = Textmanager()
        self.zoom = float(self.decode_save("zoom"))
        self.fontsize = int(self.decode_save("fontsize"))
        self.page_height = self.doc[0].rect.height
        self.page_width = self.doc[0].rect.width
        self.page_count = self.doc.page_count+1
        self.page_image_list = self.initialize_labels()
        self.width = 1
        self.page_number_text = False
        #self.root.geometry("500x400")'-fullscreen'
        self.root.geometry("500x400")
        self.root.state('zoomed')
        self.page_number_box = None
        self.labels = self.initialize_labels()
        self.page_frames = self.initialize_labels()
        self.old_page = -1
        self.page_widgets = [[] for i in range(self.page_count)]
        self.page_widgets_save_object = [[] for i in range(self.page_count)]
        self.page_widgets_save_object_cache = [[] for i in range(self.page_count)]
        self.frame = tk.Frame(self.root)
        self.frame.pack(expand=True, fill="both")
        self.create_text_strings_list()
        self.has_empty = self.decode_save("has_empty")
        self.empty_image = self.create_empty_image()
        self.active_widget = "marker"
        if self.has_empty == "y":
            self.labels_e = self.initialize_labels()
        self.m = fitz.Matrix(self.zoom, self.zoom)

    def get_print_path(self):
        new_path = self.path[:-4] + "print_bestand" + ".pdf"
        return new_path
    def get_path(self):
        return self.path
    def get_page(self, page_number):
        return self.doc.load_page(page_number)
    def initialize_labels(self):
        return [None]*self.page_count
    def end_program(self):
        #self.save()
        self.root.destroy()
    def run(self):
        self.root.mainloop()
    def make_page_image(self, page_number, zoom):
        #m = fitz.Matrix(zoom, zoom)
        pix = self.doc[page_number].get_pixmap(matrix = self.m)

        #mode = "RGBA" if pix.alpha else "RGB"
        mode = "RGB"
        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)
        return img
    def create_empty_image(self):
        n,m = int(self.page_width*self.zoom),int(self.page_height*self.zoom)
        im = Image.new('RGB', (n, m),(255,255,255))
        photo_im = ImageTk.PhotoImage(im)
        return photo_im
    def get_page_image_list(self):
        return [self.make_page_image(page, self.zoom) for page in self.doc]
    def _on_mousewheel(self, event):
        self.canvas.yview_scroll(-1*(event.delta//120), "units")
        self.page_is_changed(event)
    def page_is_changed(self, event=None):

        self.y = self.canvas.canvasy(0,0)
        if self.detect_page_change():
            if self.page_number_text != False:
                self.page_number_text.configure(text = "pagina: " + str(self.get_row()+1) + "/" + str(self.page_count))
            self.update_frames(event)
    def validate(self, event):
        input = self.page_number_box.get()
        if str.isdigit(input):
            input = int(input)

            if input >= 0 and input <= self.page_count:
                self.move_to_page(input)
    def detect_page_change(self):
        row =  self.get_row()
        if self.old_page != row:
            self.old_page = row
            return True
        else:
            return False
    def make_toc(self, root):
        toc = self.doc.get_toc()
        if len(toc)>0:

            #self.tree_frame = ttk.Frame(root)
            self.tree = ttk.Treeview(root)
            self.sizegrip = ttk.Sizegrip(self.tree)
            iid={1:0}
            self.tree.insert('', tk.END, text=toc[0][1] +"| " + str(toc[0][2]), iid=0, open=False)
            for i in range(1,len(toc)):
                self.tree.insert('', tk.END, text=toc[i][1] +"| " + str(toc[i][2]), iid=i, open=False)
                if toc[i][0]>toc[i-1][0]:
                    iid[toc[i-1][0]]=i-1
                elif toc[i][0]<toc[i-1][0]:
                    iid[toc[i][0]]=i
                if toc[i][0] != 1:
                    self.tree.move(i,iid[toc[i][0]-1],tk.END)
            self.tree.bind("<Double-1>", lambda e: self.move_to_page(toc[int(self.tree.selection()[0])][2]))
            self.sizegrip.bind("<B1-Motion>", lambda e: self.drag(self.tree, e))
            #self.tree.pack(fill = "both", expand = True)
            self.tree.configure(height = len(self.tree.get_children()))
            #self.unpack(self.tree, self.sizegrip)
            self.sizegrip.pack(side = "bottom",anchor = "se")

            self.tree.place(x=0,y=0)

            self.sizegrip.bind("<Double-1>", lambda e: self.unpack(self.tree, self.sizegrip))
            #self.sizegrip.bind("<Double-1>", lambda e: self.tree_frame.configure(height=len([i for i in range(len(toc)) if self.tree.bbox(i) != ""])))


            #self.tree.place(x=0,y=0)
            self.tree_height=(len(self.tree.get_children())+2)*20
            self.tree_width=self.tree_height*4/5
        #tree_frame.pack(side = 'left')
    def unpack(self, widget, grip, expand = True, fill = 'both'):
        if widget.winfo_height()>20:
            widget.place_forget()
            widget.place(x=0,y=0)
        else:
            widget.place_forget()
            widget.place(x=0,y=0,width =self.tree_width, height = self.tree_height)
    def drag(self,root, event):
        width = event.x_root
        height = event.y_root-event.widget.master.winfo_rooty()
        if height >20 and width >20:
            root.place(x=0,y=0,width=width, height=height)
            self.tree_height=self.tree.winfo_height()
            self.tree_width=self.tree.winfo_width()
    def add_pagebox(self,root):


        self.page_number_box = tk.Entry(root,relief='groove',width = 10^len(str(self.page_count)))
        self.page_number_box.bind("<KeyRelease>",self.validate)
        self.page_number_box.pack(side = "left")
    def move_to_page(self, page_number):
        self.canvas.yview_moveto((page_number-1)/(self.page_count-1))
        self.page_is_changed()
    def get_row(self):
        return int(self.y/(self.page_height*self.zoom))
    def run_program(self):
        self.make_widgets()
        self.run()
    def make_widgets(self):
        self.make_menubar()

        self.make_canvas()
        """for i in range(self.page_count-1):
            self.set_image(i)"""
        self.make_toc(self.canvas)
    def make_downbar(self, root):
        downbar = tk.Frame(root)
        self.make_scale(downbar)
        self.add_pagebox(downbar)
        self.make_page_number_text(downbar)
        downbar.pack(side = "bottom")
    def make_page_number_text(self, root):
        self.page_number_text = tk.Label(root, text = "pagina: " + str(self.get_row()+2) + "/" + str(self.page_count))
        self.page_number_text.pack(side = "right")
    def schaal_move(self,event):
        val = self.schaal.get()
        self.percent_label.configure(text=str(val) + "%")
        self.set_zoom(val)
    def make_scale(self, root):

        self.schaal = tk.Scale(root, from_=min(self.zooms.values()), to=max(self.zooms.values()), orient = "horizontal",
        resolution = self.step, showvalue = 0)
        self.schaal.set(self.zooms[self.zoom])
        self.schaal.bind("<ButtonRelease-1>", self.schaal_move)
        self.percent_label=tk.Label(root, text=str(self.zooms[self.zoom]) + "%")
        self.percent_label.pack(side = "left")
        self.schaal.pack(side = "left")
    def make_positive(self, n,m):
        if n>=0 and n<m:
            return n
        if n<0:
            return 0
        else:
            return m
    def make_menubar(self):
        self.menubar = tk.Menu(self.root)
        self.root.config(menu = self.menubar)

        file_menu = tk.Menu(self.menubar)

        file_menu.add_command(label="Save", command=self.save)
        file_menu.add_command(label="Print", command=self.print_pdf_doc_verify)
        file_menu.add_command(label="Open", command=lambda: 0)
        self.menubar.add_cascade(label="File", menu=file_menu)

        self.make_toolbar()
    def deselect(self, w):
        for widget in self.toolbar.winfo_children():

            if widget.winfo_class() == w.winfo_class():
                widget.configure(bg = "SystemButtonFace")
        w.configure(bg = "cyan")
        self.active_widget = w.cget('text')


    def set_width(self,width):
        self.width = width
    def make_toolbar(self):
        self.toolbar = tk.Frame(self.frame)


        self.line_button = tk.Button(self.toolbar, text = 'line', relief='groove',
            command=lambda: self.deselect(self.line_button))
        self.line_button.pack(side=('left'))
        self.make_spinbox([i for i in range(1,21)], self.set_width)
        freedraw_button = tk.Button(self.toolbar, text = 'draw', relief='groove',
            command=lambda: 0)
        freedraw_button.pack(side=('left'))

        self.marker_button = tk.Button(self.toolbar, text = 'marker', relief='groove',
            command=lambda: self.deselect(self.marker_button), bg = "cyan")
        self.marker_button.pack(side=('left'))

        self.eraser_button = tk.Button(self.toolbar, text = 'eraser', relief='groove',
            command=lambda: self.deselect(self.eraser_button), bg = "SystemButtonFace")
        self.eraser_button.pack(side=('left'))

        text_write_button = tk.Button(self.toolbar, text = 'text', relief='groove',
            command=lambda: 0)
        text_write_button.pack(side=('left'))
        self.make_spinbox([4,6,8,10,12,14,16,18,20,24], self.set_fontsize, self.fontsize)

        self.toolbar.pack(side='top', fill='x')
        toolbar2 = tk.Frame(self.frame)
        toolbar2.pack(side='top', fill='x')
        control_centre = Symbol_control_center(toolbar2, self.toolbar, self.frame, self.textmanager)
    def make_spinbox(self, values, command, value=False):
        if not value:
            value=min(values)
        var = tk.StringVar(value = value)
        spinbox = ttk.Spinbox(self.toolbar, textvariable = var, values = values, width = 2, wrap = False, command = lambda: command(int(var.get())))
        spinbox.pack(side=('left'))
    def print_pdf_doc_verify(self):
        self.verify(self.print_pdf_doc)
    def verify(self, command):
        MsgBox = tk.messagebox.askquestion ('Document afdrukken','Er wordt een ingevulde pdf gemaakt, wil je doorgaan?',icon = 'warning')
        if MsgBox == 'yes':
           self.print_pdf_doc()

    def get_y(self,pn):
        return pn*self.page_height*self.zoom
    def make_canvas(self):

        self.canvas=tk.Canvas(self.frame)
        #self.make_toc(self.canvas)
        #self.canvas.configure(yscrollincrement='2m')
        self.canvas.pack(side = "left", fill = "both", expand = 1)
        self.canvas.bind("<Configure>", lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))
        for i in range(self.page_count):
            self.create_window(i)
        self.make_scrollbar(self.canvas, "y")
        self.page_number_text = False
        self.move_to_page(int(self.decode_save("page_number")))


        self.make_scrollbar(self.canvas, "x")
        self.make_downbar(self.canvas)


    def scrollbarcommand(self, event, val):
        self.sbar.set(event,val)
        self.page_is_changed()

    def make_scrollbar(self, root, fill):
        if fill == "y":
            self.sbar = tk.Scrollbar(root, orient = "vertical", command=self.canvas.yview)
            self.sbar.pack(side= "right", fill= "y")
            self.canvas.configure(yscrollcommand=self.scrollbarcommand)

            #self.canvas.configure(scrollregion=self.canvas.bbox("all"))
            #self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)

        else:

            #
            sbar = tk.Scrollbar(root, orient = "horizontal", command=self.canvas.xview)
            sbar.pack(side= "bottom", fill= "x")
            self.canvas.configure(xscrollcommand=sbar.set)

        self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))



    def set_zoom(self, perc):

        zoom=self.zoom
        temp_dict = {self.zooms[key]:key for key in self.zooms.keys()}
        self.zoom =temp_dict[int(perc)]
        self.m=fitz.Matrix(self.zoom, self.zoom)
        self.canvas.destroy()
        if self.has_empty:
            self.empty_image = self.create_empty_image()
        self.make_canvas()
        self.prepare_frames(self.get_row(),zoom)

        self.update_frames()

    def prepare_frames(self, row, zoom):
        for i in range(-1,2):
            self.remove_redundant(self.make_positive(row+i,self.page_count))
            self.remove_widgets_on_page(self.make_positive(row+i,self.page_count),zoom)

    def update_frames(self, event = None):


        row = self.get_row()
        for i in range(self.page_count-1):

            """if self.allowed_row(i,row) == None:
                self.set_image(i)"""
            if self.allowed_row(i,row):
                self.set_image(i)
                self.load_widgets_on_page(i,self.zoom, event)
                #self.update_latex_widget_positions(i)
            else:
                self.remove_redundant(i)
                self.remove_widgets_on_page(i)
    def create_window(self, page_number):
        self.page_frames[page_number] = tk.Frame(self.canvas)
        self.canvas.create_window((0,page_number*self.page_height*self.zoom),window=self.page_frames[page_number], anchor = "nw")
        self.labels[page_number] = tk.Label(self.page_frames[page_number])
        self.labels_e[page_number] = tk.Label(self.page_frames[page_number])

        """self.labels[page_number].grid(row=page_number,column=0)
        self.labels_e[page_number].grid(row=page_number,column = 1)"""

        self.create_click_feature(self.labels[page_number])
        self.create_click_feature(self.labels_e[page_number])

    def allowed_row(self, page_number,row):
        if page_number == row or page_number-1 == row or page_number+1 == row:
            return True
        elif page_number-2 == row or page_number+2 == row:
            return True
        else:
            return False
    def remove_redundant(self, page_number):
        if self.page_image_list[page_number] != None:
            self.page_image_list[page_number] = None

    def set_image(self, page_number):
        if self.page_image_list[page_number] == None:
            img = self.make_page_image(page_number, self.zoom)
            self.page_image_list[page_number] = ImageTk.PhotoImage(img)
            self.labels[page_number].config(image = self.page_image_list[page_number])
            self.labels_e[page_number].config(image = self.empty_image)

            self.labels[page_number].grid(row=page_number,column=0)

            self.labels_e[page_number].grid(row=page_number,column = 1)
    def save(self):
        save_string = self.get_save_string()
        self.save_info(save_string, "text")
        self.save_info(str(self.fontsize), "fontsize")
        self.save_info(str(self.get_row()+1), "page_number")
        self.save_info(str(self.zoom), "zoom")
        self.save_info(self.has_empty, "has_empty")
        self.doc.saveIncr()
        time.sleep(1)
        self.doc.close()
        time.sleep(0.25)
        self.doc = fitz.open(self.path)
    def save_info(self, string, name):
        if name in self.doc.embfile_names():
            self.doc.embfile_upd(name, str.encode(string))
        else:
            self.doc.embfile_add(name, str.encode(string))
    def temp(self):
        self.make_line()
        self.save()
    def on_closing(self):
        self.save()
        time.sleep(1)
        self.doc.close()
        time.sleep(0.25)
        self.root.destroy()
    def get_save_string(self):
        total = ""

        for i in range(self.page_count):
            self.remove_widgets_on_page(i)
            for string in self.page_widgets_save_object[i]:
                total += string + "$$"
        return total
    def y_cursor(self):
        return self.y+ self.canvas.winfo_pointery()- self.canvas.winfo_rooty()
    def cursor_page_number(self):
        return int(self.y_cursor()/(self.zoom*self.page_height))

    def create_latex_widget(self, event = None):
        page_number = self.cursor_page_number()
        #position_check = self.widget_position_check(page_number, event.x,event.y)
        self.page_widgets[page_number].append(Latex_Widget(self.textmanager,self, page_number, self.fontsize))
        self.page_widgets[page_number][-1].resize(self.zoom)
        self.position_latex_widget(self.page_widgets[page_number][-1], event)

        self.page_widgets[page_number][-1].make_active(event)

    def position_latex_widget(self, widget, event):

        x = event.x
        y = event.y
        if event.widget.grid_info()['column'] != 0:
            x+=self.page_width*self.zoom
        widget.set_frame_pos(x,y)
    def update_latex_widget_positions(self, page_number):
        for widget in self.page_widgets[page_number]:
            widget.set_frame_pos(widget.x*self.zoom, widget.y*self.zoom)
    def create_click_feature(self, label):
        label.bind("<Button-1>", self.create_latex_widget)

        label.bind("<Button-3>", self.set_pos0)
        label.bind("<ButtonRelease-3>", self.make_annot)
        label.bind("<B3-Motion>", self.make_annot_visible)
    def create_text_strings_list(self):
        temp = self.decode_save("text")
        if temp:
            for text in temp.split("$$"):
                if text != "":
                    text1 = text.split("$")
                    self.page_widgets_save_object[int(text1[-2])].append(text)
    def decode_save(self,name):
        if name in self.doc.embfile_names():
            temp = self.doc.embfile_get(name).decode()
            return temp
        else:
            return self.base_values[name]
    def load_latex_widget_from_string(self, page_number, i):
        """if len(self.page_widgets_save_object[page_number]) == 0:
            self.page_widgets_save_object[page_number]=self.page_widgets_save_object_cache[page_number]"""
        string = self.page_widgets_save_object[page_number][i].split("$")
        x=self.make_int(string[0])
        y=self.make_int(string[1])
        fontsize = self.make_int(string[2])
        text = string[4]
        return x,y,fontsize,text
    def make_int(self, num):
        new_str = num.split(".")[0]
        return int(new_str)

    def load_widgets_on_page(self, page_number, zoom=None, event=None):
        if zoom == None:
            zoom = self.zoom

        for i in range(len(self.page_widgets_save_object[page_number])):
            x,y,fontsize,text = self.load_latex_widget_from_string(page_number,i)
            self.page_widgets[page_number].append(Latex_Widget(self.textmanager,self, page_number, fontsize, False))
            #self.page_widgets[page_number][-1].set_frame_pos(x,y)
            self.page_widgets[page_number][-1].set_text(text)
            self.page_widgets[page_number][-1].resize(zoom)
            self.page_widgets[page_number][-1].set_frame_pos(x*zoom, y*zoom)

            """if event != None and abs(event.delta//120)<=2:
                self.page_widgets[page_number][-1].graph()"""
            self.page_widgets[page_number][-1].graph()
        #self.page_widgets_save_object_cache[page_number]=self.page_widgets_save_object[page_number].copy()
        self.page_widgets_save_object[page_number].clear()

    def remove_widgets_on_page(self, page_number, zoom=None):
        if zoom==None:
            zoom = self.zoom
        self.page_widgets[page_number] = [widget for widget in self.page_widgets[page_number] if not widget.destroy]
        for widget in self.page_widgets[page_number]:
            widget_string = widget.return_data(zoom)
            if widget_string not in self.page_widgets_save_object[page_number] and widget_string != "empty":
                self.page_widgets_save_object[page_number].append(widget_string)
            widget.remove()
        self.page_widgets[page_number].clear()

    def make_line(self):
        line = self.get_page(self.get_row()).draw_line((20,20),(40,40), color = (0.5,0.5,0.5), width = 2)
    def print_pdf_page(self, page_num, temp_doc):
        row = self.get_row()
        if self.allowed_row(page_num, row):
            for widget in self.page_widgets[page_num]:
                widget.resize(1)
                widget.set_frame_pos(widget.x/self.zoom, widget.y/self.zoom)
                widget.graph()

                img = fitz.Pixmap(widget.fig2img())
                rect = widget.get_rect()
                temp_doc.load_page(page_num).insert_image(rect = rect, pixmap = img, overlay = True)

                widget.resize(self.zoom)
                widget.set_frame_pos(widget.x*self.zoom, widget.y*self.zoom)
                widget.graph()
        else:
            self.load_widgets_on_page(page_num,1)
            for widget in self.page_widgets[page_num]:
                img = fitz.Pixmap(widget.fig2img())
                rect = widget.get_rect()
                temp_doc.load_page(page_num).insert_image(rect = rect, pixmap = img, overlay = True)
            self.remove_widgets_on_page(page_num)
    def print_pdf_doc(self):

        self.doc.save(self.get_print_path())
        temp_doc = fitz.open(self.get_print_path())
        """zoom = self.zoom
        self.zoom = 1"""
        for i in range(self.page_count):
            self.print_pdf_page(i,temp_doc)
        #self.zoom=zoom
        self.update_frames()
        temp_doc.saveIncr()
        temp_doc.close()
    def set_fontsize(self, new, e=None):
        self.fontsize = new
    def mark(self,pn, rect, color, alpha=1.0, width = 0):
        page = self.get_page(pn)
        if self.active_widget == "line":
            annot = page.add_line_annot((rect[0],rect[1]),(rect[2],rect[3]))  #line
        else:
            annot = page.add_rect_annot(rect)  # 'Square'
        #annot.set_border(width=width, dashes=[1, 2])
        annot.set_border(width=width)
        annot.set_colors(stroke=(0,0,0),fill=color)
        annot.update(opacity=alpha)
        self.remove_redundant(pn)
        self.set_image(pn)
    def remove(self,pn,rect):
        remove=[]
        page =self.get_page(pn)
        for annot in page.annots():
            if annot.rect.intersects(rect):
                remove.append(annot)
        for annot in remove:
            page.delete_annot(annot)
        self.remove_redundant(pn)
        self.set_image(pn)
        #fitz.Rect(cord1[0],cord1[1],cord2[0],cord2[1])

    def make_annot(self,event):
        xs=(self.pos0[0]/self.zoom,event.x/self.zoom)
        ys=(self.pos0[1]/self.zoom,event.y/self.zoom)
        rect = fitz.Rect(min(xs),min(ys),max(xs),max(ys))
        self.temp_canvas.destroy()
        if self.active_widget == "marker":
            self.mark(self.cursor_page_number(),rect,(1,1,0),0.5)
        elif self.active_widget == "line":
            self.mark(self.cursor_page_number(),rect,(1,1,0),1,self.width)
        else:
            self.remove(self.cursor_page_number(),rect)
    def make_annot_visible(self,event):
        x=self.pos0[0]
        y=self.pos0[1]
        self.temp_canvas.coords(self.temp_contour,x,y,event.x,event.y)
        #self.make_transparent()
    def set_pos0(self,event):
        row = self.cursor_page_number()
        self.pos0=(event.x,event.y)
        self.temp_canvas = tk.Canvas(self.labels[row],bg='white')
        self.temp_canvas.configure(width = self.page_width *self.zoom, height=self.page_height *self.zoom)
        self.make_transparent()
        if self.active_widget == "line":
            self.temp_contour = self.temp_canvas.create_line(event.x,event.y,event.x+1,event.y+1)
        else:
            self.temp_contour = self.temp_canvas.create_rectangle(event.x,event.y,event.x+1,event.y+1)
        self.temp_canvas.place(x=0,y=0)
    def make_transparent(self):
        hwnd = self.temp_canvas.winfo_id()
        colorkey = win32api.RGB(255,255,255)
        wnd_exstyle = win32gui.GetWindowLong(hwnd, win32con.GWL_EXSTYLE)
        new_exstyle = wnd_exstyle | win32con.WS_EX_LAYERED
        win32gui.SetWindowLong(hwnd,win32con.GWL_EXSTYLE,new_exstyle)
        win32gui.SetLayeredWindowAttributes(hwnd,colorkey,255,win32con.LWA_COLORKEY)


class Textmanager:
    def __init__(self):
        self.replace_symbol = "✥"
        self.invalid_keycodes = [8, 46, 17, 18,37,38,39,40]
        self.continue_chars = [",",  "/"]
        self.special_char = 'ù'
        self.functional_symbols = ["^", "_"]

        self.brackets = [("(", ")"), ("[", "]")]
        self.matrix_brackets = [("(", ")"), ("[", "]")]
        self.matrix_brackets.append(("", ""))
        self.matrix_brackets.append(("|", "|"))


        self.symbol_dict = {
        'dddot(': 'dddot','ddot(': 'ddot', 'wan(': 'widehat','inf': 'infty', 'sq(': 'sqrt','int': 'int', 'wbar(': 'overline','bar(': 'overline', 'lan': 'leftangle', 'ran': 'rightangle', 'perp': 'perp', 'neq': 'neq', 'leqap': 'lessapprox', 'geqap': 'gtrapprox',  'el': 'backepsilon', 'sueq': 'subseteq', 'useq': 'supseteq', 'sneq': 'subsetneq', 'usneq': 'supsetneq', 'lnap': 'lnapprox', 'gnap': 'gnapprox', 'mapt': 'longmapsto', 'ldots': 'ldots', 'vdots': 'vdots', 'deqd': 'doteqdot', 'deq': 'doteq', 'par': 'parallel', 'asy': 'asymp', 'otim': 'otimes', 'vec(': 'vec', 'nrt': 'ntriangleleft', 'nleq': 'nleq', 'div': 'div', 'npar': 'nparallel', 'La': 'Lambda', 'lll': 'lll', 'oiint': 'oiint', 'ngeq': 'ngeq', 'Th': 'Theta', 'bsq': 'blacksquare', 'neg': 'neg', 'sum': 'sum', 'bowt': 'bowtie',  'leq': 'leq', 'ggg': 'ggg', 'lneqq': 'lneqq', 'Na': 'BbbN', 'Co': 'BbbC', 'In': 'BbbZ', 'Re': 'BbbR', 'Arr': 'Rightarrow', 'vtrr': 'vartriangleright', 'and': 'wedge', 'ch': 'chi', 'prec': 'prec', 'nsueq': 'nsubseteq', 'nin': 'notin', 'Trup': 'bigtriangleup', 'up': 'upsilon', 'cap': 'cap', 'mu': 'mu', 'tau': 'tau', 'in': 'in', 'eqsim': 'eqsim', 'gnsim': 'gnsim', 'rteq': 'triangleq', 'Sueq': 'sqsubseteq', 'pam': 'mapsfrom', 'sim': 'sim', 'nequ': 'nequiv', 'succ': 'succ', 'vda': 'vdash', 'uparr': 'uparrow', 'nsim': 'nsim', 'eqqq': 'Equiv', 'app': 'approx', 'nsucc': 'nsucc', 'eqq': 'equiv', 'Cup': 'bigcup','iiint': 'iiint', 'iint': 'iint', 'And': 'bigwedge', 'su': 'subset', 'leqq': 'leqq', 'mapup': 'mapsup', 'nl': 'nless', 'nap': 'napprox', 'ast': 'ast', 'Si': 'Sigma', 'nrteq': 'ntrianglelefteq', 'nex': 'nexists', 'tim': 'times', 'man': 'measuredangle', 'adots': 'adots', 'check': 'checkmark', 'la': 'lambda', 'xi': 'xi', 'Ph': 'varphi', 'De': 'Delta', 'io': 'iota', 'nrra': 'nleftarrow', 'us': 'supset', 'ntreq': 'ntrianglerighteq', 'Xi': 'Xi', 'precceq': 'preccurlyeq', 'narra': 'nleftrightarrow',  '°': 'angle', 'upuarr': 'updownarrow', 'be': 'beta', 'rh': 'rho', 'al': 'alpha', 'redo': 'acwopencirclearrow', 'mid': 'mid', 'nmid': 'nmid', 'nus': 'nsupset', 'si': 'sigma', 'dot(': 'dot', 'apeq': 'approxeq', 'ceqsucc': 'curlyeqsucc', 'Psi': 'Psi', 'yen': 'yen', 'precsim': 'precsim', 'geq': 'geq', 'precnsim': 'precnsim', 'ncong': 'ncong', 'puarr': 'downarrow', 'ceq': 'circeq', 'lc': 'lceil', 'rc': 'rceil', 'oiiint': 'oiiint', 'lf': 'lfloor', 'rf': 'rfloor', 'ddots': 'ddots', 'ex': 'exists', 'rab(': 'underbar', 'Pi': 'Pi', 'cpro': 'coprod', 'gsim': 'gtrsim', 'gneqq': 'gneqq', 'betw': 'between', 'th': 'theta', 'Com': 'complement', 'na': 'nabla', 'dplus': 'dotplus', 'et': 'eta', 'fa': 'forall', 'qcup': 'sqcup', 'Us': 'sqsupset', 'map': 'mapsto', 'Trd': 'bigtriangledown', 'Useq': 'sqsupseteq', 'propto': 'propto', 'pi': 'pi', 'dots': 'dots', 'narr': 'nrightarrow', 'Doteq': 'Doteq', 'qcap': 'sqcap', 'ka': 'kappa', 'nprec': 'nprec', 'con': 'cong',  'oint': 'oint', 'defeq': 'eqdef', 'ph': 'phi', 'Ga': 'Gamma', 'ceqprec': 'curlyeqprec', 'qeq': 'questeq', 'cup': 'cup', 'cdots': 'cdots', 'hat(': 'hat', 'ps': 'psi', 'ntr': 'ntriangleright', 'cupd': 'cupdot', 'Su': 'sqsubset', 'cdot': 'cdot', 'Om': 'Omega', 'nsu': 'nsubset', 'ze': 'zeta',  'bcir': 'bigcirc', 'cir': 'circ', 'ocir(': 'ocirc', 'pro': 'prod',"nd": 'trianglerighteq', 'treq': 'trianglerighteq', 'nwarr': 'nwarrow', 'ddddot(': 'ddddot', 'succeq': 'succeq', 'ga': 'gamma', 'nUseq': 'nsupseteq', 'Cap': 'bigcap', 'de': 'delta', 'cev(': 'overleftarrow', 'geqq': 'geqq',  'oplus': 'oplus', 'ni': 'ni', 'ne': 'ne', 'leqgtr': 'lesseqgtr', 'obar': 'obar', 'nu': 'nu', 'omin': 'ominus', 'om': 'omega',  'to': 'to', 'es': 'emptyset', 'Oplus': 'bigoplus', 'Odot': 'bigodot', 'preceq': 'preceq', 'ep': 'epsilon', 'Otim': 'bigotimes',
          'arra': 'leftrightarrow', 'Arra': 'longleftrightarrow', 'Rra': 'Longleftarrow', 'Arr': 'Longrightarrow', 'rt': 'triangleleft', 'tr': 'triangleright'}


        self.symbol_dict['ce('] = self.symbol_dict['lc']
        self.symbol_dict['fl('] = self.symbol_dict['lf']


        self.symbol_dict = {self.special_char + x : "\\" + y + "\," for x,y in self.symbol_dict.items()}

        self.symbol_dict['<=>'] = '\Leftrightarrow' + "\,"
        self.symbol_dict['==='] = '\equiv' + "\,"
        self.symbol_dict['-+'] = '\mp' + "\,"
        self.symbol_dict['+-'] = '\pm' + "\,"

        self.symbol_dict['<='] = '\Leftarrow' + "\,"
        self.symbol_dict['=>'] = '\Rightarrow' + "\,"

        self.symbol_dict['=<'] = '\leq' + "\,"
        self.symbol_dict['>='] = '\geq' + "\,"

        self.symbol_dict['->'] = '\\to' + "\,"


        #self.symbol_dict['->'] = '\\to '


        self.symbol_dict['!='] = '\neq' + "\,"
        self.symbol_dict['=!'] = '\neq' + "\,"

        self.symbol_dict['=~'] = '\cong' + "\,"
        self.symbol_dict['~='] = '\cong' + "\,"
        self.multi_symbols_list = [key for key in self.symbol_dict if key[0] != self.special_char]
        self.math_chars = ["+", ".", "-", "*", "=", "<", ">"]

        self.functions = [key[:-1] for key in self.symbol_dict if key[-1]=="("]
        self.strange_functions = {self.special_char + "ce(": self.special_char +"rc(", self.special_char +"fl(":self.special_char +"rf("}

        self.symbol_dict_reverse = {self.symbol_dict[key]:key for key in self.symbol_dict}
    def clean_string(self, str, char):
        split_text = str.split(char)
        total_string = ""
        for part in split_text[:-1]:
            if part != "\\":
                total_string+="{part}\{char}".format(part = part, char = char)
        total_string+=split_text[-1]
        return total_string
    def replace_symbols_in_text(self, input,transitions):
        for key in self.symbol_dict:
            if "(" in key:
                input = self.replace_bracket_function(key, input,transitions)

            else:
                input = input.replace(key,"(" + self.special_char+self.special_char+ self.symbol_dict[key]+ self.special_char+self.special_char+")")
                #transitions[self.symbol_dict[key]] = key
        return input
    def check_for_matrix(self, temp_str,transitions):
        for c in self.matrix_brackets:
            i = temp_str.find(self.special_char + "m" + c[1])
            if i !=-1:
                j = i + 2+len(c[1])
                s = temp_str[j:j+2]
                if s.isdigit():
                    search_for = self.special_char + "m" + c[1] + s
                    matrix = self.make_matrix(int(s[0]),int(s[1]),c[0]+c[1])
                    temp_str = temp_str.replace(search_for,matrix)
        return temp_str
    def make_matrix(self, n_rows,n_cols, brackets):
        if brackets == "":
            brackets = "()"
        matrix = ""
        if n_rows == 1:
            col = "{ }"
        else:
            col = "\\genfrac{L}{R}{0}{}{ }{ }"
            i = 2
            while i<n_rows:
                col = col.replace(" ", "\\genfrac{}{}{0}{}{ }{ }")
                i*=2
            col =col.replace(" ", "0",n_rows)
        matrix += col.replace("L",brackets[0]).replace("R", "")
        if n_cols>2:
            for i in range(1,n_cols-1):
                matrix += col.replace("L","").replace("R", "")
        matrix += col.replace("R",brackets[1]).replace("L", "")
        return matrix

    def is_valid_to_continue(self, char):
        return char.isdigit() or char in self.continue_chars
    def add_while_digit(self, i, sign, text, end = -1):
        if i>=len(text) or i<0:
            return -1
        elif text[i].isalpha() or  text[i] in ["(", ")"]:
            return i
        else:
            if end==-1:
                end = len(text)
            j=i
            while j < end and j>=0 and self.is_valid_to_continue(text[j]):
                j+=sign
            return j-sign
    def make_frac(self, text, sym = "/", transitions = {},pos=0):
        numerator_divisor_pair = [-1,-1,-1,-1,False,False]
        div = text.find(sym,pos)

        if div == -1:
            return text.replace(self.replace_symbol, sym)
        bracket_pair = sorted(self.find_end_bracket(text, div+1))
        if bracket_pair[0] >=0:
            numerator_divisor_pair[2] = bracket_pair[0]  #divisor start
            numerator_divisor_pair[3] = bracket_pair[1]  #divisor end
            numerator_divisor_pair[5] = True
        bracket_pair = sorted(self.find_end_bracket(text, div-1))
        if bracket_pair[0] >=0:
            numerator_divisor_pair[0] = bracket_pair[0]  #numerator start
            numerator_divisor_pair[1] = bracket_pair[1]  #numerator end
            numerator_divisor_pair[4] = True

        if numerator_divisor_pair[0] == -1:
            numerator_divisor_pair[0] = self.add_while_digit(div-1,-1,text)
            numerator_divisor_pair[1] = div-1
        if numerator_divisor_pair[2] == -1:
            numerator_divisor_pair[2] = div+1
            numerator_divisor_pair[3] = self.add_while_digit(div+1,1,text)
        return self.make_frac(self.frac_pair(numerator_divisor_pair, text,sym, transitions),sym,transitions,pos+1)
    def frac_pair(self,pair, text,sym,  transitions):

        numerator = text[pair[0]:pair[1]+1]
        if pair[4]:
            r_num = "(" + numerator  + ")"
        else:
            r_num =numerator

        divisor = text[pair[2]:pair[3]+1]

        if pair[5]:
            r_div = "(" + divisor  + ")"
        else:
            r_div =divisor
        if numerator == "()":
            numerator = "\\ "
            r_num = "(\\ )"
        if divisor == "()":
            divisor = "\\ "
            r_div = "(\\ )"


        old_str = "{num}{sym}{div}".format(sym=sym, num = r_num, div = r_div)
        if sym == "/":
            new_str = "\\frac{num}{div}".format(num = "{" + numerator + "}", div = "{" + divisor+ "}")
        else:
            new_str = "{num}{sym}{div}".format(sym=self.replace_symbol,num = "{" + r_num + "}", div = "{" + divisor+ "}")
        new_str = "(" + self.special_char+self.special_char +new_str+ self.special_char+self.special_char+")"
        transitions[self.replace_useless(new_str.replace(self.replace_symbol, sym))] = self.replace_useless(old_str)
        return text.replace(old_str, new_str,1)

    def fix_text(self, text):
        transitions = {}
        text = text.replace("\\", "\\backslash" + "\,")
        text = text.replace("%", "\%" + "\,")
        #text = text.replace("\\", "$\$")
        #text = text.replace("|", "\\vert\,")
        n_text =self.replace_symbols_in_text(text,transitions)
        n_text = self.make_frac(n_text,"/", transitions)
        n_text = self.make_frac(n_text,"^",transitions)
        n_text = self.make_frac(n_text,"_",transitions)
        n_text = self.check_for_matrix(n_text,transitions)
        n_text = self.replace_useless(n_text)

        n_text = n_text.replace(" ", "\ ")
        n_text = n_text.replace("\"", "''")
        n_text = n_text.replace("{}", "{\ }")


        for key0 in transitions:
            for key1 in transitions:
                transitions[key0] = transitions[key0].replace(key1,transitions[key1])

        transitions = self.get_more_transitions(n_text,transitions)
        return n_text,transitions
    def replace_useless(self,text):
        text=text.replace(self.special_char+self.special_char+")", "")
        text=text.replace("(" + self.special_char+self.special_char, "")
        text=text.replace(self.special_char+self.special_char, "")
        return text
    def find_end_bracket(self,text, start, symbol = ["(", ")"]):
        length =len(symbol[0])
        if start<0 or start>=len(text):
            return [-2,-2]
        score = self.get_score(text[start:start + length], symbol)
        if score == 0:
            return [-1,-1]
        sign = score
        i = start + sign
        while i>=0 and i<=len(text)-length and score != 0:
            score += self.get_score(text[i:i + length],symbol)
            i+=sign
        if score == 0:
            return [start+sign,i-2*sign]
        else:
            return [-1,-1]
    def get_score(self,char, symbol):
        if char == symbol[0]:
            return 1
        if char == symbol[1]:
            return -1
        return 0
    def replace_bracket_function(self, func, text, transitions):

        start = text.find(func[1:])

        if start == -1:
            return text

        if text[start-1] == self.special_char:
            exp = ""
            exp2 = ""
        else:
            i = self.find_end_bracket(text, start-1)
            if i[0] == -1:
                exp = text[start-1]
                exp2 = "[{n}]".format(n=exp)
            elif i[0] == -2:
                return text
            elif i[0] == i[1]-1:
                exp = "()"
                exp2 = "[\\ ]"
            else:
                exp = "(" + text[min(i):max(i)+1] + ")"
                exp2 = "[" + text[min(i):max(i)+1] + "]"

        start_brac = start + len(func)-2
        end_brac = self.find_end_bracket(text, start_brac)[1]

        if end_brac == -1:
            old_str = "{s}{exp}{func}".format(exp = exp,s=self.special_char, func = func[1:])
            new_str = "{sym}{exp}{p}".format(sym = self.symbol_dict[func][:-2],exp = exp2 ,  p = "{}")
            transitions[self.replace_useless(new_str)] = self.replace_useless(old_str)
            new_str = "(" + self.special_char +self.special_char+ new_str + self.special_char+self.special_char + ")"
            return self.replace_bracket_function(func,text.replace(old_str, new_str,1),transitions)
        if end_brac <0:
            return text

        placeholder = text[start_brac+1:end_brac+2]

        old_str = "{s}{exp}{func}{p}".format(exp = exp,s=self.special_char, func = func[1:], p = placeholder)
        new_str = "{sym}{exp}{p}".format(sym = self.symbol_dict[func][:-2],exp = exp2 ,  p = "{" + placeholder[:-1]+ "}")
        transitions[self.replace_useless(new_str)] = self.replace_useless(old_str)
        new_str = "(" + self.special_char +self.special_char+ new_str + self.special_char+self.special_char + ")"
        return self.replace_bracket_function(func, text.replace(old_str, new_str,1),transitions)
    def get_more_transitions(self, text, transitions):
        i = 0
        length = len(text)
        while i<length:

            while i<length and text[i] == "\\":

                i+=1
                while i<length and text[i].isalpha():
                    i+=1
                if i<length and text[i] == "{":
                    j=i
                    i=self.find_end_bracket(text, i, ("{","}"))[1]+2
                    while i>0 and i<length and text[i] == "{":
                        i=self.find_end_bracket(text, i, ("{","}"))[1]+2

                        if i>=0:
                            j=i
                    if j<0:

                        i=length
                    else:
                        i=j


            if i<length and text[i].isdigit():
                j=i
                while i<length and (text[i].isdigit() or text[i] == ","):
                    i+=1
                transitions[text[j:i]] = text[j:i]
            if i<length and text[i].isalpha():
                j=i
                while i<length and text[i].isalpha():
                    i+=1
                transitions[text[j:i]] = text[j:i]
            if i<length and text[i] in self.math_chars:
                transitions[text[i:i+1]] = text[i:i+1]
                i+=1
            else:
                i+=1
        return transitions
    def find_all(self, text,search):
        search_len = len(search)
        l = []
        i=text.find(search)
        while i>0:
            l.append(i)
            i=text.find(search, i+1)
        return l



class Symbol_button:
    def __init__(self, parent, code, root,textmanager):
        self.textmanager = textmanager
        self.root = root
        self.code = code
        self.photo = self.create_image(code)
        self.button = self.create_button(self.photo, parent)
        self.parent = parent
    def on_enter(self, event):
        self.label = tk.Label(self.root, text = self.textmanager.symbol_dict_reverse["\\" + self.code])
        self.label.place(x=self.button.winfo_x(),y=self.button.winfo_y()+2*self.button.winfo_height())
    def on_leave(self, event):
        self.label.destroy()
    def button_clicked(self):
        entry = self.parent.focus_get()
        text = entry.get()
        text += "\\" + self.code

        entry.delete(0, tk.END)
        entry.insert(0,text)
        entry.configure(width = len(text)+10)
    def create_button(self, img, parent):
        button = tk.Button(parent, image = img, command = self.button_clicked)

        button.bind('<Enter>', self.on_enter)
        button.bind('<Leave>', self.on_leave)
        return button
    def create_image(self, code):
        return tk.PhotoImage(data = image_dict[code])

    def destroy(self):
        self.photo = None
        self.button.destroy()

    """def create_image(self, code):
        f = open("demofile2.txt", "a")
        for key in self.symbol_dict:
            try:
                #text_str = "$" + self.symbol_dict[code] + "$"
                thing = self.symbol_dict[key]
                text_str = "$" + thing + "$"
                fig = plt.figure(figsize=(self.textsize/200,self.textsize/200))
                text = plt.text(self.margins,self.margins,text_str, fontsize = self.textsize)
                fig.patch.set_facecolor("white")
                plt.axis('off')
                plt.tight_layout()
                png_buf = io.BytesIO()
                plt.savefig(png_buf, bbox_inches='tight', pad_inches=0, format = 'png')
                png_buf.seek(0)
                hash = base64.b64encode(png_buf.read())

                f.write("\"" + thing[1:] + "\"" + " : " + str(hash) + ",\n")
                hash = b'iVBORw0KGgoAAAANSUhEUgAAAAcAAAASCAYAAACXScT7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAA4UlEQVR4nH2RvY5FUBSFtyGKE0Kh8BQa8QCik3g0pUan0KnOKdReQKKm14koECRrqrkzd3ZmVrlX1rf/NACgP/Txu1BVFQkhaN93bkopKUkSEkIQ4YfO84RlWSjLEgDwZrZtC03TMM8zAOANq5SiKIrI930+kFKKsiz7Lnwh+74HEWEYhlebV7LrOnJdl4Ig4HuGYUjrutI0TRz7PA88z0Oe5xyr6zqlaUpKKZ4EgKZpYBgGlmXhR9i2DaZpoq5rfgTbtimOY5JSciwAFEUBx3FwXReYeRwHxnHEfd/Q/nv2J9Ly5qq4Z/AvAAAAAElFTkSuQmCC'

            except ValueError:
                pass
        f.close()
        return tk.PhotoImage(data = hash)
        """
class Symbol_control_center:
    def __init__(self, root, parent, root2, textmanager):
        self.textmanager = textmanager
        self.root = root
        self.parent = parent
        self.root2 = root2
        self.list = []
        self.make_categories()

    def make_categories(self):

        self.list.append(Symbol_Category("Letters", griekse_letters, self))
        self.list.append(Symbol_Category("Pijlen", pijlen, self))
        self.list.append(Symbol_Category("Functies", functies, self))
        self.list.append(Symbol_Category("Haakjes", haakjes, self))
        self.list.append(Symbol_Category("Verzameling", verzamelingen, self))
        self.list.append(Symbol_Category("Vectoren", matrix, self))
        self.list.append(Symbol_Category("Vergelijking", vergelijkingen, self))
        self.list.append(Symbol_Category("Verzameling", triangle, self))
        self.list.append(Symbol_Category("Vectoren", andere, self))
        self.list.append(Symbol_Category("Vergelijking", operatoren, self))
        self.list.append(Symbol_Category("Verzameling", getalsoorten, self))
        self.list.append(Symbol_Category("Vectoren", letterachtige_symbolen, self))
        self.list.append(Symbol_Category("Vergelijking", logica, self))
        self.list.append(Symbol_Category("Vergelijking", meetkunde, self))
        self.list.append(Symbol_Category("X", [], self))
class Symbol_Category():
    def __init__(self, name, code_list, cc):
        self.parent = cc.parent
        self.list = cc.list
        self.root = cc.root
        self.code_list=code_list
        self.root2 = cc.root2
        self.textmanager = cc.textmanager
        self.name = name
        self.frame = None
        self.symbols = None
        self.create_button()
    def create_button(self):
        self.button = tk.Button(self.parent, text = self.name, command = self.open_symbols)
        self.button.pack(side = 'left')
    def destroy(self):
        if self.frame != None:
            self.frame.destroy()
            for s in self.symbols:
                s.destroy()
    def open_symbols(self):
        self.destroy_all()
        self.frame = tk.Frame(self.root)
        self.symbols = [Symbol_button(self.frame, code, self.root2,self.textmanager) for code in self.code_list]
        for s in self.symbols:
            s.button.pack(side = 'left')
        self.frame.pack(side = 'top', fill = 'x')
    def destroy_all(self):
        for category in self.list:
            category.destroy()
class Latex_Widget():
    def __init__(self, textmanager,pdfv, page_number, fontsize=20, is_active = False):
        self.textmanager = textmanager
        self.pdfv = pdfv
        self.label_root = pdfv.page_frames[page_number]
        self.frame_latex = tk.Frame(self.label_root)

        self.page_number = page_number
        self.frame_latex.bind("<Enter>",self.entered_widget)
        self.frame_latex.bind("<Leave>",self.left_widget)

        self.old_text= "nothing"
        self.frame_latex.config(bg='')
        self.button_fontsize = int(fontsize/1.5)
        self.button_font = tk.font.Font(size=self.button_fontsize)
        self.fontsize = fontsize
        self.fontsize_save = fontsize

        self.input = ""
        self.dpi = 100
        self.fig = plt.Figure(figsize=(fontsize/200, fontsize/300), dpi=self.dpi,animated =True)
        self.bbox = matplotlib.transforms.Bbox(np.array([[0,0],[15,self.dpi*self.fontsize/30]]))
        self.text = None
        self.is_active = is_active
        self.display_frame =None
        self.create_latex_textbox()
        if self.is_active:
            self.activate_entry()

        #self.make_transparent()
        self.latex_canvas._tkcanvas.bind("<ButtonPress-1>", self.make_active)
        #self.latex_canvas._tkcanvas.bind("<ButtonPress-1>", self.screengrab)

        self.destroy = False
        self.transitions_img = {}

    def revive(self):
        self.__init__(self.pdfv, self.page_number, self.fontsize_save)
        self.set_frame_pos(self.x,self.y)
        self.graph()
        self.leave_revive()
    def place_revive(self, x,y):
        self.temp_frame_latex = tk.Frame(self.label_root)
        self.revive = tk.Button(self.temp_frame_latex, text = gui_symbols["undo"], command = self.revive)
        self.revive.pack()
        self.revive.bind('<Leave>', self.leave_revive)
        self.temp_frame_latex.place(x=x,y=y)
    def leave_revive(self, event= None):
        self.temp_frame_latex.destroy()
    def entered_widget(self, event):
        self.frame_latex.lift(aboveThis=None)
        self.button_frame = tk.Canvas(self.label_root)

        destroy_button = tk.Button(self.button_frame, text = gui_symbols["close"],font = self.button_font)
        copy_button = tk.Button(self.button_frame, text = gui_symbols["copy"], activebackground = 'red', cursor = "leftbutton",font = self.button_font)
        calculate_button = tk.Button(self.button_frame,command = self.calculate, text = gui_symbols["copy"], activebackground = 'red', cursor = "leftbutton",font = self.button_font)
        self.move_button = tk.Button(self.button_frame, text = gui_symbols["move"], activebackground = 'red', cursor = "fleur",font = self.button_font)


        self.move_button.pack(side = "left")
        copy_button.pack(side = "left")
        calculate_button.pack(side = "left")
        destroy_button.pack(side = "left")
        #self.frame_latex.configure(height = self.bbox.y1+self.button_frame.winfo_height())
        if self.y-self.fontsize<0:
            self.button_frame.place(x=self.x,y=self.y)
        else:
            self.button_frame.place(x=self.x,y=self.y-self.button_fontsize)
        #self.button_frame.pack(anchor = "nw")
        copy_button.bind('<ButtonPress-1>', self.copy)
        copy_button.bind('<B1-Motion>', self.move)
        self.move_button.bind('<B1-Motion>', self.move)
        destroy_button.bind('<Double-Button-1>', self.destroy_)
        #self.button_frame.lift(aboveThis=None)
    def copy(self, event):
        self.pdfv.page_widgets[self.page_number].append(Latex_Widget(self.textmanager, self.pdfv,self.page_number, self.fontsize))
        self.pdfv.page_widgets[self.page_number][-1].set_text(self.input)
        self.pdfv.page_widgets[self.page_number][-1].set_frame_pos(self.x,self.y)
        self.pdfv.page_widgets[self.page_number][-1].graph()
    def move(self, event):
        self.button_frame.place_forget()
        x,y = self.get_xy(self.label_root)
        self.set_frame_pos(x,y, True)
    def get_xy(self, root):
        x,y= root.winfo_pointerx() - root.winfo_rootx(),root.winfo_pointery() - root.winfo_rooty()
        return x,y
    def left_widget(self, event):
        temp = self.button_frame.winfo_pointerxy()
        temp1=self.button_frame.winfo_containing(temp[0],temp[1])
        if temp1!=None:
            W=temp1.winfo_parent()
            if self.pdfv.root.nametowidget(W).winfo_class() != None and self.pdfv.root.nametowidget(W).winfo_class() != "Canvas":
                self.button_frame.destroy()

            else:
                self.button_frame.bind("<Leave>",self.left_widget)
        else:
            self.button_frame.destroy()
    def destroy_(self, event):
        self.destroy = True
        if self.is_active:
            self.frame_entry.destroy()
        x,y = self.get_xy(self.label_root)
        self.frame_latex.destroy()
        self.place_revive(x-5,y-5)

    def fig2img(self):
        buf = io.BytesIO()
        self.fig.savefig(buf, bbox_inches = "tight", pad_inches = 0.02)
        buf.seek(0)
        return buf
    def get_rect(self):
        cord1 = (self.x,self.y)
        cord2 = (self.x+self.bbox.x1, self.y + self.bbox.y1)
        cord2 = (int(cord2[0]), int(cord2[1]))
        return fitz.Rect(cord1[0],cord1[1],cord2[0],cord2[1])


    def resize(self, zoom):
        self.fontsize = self.fontsize_save*zoom
    def activate_entry(self):
        self.frame_entry =  tk.Frame(self.pdfv.page_frames[self.page_number])
        self.frame_entry.lift(aboveThis=None)

        self.entry = self.create_entry()

        #self.entry.bind("<Key>", self.graph)
        #self.entry.bind("<Key>", self.graph)
        self.entry.bind("<KeyRelease>", self.graph)
        #self.entry.bind("<FocusOut>", lambda e: self.frame_entry.destroy())
        #self.entry.bind("<Configure>", self.graph)

        self.entry.pack()
        self.entry.focus()

    def set_fontsize(self, fontsize):
        self.fontsize = fontsize
    def normalize(self,n, m,s):
        if n<0:
            return 0
        elif n+s>m:
            return m-s
        else:
            return n
    def set_frame_pos(self, x,y, move=False):
        if move and self.is_active:
            self.frame_entry.place_forget()
        f = self.pdfv.page_width*self.pdfv.zoom
        if self.pdfv.has_empty:
            f*=2
        x = self.normalize(x,f,self.bbox.x1)
        y = self.normalize(y,self.pdfv.page_height*self.pdfv.zoom,self.bbox.y1)
        self.frame_latex.place(x=x,y=y)
        self.x = x
        self.y = y
        if self.is_active and move == False:
            self.place_entry()
    def make_active(self, event):

        children = self.pdfv.page_widgets[self.page_number]
        for child in children:
            if child.is_active:
                child.make_inactive()

        self.is_active = True

        self.activate_entry()
        self.place_entry()

        self.entry.insert(0,self.input)
        self.resize_entry(self.input)
    def make_inactive(self):
        self.is_active = False

        self.frame_entry.destroy()
    def create_latex_textbox(self):
        self.latex_canvas = FigureCanvasTkAgg(self.fig, master=self.frame_latex)
        #self.latex_canvas.get_tk_widget().pack(side="bottom", fill="both", expand=True)
        self.latex_canvas._tkcanvas.pack(side="top", fill="both", expand=True)
        #self.graph()

        self.latex_canvas.draw()
        self.bg = self.latex_canvas.copy_from_bbox(self.fig.bbox)

    def place_entry(self):
        self.frame_entry.place(x=self.x, y=self.y+self.bbox.y1)

    def create_entry(self):
        return tk.Entry(self.frame_entry, font=("Calibri " + str(int(self.fontsize))))
    def resize_entry(self,entry_text):
        self.entry.configure(width = len(entry_text)+5)


    def process_input(self, text):
        if self.is_active:
            self.resize_entry(self.input)

        self.make_text(text + " ")

        #self.make_text("sdfdsqfdsqfds")
        #profiler.enable()
        self.latex_canvas.restore_region(self.bg)
        self.fig.draw_artist(self.text)

        self.latex_canvas.blit(self.fig.bbox)

        #self.latex_canvas.flush_events()
        #profiler.disable()
        #self.pdfvroot.after(1,self.update)

        """try:
            self.latex_canvas.draw()
        except:

            self.make_text(self.input)
            self.latex_canvas.draw()"""
        self.bbox = self.text.get_bbox_patch().get_bbox()



        if self.is_active and self.latex_canvas._tkcanvas.winfo_width != int(self.bbox.x1):
            self.place_entry()
        """if event !=None and event.type == '3':
            pass
        else:"""

        #self.latex_canvas.get_tk_widget().configure(width = int(self.bbox.x1), height = int(self.bbox.y1))
    def make_text(self,string):
        if self.text != None:
            self.text.set_text(string)
        else:
            self.text=self.fig.text(0, 0, string,va="bottom",  fontsize=self.fontsize,bbox=dict(facecolor='white', alpha=0.1))
    def get_input(self):
        self.input = self.entry.get()
    def update_input(self, text = None):
        if text != None:
            return self.textmanager.fix_text(text)[0]
        if self.is_active:
            self.get_input()
            """i = self.entry.index("insert")
            temp_str = self.input[:i] + "\_" + self.input[i:]
            temp_str = self.input
        else:
            temp_str = """
        temp_str = self.input
        temp_str,self.transitions = self.textmanager.fix_text(temp_str)

        if temp_str != "":
            #if temp_str[0] != "$" and temp_str[-1] != "$":
            #    #temp_str = r"$\mathrm{" + temp_str + "}$"
            #    temp_str = r"$" + temp_str + "$"
            return "$"+temp_str+"$"
        else:
            return "$\quad$"


    def graph(self, event=None):
        if event != None and event.type != '2' and event.keycode not in self.textmanager.invalid_keycodes:
            self.insert_bracket()

        text = self.update_input()
        if (event !=None and text !=self.old_text) or event == None:
            #process = multiprocessing.Process(target = self.process_input, args = text)
            #process.start()
            self.process_input(text)
            self.pady=4
            self.latex_canvas._tkcanvas.configure(width = int(self.bbox.x1), height = int(self.bbox.y1)+self.pady)
        self.old_text = text

            #self.make_sub_figures()
    def insert_bracket(self):
        self.get_input()
        i = self.entry.index("insert")
        for bracket_pair in self.textmanager.brackets:

            if bracket_pair[0] == self.input[i-len(bracket_pair[0]):i]:
                self.entry.insert(i,bracket_pair[1])
                self.entry.icursor(i)



    def set_text(self, str):
        self.input = str
    def remove(self):
        if self.is_active:
            self.frame_entry.destroy()
        self.frame_latex.destroy()
        #self.set_entry(str)
    def return_data(self, zoom):
        if self.input != "":
            return "{x}${y}${font}${pn}${input}".format(pn = self.page_number,x=self.x/zoom,y=self.y/zoom,font=self.fontsize_save,input = self.input)
        else:
            return "empty"
    def convert_buf(self,buf):
        file_bytes = np.asarray(bytearray(buf.read()), dtype=np.uint8)
        img= cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        ret, thresh = cv2.threshold(img, 230, 255, 0)
        return thresh
    def make_sub_figures(self):
        buf = self.fig2img()
        img = self.convert_buf(buf)
        """kernel = np.ones((1,1),np.uint8)
        img = cv2.dilate(img,kernel,iterations = 1)"""
        cv2.imwrite("test.png", img)
        contours, hierarchy = cv2.findContours(img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        rects = []

        #x,y,w,h = cv2.boundingRect(contours[0])
        #finds = [([x,y,w,h],len(self.input)-1)]
        """for i,hier in enumerate(hierarchy[0]):
            cnt = contours[i]
            area = cv2.contourArea(cnt)
            hull = cv2.convexHull(cnt)
            hull_area = cv2.contourArea(hull)
            solidity = float(area)/hull_area
            if True:
                x,y,w,h = cv2.boundingRect(cnt)
                y+=self.pady/2
                x-=self.pady/2
                print(hier,w*h)
                rect = self.latex_canvas._tkcanvas.create_rectangle(x,y,x+w,y+h)"""
        stop = False
        i=1
        if len(hierarchy[0]) == 1:
            stop = True
        while stop == False:
            if i==-1:
                """cnt = contours[i]
                x,y,w,h = cv2.boundingRect(cnt)
                y+=self.pady/2
                x-=self.pady/2
                rect = self.latex_canvas._tkcanvas.create_rectangle(x,y,x+w,y+h)"""
                break

            if hierarchy[0][i][2]==-1 or True:
                if i==-1:
                    break
                cnt = contours[i]

                x,y,w,h = cv2.boundingRect(cnt)
                print(hierarchy[0][i],w*h)
                y+=self.pady/2
                x-=self.pady/2
                rect = self.latex_canvas._tkcanvas.create_rectangle(x,y,x+w,y+h)
                i=hierarchy[0][i][0]




        print("---------------")

    def calculate(self):
        if self.display_frame == None:
            if self.is_active:
                i=self.entry.index('insert')-1
                if self.entry.select_present():
                    text=self.entry.selection_get()
                text=self.input[:i+1]
            else:
                text=self.input


            text=self.sympy_proof_text(self.update_input(text))
            print(text)
            #try:
            #expr0 = parse_expr(self.temp_sympy_proof(self.input),transformations = 'all', evaluate = False)
            #print(expr0)
            #print(parse_expr())
            expr=latex2sympy(text)
            print(expr)
            print(expr.trigsimp())
            print(expr.expand())
            new_expr = expr.simplify()
            print(new_expr)
                #result = str(expr)
            #print(text,expr)
            #print(sp.latex(text))

            #except:
            #    result = "Error"
            self.display_result(new_expr)
        else:
            self.display_frame.destroy()
            self.display_frame =None
    def sympy_proof_text(self, text):
        new_text = text.replace("\ ", "")
        new_text = new_text.replace("²", "^2")
        new_text = new_text.replace("³", "^3")
        function_list = ["ln", "log", "exp", "sin", "cos", "tan", "arcsin", "arccos",
                         "sinh", "cosh", "tanh", "coth", "arctan", "arccot"]
        for func in function_list:
            new_text = new_text.replace(func, "\\"+func)
        print(new_text)
        return new_text
        """new_text = new_text.replace(".", "*")
        new_text = new_text.replace(",", ".")"""
    def display_result(self, text):
        self.display_frame=tk.Frame(self.frame_latex)
        display_text = tk.Label(self.display_frame, text=text)
        display_text.pack()
        self.display_frame.place(x=0,y=0)














def main():
    pdfv = Pdf_viewer(sys.argv[1])
    pdfv.run_program()
main()
"""import cProfile, pstats

profiler = cProfile.Profile()
profiler.enable()
main()
profiler.disable()
stats = pstats.Stats(profiler).sort_stats('cumulative')
stats.print_stats(50)
#cProfile.run('main()')
#main()
"""
